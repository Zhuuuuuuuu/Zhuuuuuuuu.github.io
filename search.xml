<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Leetcode-836</title>
    <url>/2020/03/18/Leetcode/Leetcode-836/</url>
    <content><![CDATA[<h1 id="Leecode-836-Rectangle-Overlap"><a href="#Leecode-836-Rectangle-Overlap" class="headerlink" title="Leecode-836 Rectangle Overlap"></a>Leecode-836 <a href="https://leetcode-cn.com/problems/rectangle-overlap/" target="_blank" rel="noopener">Rectangle Overlap</a></h1><h2 id="思路：投影"><a href="#思路：投影" class="headerlink" title="思路：投影"></a>思路：投影</h2><p><strong>题目描述：判断两个矩阵是否有重叠面积</strong></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200318094941.jpg" alt=""></p>
<a id="more"></a>

<p><strong>Solution：</strong></p>
<ul>
<li>矩形重叠要考虑的情况很多，两个矩形的重叠可能有好多种不同的形态。这道题如果用蛮力做的话，很容易遗漏掉某些情况，导致出错。</li>
<li>矩形重叠是二维的问题，所以情况很多，比较复杂。为了简化问题，我们可以考虑将二维问题转化为一维问题。既然题目中的矩形都是平行于坐标轴的，我们将矩形投影到坐标轴上：</li>
</ul>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200318094941.jpg" alt=""></p>
<ul>
<li>矩阵投影到坐标轴上，就变成了<strong>区间</strong></li>
<li><strong>两个互相重叠的矩形，它们在 x* 轴和 y* 轴上投影出的区间也是互相重叠的</strong>。这样，我们就将矩形重叠问题转化成了区间重叠问题。</li>
</ul>
<p><strong>区间重叠是一维的问题，比二维问题简单很多。我们可以穷举出两个区间所有可能的 6 种关系：</strong></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200318095134.jpg" alt=""></p>
<ul>
<li>可以看到的是，区间的6种关系中，不重叠只有两种情况，判断不重叠更简单。</li>
<li>假设两个区间是[s1,e1],[s2,e2]的话，那么区间不重叠的两种情况就是<code>e1 &lt;= s2</code> 和 <code>e2 &lt;= s1</code>。</li>
</ul>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200318095306.jpg" alt=""></p>
<ul>
<li>那么区间不重叠的条件就是e1 &lt;= s2 || e2&lt;= s1，<strong>条件取反就是重叠的情况</strong></li>
</ul>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p><strong>Solution :</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isRectangleOverlap</span><span class="params">(<span class="keyword">int</span>[] rec1,<span class="keyword">int</span>[] rec2)</span></span>&#123;</span><br><span class="line">        <span class="comment">// x轴上重叠的条件</span></span><br><span class="line">        <span class="keyword">boolean</span> x_overlap = !(rec1[<span class="number">2</span>] &lt;= rec2[<span class="number">0</span>] || rec2[<span class="number">2</span>] &lt;= rec1[<span class="number">0</span>]);</span><br><span class="line">         <span class="comment">// y轴上重叠的条件</span></span><br><span class="line">        <span class="keyword">boolean</span> y_overlap = !(rec1[<span class="number">3</span>] &lt;= rec2[<span class="number">1</span>] || rec2[<span class="number">3</span>] &lt;= rec1[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> x_overlap &amp;&amp; y_overlap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p><strong>Solution :</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isRectangleOverlap</span><span class="params">(self, rec1: List[int], rec2: List[int])</span> -&gt; bool:</span></span><br><span class="line">        x_overlap = <span class="keyword">not</span> (rec1[<span class="number">2</span>] &lt;= rec2[<span class="number">0</span>] <span class="keyword">or</span> rec2[<span class="number">2</span>] &lt;= rec1[<span class="number">0</span>])</span><br><span class="line">        y_overlap = <span class="keyword">not</span> (rec1[<span class="number">3</span>] &lt;= rec2[<span class="number">1</span>] <span class="keyword">or</span> rec2[<span class="number">3</span>] &lt;= rec1[<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">return</span> x_overlap <span class="keyword">and</span> y_overlap</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>Leetcode</tag>
        <tag>数学算法题</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode-1160</title>
    <url>/2020/03/17/Leetcode/Leetcode-1160/</url>
    <content><![CDATA[<h1 id="Leecode-1160-Find-Words-That-Can-Be-Formed-by-Characters"><a href="#Leecode-1160-Find-Words-That-Can-Be-Formed-by-Characters" class="headerlink" title="Leecode-1160 Find Words That Can Be Formed by Characters"></a>Leecode-1160 <a href="https://leetcode-cn.com/problems/find-words-that-can-be-formed-by-characters/" target="_blank" rel="noopener">Find Words That Can Be Formed by Characters</a></h1><h2 id="思路：哈希表"><a href="#思路：哈希表" class="headerlink" title="思路：哈希表"></a>思路：哈希表</h2><p><strong>题目描述：</strong></p>
<ul>
<li>给定一个字符串，看这个字符串中的字母能否组成数组中的字符串</li>
<li>如果能，返回能组成字符串的长度</li>
</ul>
<p>示例1：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: words &#x3D; [&quot;cat&quot;,&quot;bt&quot;,&quot;hat&quot;,&quot;tree&quot;], chars &#x3D; &quot;atach&quot;</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: </span><br><span class="line">The strings that can be formed are &quot;cat&quot; and &quot;hat&quot; so the answer is 3 + 3 &#x3D; 6.</span><br></pre></td></tr></table></figure>

<p>示例2：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: words &#x3D; [&quot;hello&quot;,&quot;world&quot;,&quot;leetcode&quot;], chars &#x3D; &quot;welldonehoneyr&quot;</span><br><span class="line">Output: 10</span><br><span class="line">Explanation: </span><br><span class="line">The strings that can be formed are &quot;hello&quot; and &quot;world&quot; so the answer is 5 + 5 &#x3D; 10.</span><br></pre></td></tr></table></figure>



<p><strong>Solution：</strong></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200318091832.gif" alt=""></p>
<ul>
<li>直接统计字母表chars中每个字母出现的次数</li>
<li>同时统计words中每个单词中字母出现的次数</li>
<li>如果该单词中的每个字母出现的次数都小于等于词汇表中对应字母出现的次数，就将该单词长度加入到答案中。</li>
</ul>
<a id="more"></a>



<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p><strong>Solution :</strong></p>
<p>Java 的 HashMap。但是我们注意到题目有一个额外的条件：所有字符串中都仅包含小写英文字母。这意味着我们可以用一个长度为 26 的数组来进行计数。这也是很多字符串计数问题的常用技巧。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countCharacters</span><span class="params">(String[] words, String chars)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">int</span>[] chars_count = count(chars);  <span class="comment">//统计字母表中出现的次数</span></span><br><span class="line">          <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">for</span>(String word:words)&#123;</span><br><span class="line">              <span class="keyword">int</span>[] word_count = count(word); <span class="comment">//统计单词中字母出现次数</span></span><br><span class="line">              <span class="keyword">if</span>(contains(chars_count,word_count))&#123;</span><br><span class="line">                  res += word.length();</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//检查字母表的字母出现次数是否覆盖单词的字母出现次数</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(<span class="keyword">int</span>[] chars_count,<span class="keyword">int</span>[] word_count)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)&#123;  <span class="comment">//26个字母一一对比</span></span><br><span class="line">            <span class="keyword">if</span>(chars_count[i] &lt; word_count[i])&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//统计26个字母出现的次数</span></span><br><span class="line">    <span class="keyword">int</span>[] count(String word)&#123;</span><br><span class="line">        <span class="keyword">int</span>[] counter = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; word.length();i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> c = word.charAt(i);</span><br><span class="line">            counter[c-<span class="string">'a'</span>]++;  <span class="comment">//counter[c-'a']+=1;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> counter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p><strong>Solution :</strong></p>
<p>Python 中有个 <code>Counter</code> 类就是专门用来计数的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countCharacters</span><span class="params">(self, words: List[str], chars: str)</span> -&gt; int:</span></span><br><span class="line">        chars_count = collections.Counter(chars)  <span class="comment">#统计chars中字母出现次数</span></span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> words:  <span class="comment">#遍历每个单词</span></span><br><span class="line">            word_count = collections.Counter(word)  <span class="comment">#统计单词中字母出现次数</span></span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> word_count:      <span class="comment">#遍历每个单词的字母</span></span><br><span class="line">                <span class="keyword">if</span> chars_count[c] &lt; word_count[c]:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ans += len(word)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>Leetcode</tag>
        <tag>哈希表</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode-面试题01.06</title>
    <url>/2020/03/16/Leetcode/Leetcode-%E9%9D%A2%E8%AF%95%E9%A2%9801.06/</url>
    <content><![CDATA[<h1 id="Leecode-面试题01-06-Compress-String-LCCI"><a href="#Leecode-面试题01-06-Compress-String-LCCI" class="headerlink" title="Leecode-面试题01.06 Compress String LCCI"></a>Leecode-面试题01.06 <a href="https://leetcode-cn.com/problems/compress-string-lcci/" target="_blank" rel="noopener">Compress String LCCI</a></h1><h2 id="思路：双指针"><a href="#思路：双指针" class="headerlink" title="思路：双指针"></a>思路：双指针</h2><p><strong>题目描述：压缩字符串</strong></p>
<ul>
<li>重复的字母用数字代替，只显示出现第一次的字母</li>
<li>如果压缩后的字符串比之前的长就返回原来的字符串</li>
</ul>
<p>示例1：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;aabcccccaaa&quot;</span><br><span class="line">Output: &quot;a2b1c5a3&quot;</span><br></pre></td></tr></table></figure>



<p>示例2：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;abbccd&quot;</span><br><span class="line">Output: &quot;abbccd&quot;</span><br><span class="line">Explanation: </span><br><span class="line">The compressed string is &quot;a1b2c2d1&quot;, which is longer than the original string.</span><br></pre></td></tr></table></figure>



<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200316214454.gif" alt=""></p>
<a id="more"></a>

<p><strong>Solution：双指针</strong></p>
<ul>
<li>快慢指针，一个从头开始遍历，另一个从当前位置往后判断字符是否相等</li>
<li>如果判断到相等，就一直往后判断，直至不相等出现，返回出现的次数（即j - i）</li>
<li>同时要更新慢指针到新的位置</li>
</ul>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p><strong>Solution :</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">compressString</span><span class="params">(String S)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = S.length();</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">while</span>(i &lt; n)&#123;</span><br><span class="line">            <span class="keyword">int</span> j = i;  <span class="comment">//两个指针都从头开始遍历</span></span><br><span class="line">            <span class="keyword">while</span> (j &lt; n &amp;&amp; S.charAt(j) == S.charAt(i))&#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            sb.append(S.charAt(i)); <span class="comment">//输出这个字母</span></span><br><span class="line">            sb.append(j-i);        <span class="comment">//输出此字母出现的次数</span></span><br><span class="line">            i = j;                <span class="comment">//更新慢指针位置</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String res = sb.toString();  <span class="comment">//将sb转换成字符串</span></span><br><span class="line">        <span class="keyword">if</span>(res.length() &lt; S.length())&#123;  <span class="comment">// 判断新的字符串和原来的字符串相比</span></span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> S;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p><strong>Solution :</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">conpressString</span><span class="params">(self,S:str)</span>-&gt;str:</span></span><br><span class="line">        n   = len(S)  <span class="comment">#字符串的长度</span></span><br><span class="line">        res =  <span class="string">""</span>     <span class="comment">#res是返回结果</span></span><br><span class="line">        i   =  <span class="number">0</span>      <span class="comment"># 初始的指针</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; n:</span><br><span class="line">            j = i     <span class="comment"># j从i开始遍历</span></span><br><span class="line">            <span class="keyword">while</span> j &lt; n <span class="keyword">and</span> S[j] == S[i]:</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            res += S[i] + str(j-i) <span class="comment"># 字符串拼接</span></span><br><span class="line">            <span class="keyword">if</span> len(res) &lt; len(S):  <span class="comment"># 判断新的字符串和原来的字符串相比</span></span><br><span class="line">                <span class="keyword">return</span> res</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> S</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>Leetcode</tag>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-基础语法</title>
    <url>/2020/03/15/Webfront/JavaScript/JavaScript-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="JavaScript-基础语法"><a href="#JavaScript-基础语法" class="headerlink" title="JavaScript-基础语法"></a>JavaScript-基础语法</h1><h2 id="1-注释"><a href="#1-注释" class="headerlink" title="1. 注释"></a>1. 注释</h2><p>​    JavaScript的语法和Java语言类似，每个语句以<code>;</code>结束，语句块用<code>{...}</code>。但是，JavaScript并不强制要求在每个语句的结尾加;</p>
<p>​    浏览器中负责执行JavaScript代码的引擎会自动在每个语句的结尾补上; 。JavaScript严格区分大小写，如果弄错了大小写，程序将报错或者运行不正常</p>
<p>  <strong>注释</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 从这里开始是块注释</span></span><br><span class="line"><span class="comment">仍然是注释</span></span><br><span class="line"><span class="comment">仍然是注释</span></span><br><span class="line"><span class="comment">注释结束 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是一行注释</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="2-变量"><a href="#2-变量" class="headerlink" title="2. 变量"></a>2. 变量</h2><p>​    变量的概念基本上和小学的方程变量是一致的，只是在计算机程序中，变量不仅可以是数字，还可以是任意数据类型。</p>
<p>​    变量在JavaScript中就是用一个变量名表示，<strong>变量名是大小写英文，数字，$和_下划线的组合，且不能用数字开头，变量名也不能是JavaScript的关键字，如if,while等。</strong></p>
<p>​    申明一个变量用var语句，比如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a; <span class="comment">// 申明了变量a，此时a的值为undefined</span></span><br><span class="line"><span class="keyword">var</span> $b = <span class="number">1</span>; <span class="comment">// 申明了变量$b，同时给$b赋值，此时$b的值为1</span></span><br><span class="line"><span class="keyword">var</span> s_007 = <span class="string">'007'</span>; <span class="comment">// s_007是一个字符串</span></span><br><span class="line"><span class="keyword">var</span> Answer = <span class="literal">true</span>; <span class="comment">// Answer是一个布尔值true</span></span><br><span class="line"><span class="keyword">var</span> t = <span class="literal">null</span>; <span class="comment">// t的值是null</span></span><br></pre></td></tr></table></figure>

<p>​    在JavaScript中，使用等号=对变量进行赋值。</p>
<p>​    可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量，但是要注意只能用var申明一次，例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>; <span class="comment">// a的值是整数123</span></span><br><span class="line">a = <span class="string">'ABC'</span>; <span class="comment">// a变为字符串,第二次赋值就不需要var</span></span><br></pre></td></tr></table></figure>

<p>​    这种变量本身类型不固定的语言称之为动态语言，与之相对应的是静态语言。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。例如Java是静态语言，赋值语句如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">123</span>; <span class="comment">// a是整数类型变量，类型用int申明</span></span><br><span class="line">a = <span class="string">"ABC"</span>; <span class="comment">// 错误：不能把字符串赋给整型变量</span></span><br></pre></td></tr></table></figure>

<p><strong>和静态语言相比，动态语言更灵活，就是这个原因。</strong></p>
<h3 id="2-1-Strict模式"><a href="#2-1-Strict模式" class="headerlink" title="2.1 Strict模式"></a>2.1 Strict模式</h3><p>​    JavaScript在设计之初，为了方便初学者学习，并不强制要求用var申明变量。这个设计错误带来了严重的后果：如果一个变量没有通过var申明就被使用，<strong>那么该变量就自动被申明为全局变量：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">i = <span class="number">10</span>; <span class="comment">// i现在是全局变量</span></span><br></pre></td></tr></table></figure>

<p>​    为了修补JavaScript这一严重设计缺陷，ECMA在后续规范中推出了strict模式，在strict模式下运行的JavaScript代码，强制通过var申明变量，未使用var申明变量就使用的，将导致运行错误。</p>
<ul>
<li>启用strict模式的方法是在JavaScript代码的第一行写上：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>如果浏览器支持strict模式，下面的代码将报ReferenceError错误:</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line">    abc = <span class="string">'Hello, world'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(abc);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-数据类型"><a href="#3-数据类型" class="headerlink" title="3. 数据类型"></a>3. 数据类型</h2><h3 id="3-1-数值类型"><a href="#3-1-数值类型" class="headerlink" title="3.1 数值类型"></a>3.1 数值类型</h3><ul>
<li>Number , JavaScript不区分整数和浮点数，统一用Number表示，以下都是合法的Number类型;</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">123</span>; <span class="comment">// 整数123</span></span><br><span class="line"><span class="number">0.456</span>; <span class="comment">// 浮点数0.456</span></span><br><span class="line"><span class="number">1.2345e3</span>; <span class="comment">// 科学计数法表示1.2345x1000，等同于1234.5</span></span><br><span class="line"><span class="number">-99</span>; <span class="comment">// 负数</span></span><br><span class="line"><span class="literal">NaN</span>; <span class="comment">// NaN表示Not a Number，当无法计算结果时用NaN表示</span></span><br><span class="line"><span class="literal">Infinity</span>; <span class="comment">// Infinity表示无限大，当数值超过了JavaScript的Number所能表示的最大值时，就表示为Infinity</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Number可以直接做四则运算，规则和数学一致：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> + <span class="number">2</span>; <span class="comment">// 3</span></span><br><span class="line">(<span class="number">1</span> + <span class="number">2</span>) * <span class="number">5</span> / <span class="number">2</span>; <span class="comment">// 7.5</span></span><br><span class="line"><span class="number">2</span> / <span class="number">0</span>; <span class="comment">// Infinity</span></span><br><span class="line"><span class="number">0</span> / <span class="number">0</span>; <span class="comment">// NaN</span></span><br><span class="line"><span class="number">10</span> % <span class="number">3</span>; <span class="comment">// 1</span></span><br><span class="line"><span class="number">10.5</span> % <span class="number">3</span>; <span class="comment">// 1.5</span></span><br></pre></td></tr></table></figure>



<h3 id="3-2-字符串"><a href="#3-2-字符串" class="headerlink" title="3.2 字符串"></a>3.2 字符串</h3><ul>
<li><strong>字符串</strong>是以单引号’或双引号”括起来的任意文本，比如<code>&#39;abc&#39;</code>，<code>&quot;xyz&quot;</code>等等。字符串常见的操作如下：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">'Hello, world!'</span>;</span><br><span class="line">s.length; <span class="comment">// 13</span></span><br></pre></td></tr></table></figure>

<ul>
<li>要获取字符串某个指定位置的字符，使用类似Array的下标操作，索引号从0开始：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">'Hello, world!'</span>;</span><br><span class="line"></span><br><span class="line">s[<span class="number">0</span>]; <span class="comment">// 'H'</span></span><br><span class="line">s[<span class="number">6</span>]; <span class="comment">// ' '</span></span><br><span class="line">s[<span class="number">7</span>]; <span class="comment">// 'w'</span></span><br><span class="line">s[<span class="number">12</span>]; <span class="comment">// '!'</span></span><br><span class="line">s[<span class="number">13</span>]; <span class="comment">// undefined 超出范围的索引不会报错，但一律返回undefined</span></span><br></pre></td></tr></table></figure>

<ul>
<li>JavaScript为字符串提供了一些常用方法，注意，调用这些方法本身不会改变原有字符串的内容，而是返回一个新字符串：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">toUpperCase()把一个字符串全部变为大写</span><br><span class="line">toLowerCase()把一个字符串全部变为小写</span><br><span class="line">indexOf()会搜索指定字符串出现的位置</span><br><span class="line">substring()返回指定索引区间的子串</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">'Hello'</span>;</span><br><span class="line">s.toUpperCase(); <span class="comment">// 返回'HELLO'</span></span><br><span class="line"><span class="keyword">var</span> lower = s.toLowerCase(); <span class="comment">// 返回'hello'并赋值给变量lower</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">'hello, world'</span>;</span><br><span class="line">b.indexOf(<span class="string">'world'</span>); <span class="comment">// 返回7</span></span><br><span class="line">b.indexOf(<span class="string">'World'</span>); <span class="comment">// 没有找到指定的子串，返回-1</span></span><br><span class="line">b.substring(<span class="number">0</span>, <span class="number">5</span>); <span class="comment">// 从索引0开始到5（不包括5），返回'hello'</span></span><br><span class="line">b.substring(<span class="number">7</span>); <span class="comment">// 从索引7开始到结束，返回'world'</span></span><br></pre></td></tr></table></figure>

<h3 id="3-3-布尔值"><a href="#3-3-布尔值" class="headerlink" title="3.3 布尔值"></a>3.3 布尔值</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="literal">true</span>; <span class="comment">// 这是一个true值</span></span><br><span class="line"><span class="literal">false</span>; <span class="comment">// 这是一个false值</span></span><br><span class="line"><span class="number">2</span> &gt; <span class="number">1</span>; <span class="comment">// 这是一个true值</span></span><br><span class="line"><span class="number">2</span> &gt;= <span class="number">3</span>; <span class="comment">// 这是一个false值</span></span><br></pre></td></tr></table></figure>

<h3 id="3-4-比较运算符"><a href="#3-4-比较运算符" class="headerlink" title="3.4 比较运算符"></a>3.4 比较运算符</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&amp;&amp;运算是与运算，只有所有都为<span class="literal">true</span>，&amp;&amp;运算结果才是<span class="literal">true</span>：</span><br><span class="line">||运算是或运算，只要其中有一个为<span class="literal">true</span>，||运算结果就是<span class="literal">true</span>：</span><br><span class="line">!运算是非运算，它是一个单目运算符，把<span class="literal">true</span>变成<span class="literal">false</span>，<span class="literal">false</span>变成<span class="literal">true</span>：</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//比较运算符,当我们对Number做比较时，可以通过比较运算符得到一个布尔值：</span></span><br><span class="line"><span class="number">2</span> &gt; <span class="number">5</span>; <span class="comment">// false</span></span><br><span class="line"><span class="number">5</span> &gt;= <span class="number">2</span>; <span class="comment">// true</span></span><br><span class="line"><span class="number">7</span> == <span class="number">7</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p><strong>实际上，JavaScript允许对任意数据类型做比较：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">false &#x3D;&#x3D; 0; &#x2F;&#x2F; true</span><br><span class="line">false &#x3D;&#x3D;&#x3D; 0; &#x2F;&#x2F; false</span><br></pre></td></tr></table></figure>

<ul>
<li>第一种比较==，他会自动转换数据类型再比较，很多时候，会得到很多诡异的结果</li>
<li>第二种是===比较，它不会自动转换数据的类型，如果数据类型不一致，返回false,如果一直，再比较。</li>
<li><strong>由于JavaScript这个设计缺陷，不要使用==比较，始终坚持使用===比较。（绝对等于）</strong></li>
</ul>
<p><strong>另一个例外是NaN这个特殊的Number与所有其他值都不相等，包括它自己：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="literal">NaN</span> === <span class="literal">NaN</span> ; <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<p><strong>唯一能判断NaN的方法是通过isNan()函数</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">isNaN</span>(<span class="literal">NaN</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p><strong>null和undefined</strong></p>
<ul>
<li>null表示一个“空”的值，它和0以及空字符串’’不同</li>
<li>0是一个数值，’’表示长度为0的字符串，而null表示“空”。</li>
<li>在其他语言中，也有类似JavaScript的null的表示，例如Java也用null，Swift用nil，Python用None表示。</li>
<li>但是，在JavaScript中，还有一个和null类似的<code>undefined</code>，它表示“未定义”。JavaScript的设计者希望用null表示一个空的值，而undefined表示值未定义。事实证明，这并没有什么卵用，区分两者的意义不大。大多数情况下，我们都应该用null。</li>
</ul>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode-695</title>
    <url>/2020/03/15/Leetcode/Leetcode-695/</url>
    <content><![CDATA[<h1 id="Leecode-695-Max-Area-of-Island"><a href="#Leecode-695-Max-Area-of-Island" class="headerlink" title="Leecode-695 Max Area of Island"></a>Leecode-695 <a href="https://leetcode-cn.com/problems/max-area-of-island/" target="_blank" rel="noopener">Max Area of Island</a></h1><h2 id="思路：DFS"><a href="#思路：DFS" class="headerlink" title="思路：DFS"></a>思路：DFS</h2><p><strong>题目描述</strong></p>
<ul>
<li>有一个2D的数组，0代表海洋，1代表陆地</li>
<li>如果陆地有上下左右连在一起的，那么面积加1</li>
</ul>
<p>示例1：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[[0,0,1,0,0,0,0,1,0,0,0,0,0],</span><br><span class="line"> [0,0,0,0,0,0,0,1,1,1,0,0,0],</span><br><span class="line"> [0,1,1,0,1,0,0,0,0,0,0,0,0],</span><br><span class="line"> [0,1,0,0,1,1,0,0,1,0,1,0,0],</span><br><span class="line"> [0,1,0,0,1,1,0,0,1,1,1,0,0],</span><br><span class="line"> [0,0,0,0,0,0,0,0,0,0,1,0,0],</span><br><span class="line"> [0,0,0,0,0,0,0,1,1,1,0,0,0],</span><br><span class="line"> [0,0,0,0,0,0,0,1,1,0,0,0,0]]</span><br></pre></td></tr></table></figure>

<p>输出结果为6</p>
<p>示例2：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[[0,0,0,0,0,0,0,0]]</span><br></pre></td></tr></table></figure>

<p>输出结果为0</p>
<p><strong>Solution：DFS</strong></p>
<ul>
<li>每次调用的时候默认num=1，进入后判断如果不是岛屿，则直接返回0，就可以避免错误的情况。</li>
<li>每次找到岛屿，就直接把岛屿改成0，这就是传说中的沉岛思想，就是遇到岛屿就把他和周围的全部沉默。</li>
</ul>
<a id="more"></a>



<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p><strong>Solution :</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxAreaOfIsland</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>; </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; grid.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; grid[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                    res = Math.max(res, dfs(i, j, grid));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span>[][] grid)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 每次调用的时候默认num为1，进入后判断如果不是岛屿，则直接返回0，就可以避免预防错误的情况。</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || j &lt; <span class="number">0</span> || i &gt;= grid.length || j &gt;= grid[<span class="number">0</span>].length || grid[i][j] == <span class="number">0</span>) &#123; </span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; </span><br><span class="line"><span class="comment">// 每次找到岛屿，则直接把找到的岛屿改成0，这是传说中的沉岛思想，就是遇到岛屿就把他和周围的全部沉默。</span></span><br><span class="line">        grid[i][j] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">        num += dfs(i + <span class="number">1</span>, j, grid);</span><br><span class="line">        num += dfs(i - <span class="number">1</span>, j, grid);</span><br><span class="line">        num += dfs(i, j + <span class="number">1</span>, grid);</span><br><span class="line">        num += dfs(i, j - <span class="number">1</span>, grid);</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p><strong>Solution :</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(self,i,j,grid)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> i &lt; <span class="number">0</span> <span class="keyword">or</span> j &lt; <span class="number">0</span> <span class="keyword">or</span> i &gt;= len(grid) <span class="keyword">or</span> j &gt;= len(grid[<span class="number">0</span>]) <span class="keyword">or</span> grid[i][j] == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            grid[i][j] = <span class="number">0</span></span><br><span class="line">            num = <span class="number">1</span> <span class="comment">#初始岛屿的面积</span></span><br><span class="line">            num += self.dfs(i + <span class="number">1</span>, j, grid);</span><br><span class="line">            num += self.dfs(i - <span class="number">1</span>, j, grid);</span><br><span class="line">            num += self.dfs(i, j + <span class="number">1</span>, grid);</span><br><span class="line">            num += self.dfs(i, j - <span class="number">1</span>, grid);</span><br><span class="line">            <span class="keyword">return</span> num</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">maxAreaOfIsland</span><span class="params">(self, grid: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">            res = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(grid)):</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(len(grid[<span class="number">0</span>])):</span><br><span class="line">                    <span class="keyword">if</span> grid[i][j] == <span class="number">1</span>:</span><br><span class="line">                        res = max(res,self.dfs(i,j,grid))</span><br><span class="line">            <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>Leetcode</tag>
        <tag>深度优先搜索</tag>
      </tags>
  </entry>
  <entry>
    <title>抽象工厂模式</title>
    <url>/2020/03/15/DesignModel/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200315114135.png" alt=""></p>
<a id="more"></a>

<p><strong>适用场景：</strong></p>
<ul>
<li>客户端（应用层）不依赖于产品类实例如何被创建、实现等细节</li>
<li>强调一系列相关的产品对象（属于同一产品族）一起使用创建对象需要大量的重复代码</li>
<li>提供一个产品类的库，所有的产品以同样的接口出现，从而使得客户端不依赖于具体的实现</li>
</ul>
<p><strong>优点：</strong></p>
<ul>
<li>具体产品在应用层的代码隔离，无需关心创建的细节</li>
<li>将一个系列的产品统一到一起创建</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>规定了所有可能被创建的产品集合，产品簇中扩展新的产品困难；</li>
<li>增加了系统的抽象性和理解难度</li>
</ul>
<h2 id="2-UML类图"><a href="#2-UML类图" class="headerlink" title="2. UML类图"></a>2. UML类图</h2><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200315114323.png" alt="">****</p>
<ul>
<li>Creator:产品族工厂，定义了一系列的产品生产行为</li>
<li>ConcreteCreator:具体的产品族工厂</li>
<li>Product:抽象产品接口</li>
<li>Product A1/A2/B1/B2:都是具体的产品，实现了相应的产品接口</li>
</ul>
<h2 id="3-产品族和产品等级"><a href="#3-产品族和产品等级" class="headerlink" title="3. 产品族和产品等级"></a>3. 产品族和产品等级</h2><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200316193438.png" alt=""></p>
<p>​    为了更好理解抽象工厂模式，需要先搞清楚产品等级和产品族的概念，</p>
<p>​    举个粟子：手机有小米手机、华为手机，它们都是手机，这些具体的手机和抽象手机就构成了一个产品等级结构。</p>
<p>​    同样的，路由器有小米路由器，华为路由器，这些具体的路由器和抽象路由器就构成了另外一个产品等级结构，实质上产品等级结构即产品的继承结构。</p>
<p>​    小米手机位于手机产品等级结构中，小米路由器位于路由器的产品等级结构中，而小米手机和小米路由器都是小米公司生产的，就构成了一个产品族，</p>
<p>​    同理，华为手机和华为路由器也构成了一个产品族 。划重点就是产品族中的产品都是由同一个工厂生产的，位于不同的产品等级结构。</p>
<p><strong>对比工厂方法，其针对的是产品等级结构，而抽象工厂是针对产品族。在二者的使用选择上，需要结合实际业务，对于产品等级数量相对固定的产品族，可以优先考虑抽象工厂模式，但是如果频繁变动，则不大适用，因为在现有的产品族中新增产品等级时，就需要修改产品族工厂，也就违背了开闭原则</strong></p>
<h2 id="4-代码实现"><a href="#4-代码实现" class="headerlink" title="4. 代码实现"></a>4. 代码实现</h2><ul>
<li>定义抽象产品接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//手机产品接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IPhoneProduct</span> </span>&#123;</span><br><span class="line">    <span class="comment">//开机</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//关机</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//拨打电话</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">callUp</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//发送短信</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sendSMS</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//路由器产品接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IRouterProduct</span> </span>&#123;</span><br><span class="line">    <span class="comment">//开机</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//关机</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//开启wifi</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">openWifi</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//设置参数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setting</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>定义小米平拍手机和路由器产品实现类，华为品牌手机和路由器产品实现类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//小米手机产品</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XiaomiPhone</span> <span class="keyword">implements</span> <span class="title">IPhoneProduct</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"开启小米手机"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"关闭小米手机"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"用小米手机打电话"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendSMS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"用小米手机发短信"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//小米路由器产品</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XiaomiRouter</span> <span class="keyword">implements</span> <span class="title">IRouterProduct</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"启动小米路由器"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"关闭小米路由器"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openWifi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"打开小米路由器的wifi功能"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setting</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"设置小米路由器参数"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//华为手机产品</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HuaweiPhone</span> <span class="keyword">implements</span> <span class="title">IPhoneProduct</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"开启华为手机"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"关闭华为手机"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"用华为手机打电话"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendSMS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"用华为手机发短信"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//华为路由器产品</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HuaweiRouter</span> <span class="keyword">implements</span> <span class="title">IRouterProduct</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"启动华为路由器"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"关闭华为路由器"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openWifi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"打开华为路由器的wifi功能"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setting</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"设置华为路由器参数"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>关键：定义一个抽象工厂接口，也可以称为抽象工厂产品族，不止生产一种产品</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象产品工厂（定义了同一个产品族的产品生产行为）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IProductFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">//生产手机</span></span><br><span class="line">    <span class="function">IPhoneProduct <span class="title">produceTelPhone</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//生产路由器</span></span><br><span class="line">    <span class="function">IRouterProduct <span class="title">produceRouter</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>小米工厂和华为工厂实现类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//小米产品工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XiaomiProductFactory</span> <span class="keyword">implements</span> <span class="title">IProductFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IPhoneProduct <span class="title">produceTelPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;生产小米手机"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> XiaomiPhone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IRouterProduct <span class="title">produceRouter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;生产小米路由器"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> XiaomiRouter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//华为产品工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HuaweiProductFactory</span> <span class="keyword">implements</span> <span class="title">IProductFactory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IPhoneProduct <span class="title">produceTelPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;生产华为手机"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HuaweiPhone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IRouterProduct <span class="title">produceRouter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;生产华为路由器"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HuaweiRouter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>客户端</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"===================小米系列产品================="</span>);</span><br><span class="line">        <span class="comment">//小米产品工厂实例</span></span><br><span class="line">        IProductFactory xiaomiProductFactory = <span class="keyword">new</span> XiaomiProductFactory();</span><br><span class="line">        <span class="comment">//生产小米路由器</span></span><br><span class="line">        IRouterProduct xiaomiRouter = xiaomiProductFactory.produceRouter();</span><br><span class="line">        xiaomiRouter.start();</span><br><span class="line">        xiaomiRouter.setting();</span><br><span class="line">        xiaomiRouter.openWifi();</span><br><span class="line">        xiaomiRouter.shutdown();</span><br><span class="line">        <span class="comment">//生产小米手机</span></span><br><span class="line">        IPhoneProduct xiaomiPhone = xiaomiProductFactory.produceTelPhone();</span><br><span class="line">        xiaomiPhone.start();</span><br><span class="line">        xiaomiPhone.callUp();</span><br><span class="line">        xiaomiPhone.sendSMS();</span><br><span class="line">        xiaomiPhone.shutdown();</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"===================华为系列产品================="</span>);</span><br><span class="line">        <span class="comment">//华为产品工厂实例</span></span><br><span class="line">        IProductFactory huaweiProductFactory = <span class="keyword">new</span> HuaweiProductFactory();</span><br><span class="line">        <span class="comment">//生产华为路由器</span></span><br><span class="line">        IRouterProduct huaweiRouter = huaweiProductFactory.produceRouter();</span><br><span class="line">        huaweiRouter.start();</span><br><span class="line">        huaweiRouter.setting();</span><br><span class="line">        huaweiRouter.openWifi();</span><br><span class="line">        huaweiRouter.shutdown();</span><br><span class="line">        <span class="comment">//生产华为手机</span></span><br><span class="line">        IPhoneProduct huaweiPhone = huaweiProductFactory.produceTelPhone();</span><br><span class="line">        huaweiPhone.start();</span><br><span class="line">        huaweiPhone.callUp();</span><br><span class="line">        huaweiPhone.sendSMS();</span><br><span class="line">        huaweiPhone.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>运行结果：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;小米系列产品&#x3D;</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;生产小米路由器</span><br><span class="line">启动小米路由器</span><br><span class="line">设置小米路由器参数</span><br><span class="line">打开小米路由器的wifi功能</span><br><span class="line">关闭小米路由器</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;生产小米手机</span><br><span class="line">开启小米手机</span><br><span class="line">用小米手机打电话</span><br><span class="line">用小米手机发短信</span><br><span class="line">关闭小米手机</span><br><span class="line">&#x3D;&#x3D;&#x3D;华为系列产品&#x3D;</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;生产华为路由器</span><br><span class="line">启动华为路由器</span><br><span class="line">设置华为路由器参数</span><br><span class="line">打开华为路由器的wifi功能</span><br><span class="line">关闭华为路由器</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;生产华为手机</span><br><span class="line">开启华为手机</span><br><span class="line">用华为手机打电话</span><br><span class="line">用华为手机发短信</span><br><span class="line">关闭华为手机</span><br></pre></td></tr></table></figure>

<p>关系图：</p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200316202933.png" alt=""></p>
<h2 id="5-小结"><a href="#5-小结" class="headerlink" title="5. 小结"></a>5. 小结</h2><p>​    从上面的整个示例可以发现，如果现在想增加一个产品等级，如新加一种笔记本产品，就需要修改抽象产品工厂接口<code>IProductFactory</code>，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象产品工厂（定义了同一个产品族的产品生产行为）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IProductFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生产手机</span></span><br><span class="line">    <span class="function">IPhoneProduct <span class="title">produceTelPhone</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//生产路由器</span></span><br><span class="line">    <span class="function">IRouterProduct <span class="title">produceRouter</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//生产笔记本(新增)</span></span><br><span class="line">    <span class="function">IComputerProduct <span class="title">produceComputer</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>这种直接修改抽象接口的做法，会导致其所有实现子类都需要进行修改，违反了开闭原则。</p>
</li>
<li><p>当然，如果这种修改是长期稳定的，那么也可以接受。</p>
</li>
<li><p>如果该场景以工厂方法实现，那么我们需要定义一个手机工厂、一个路由器工厂、然后小米手机工厂实现类，华为手机工厂实现类，小米路由器工厂实现类，华为路由器工厂实现类，其余的产品接口和产品实现类均与上相同，这样就多出了一些产品工厂，略显啰嗦</p>
</li>
<li><p>实际使用中，都需要根据业务去权衡使用工厂方法还是抽象工厂，前者关注点在产品等级上，后者关注点在产品族上，对于稳定的产品族，也即是产品等级数量稳定，使用抽象工厂会更加有效率，毕竟不再是一个工厂生产一种产品，而是一个工厂生产多种同族产品，对于不稳定的产品族，单独使用工厂方法会显得更加灵活！</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>设计者模式</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-初认识</title>
    <url>/2020/03/14/Webfront/JavaScript/JavaScript-%E5%88%9D%E8%AE%A4%E8%AF%86/</url>
    <content><![CDATA[<h1 id="JavaScript-初认识"><a href="#JavaScript-初认识" class="headerlink" title="JavaScript-初认识"></a>JavaScript-初认识</h1><h2 id="1-简单历史介绍"><a href="#1-简单历史介绍" class="headerlink" title="1. 简单历史介绍"></a>1. 简单历史介绍</h2><p>​    在上个世纪的1995年，当时的网景公司 <code>[曾经让微软感受到威胁的公司]</code> 正凭借其Navigator浏览器成为Web时代开启时最著名的第一代互联网公司。</p>
<p>​    由于网景公司希望能在静态HTML页面上添加一些动态效果，于是叫Brendan Eich这哥们在两周之内设计出了JavaScript语言。你没看错，这哥们只用了10天时间。</p>
<a id="more"></a>

<p>​    为什么起名叫JavaScript？原因是当时Java语言非常红火，所以网景公司希望借Java的名气来推广，但事实上JavaScript除了语法上有点像Java，其他部分基本上没啥关系。</p>
<p>​    因为网景开发了JavaScript，一年后微软又模仿JavaScript开发了JScript，为了让JavaScript成为全球标准，几个公司联合ECMA<code>（European Computer Manufacturers Association:欧洲计算机制造商协会）</code>组织定制了JavaScript语言的标准，被称为<code>ECMAScript</code>标准。</p>
<p>​    <strong>所以简单说来就是，ECMAScript是一种语言标准，而JavaScript是网景公司对ECMAScript标准的一种实现。</strong></p>
<p>​    <strong>由于JavaScript的标准——ECMAScript在不断发展，最新版ECMAScript 6标准（简称ES6）;</strong></p>
<p>​    由于浏览器在发布时就确定了JavaScript的版本，加上很多用户还在使用IE6这种古老的浏览器，这就导致你在写JavaScript的时候，要照顾一下老用户，不能一上来就用最新的ES6标准写，否则，老用户的浏览器是无法运行新版本的JavaScript代码的。</p>
<h2 id="2-Hello-World-快速入门"><a href="#2-Hello-World-快速入门" class="headerlink" title="2. Hello World 快速入门"></a>2. Hello World 快速入门</h2><ul>
<li>要让浏览器运行JavaScript，必须先有一个HTML页面，在HTML页面中引入JavaScript，然后，让浏览器加载该HTML页面，就可以执行JavaScript代码。</li>
</ul>
<ol>
<li>JavaScript代码可以直接嵌在网页的任何地方，由<code>...</code>包含的代码就是JavaScript代码，它将直接被浏览器执行。</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  alert(<span class="string">'Hello, world'</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>第二种方法是把JavaScript代码放到一个单独的.js文件，然后在HTML中通过src引入这个文件：</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/a.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    把JavaScript代码放入一个单独的<code>.js</code>文件中更利于维护代码，并且多个页面可以各自引用同一份<code>.js</code>文件.</p>
<p>​    <strong>注意:script这个标签必须成对出现,</strong></p>
<p>​    有些时候你会看到<script>标签还设置了一个type属性：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    但这是没有必要的，因为script标签 默认的type就是JavaScript，所以不必显式地把type指定为JavaScript。</p>
<p>​    <strong>注释说明 : javascript的注释和java的注释是一样的; <code>单行注释</code> 和 <code>多行注释</code></strong></p>
<h2 id="3-IDE推荐"><a href="#3-IDE推荐" class="headerlink" title="3. IDE推荐"></a>3. IDE推荐</h2><p><strong>IDE推荐:</strong></p>
<ul>
<li>Visual Studio Code</li>
<li>Sublime Text</li>
<li>WebStorm</li>
</ul>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>工厂模式</title>
    <url>/2020/03/13/DesignModel/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><ol>
<li>作用</li>
</ol>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200313112626.png" alt=""></p>
<ol start="2">
<li><strong>核心本质</strong></li>
</ol>
<ul>
<li><strong>实例化对象不使用new，用工厂方法代替。</strong></li>
<li>将选择实现类，创建对象统一管理和控制，从而将<strong>调用者跟我们的实现类解耦。</strong></li>
</ul>
<a id="more"></a>



<h2 id="2-三种工厂模式"><a href="#2-三种工厂模式" class="headerlink" title="2. 三种工厂模式"></a>2. 三种工厂模式</h2><h3 id="2-1-简单工厂模式"><a href="#2-1-简单工厂模式" class="headerlink" title="2.1 简单工厂模式"></a>2.1 简单工厂模式</h3><p><strong>环境准备</strong></p>
<ol>
<li>一个汽车的接口</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>汽车的产品(实现接口)</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 五菱宏光 <span class="keyword">implements</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是五菱宏光"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 宝马 <span class="keyword">implements</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是宝马三系"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>简单工厂模式（汽车工厂）</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//简单工厂模式（静态工厂模式）</span></span><br><span class="line"><span class="comment">//弊端：不修改代码，无法做到新增一个产品（不满足开闭原则）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryDemo01</span> </span>&#123;</span><br><span class="line">    <span class="comment">//方法一:不满足开闭原则</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title">getCar</span><span class="params">(String car)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (car.equals(<span class="string">"五菱宏光"</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> 五菱宏光();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (car.equals(<span class="string">"宝马"</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> 宝马();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法二：不满足开闭原则</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title">getWuling</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> 五菱宏光();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title">getBaoMa</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> 宝马();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>消费者</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.传统方式</span></span><br><span class="line">        五菱宏光 car1 = <span class="keyword">new</span> 五菱宏光();</span><br><span class="line">        car1.name();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.使用工厂创建</span></span><br><span class="line">        Car car2 = FactoryDemo01.getCar(<span class="string">"宝马"</span>);</span><br><span class="line">        Car car3 = FactoryDemo01.getCar(<span class="string">"五菱宏光"</span>);</span><br><span class="line">        car2.name();</span><br><span class="line">        car3.name();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>原理图如下：</strong></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200313114502.png" alt=""></p>
<h3 id="2-2-工厂方法模式"><a href="#2-2-工厂方法模式" class="headerlink" title="2.2 工厂方法模式"></a>2.2 工厂方法模式</h3><p><strong>环境准备</strong></p>
<ol>
<li>一个汽车的接口</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>一个汽车接口的工厂接口</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//工厂方法模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line">    <span class="function">Car <span class="title">getCar</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>每种汽车的实现类和工厂实现类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 五菱宏光 <span class="keyword">implements</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是五菱宏光"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 五菱宏光<span class="title">Factory</span> <span class="keyword">implements</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> 五菱宏光();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 宝马 <span class="keyword">implements</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是宝马三系"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 宝马<span class="title">Factory</span> <span class="keyword">implements</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> 宝马();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>消费者购买</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Car car1 = <span class="keyword">new</span> 五菱宏光Factory().getCar();</span><br><span class="line">        Car car2 = <span class="keyword">new</span> 宝马Factory().getCar();</span><br><span class="line"></span><br><span class="line">        car1.name();</span><br><span class="line">        car2.name();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>如果想新增一种业务</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 摩拜 <span class="keyword">implements</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是摩拜"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 摩拜<span class="title">Factory</span> <span class="keyword">implements</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> 摩拜();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那么不需要修改业务代码，只需要新增一个工厂</p>
<p><strong>消费者的改变如下：只需要新增一个业务即可</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Car car1 = <span class="keyword">new</span> 五菱宏光Factory().getCar();</span><br><span class="line">        Car car2 = <span class="keyword">new</span> 宝马Factory().getCar();</span><br><span class="line"></span><br><span class="line">        car1.name();</span><br><span class="line">        car2.name();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//工厂方法模式(可以随时的扩展)</span></span><br><span class="line">        Car car3 = <span class="keyword">new</span> 摩拜Factory().getCar();</span><br><span class="line">        car3.name();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>原理图如下</strong></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200313135200.png" alt=""></p>
<h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><ul>
<li>结构复杂度：简单工厂&gt;工厂方法</li>
<li>管理复杂度：简单工厂&gt;工厂方法</li>
<li>编程复杂度：简单工厂&gt;工厂方法</li>
</ul>
<p><strong>实际上：简单工厂也是使用最多的</strong></p>
]]></content>
      <tags>
        <tag>设计者模式</tag>
      </tags>
  </entry>
  <entry>
    <title>单例模式</title>
    <url>/2020/03/12/DesignModel/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200313101331.png" alt=""></p>
<h2 id="2-常见的五种单例模式"><a href="#2-常见的五种单例模式" class="headerlink" title="2. 常见的五种单例模式"></a>2. 常见的五种单例模式</h2><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200313101430.png" alt=""></p>
<a id="more"></a>

<h3 id="2-1-饿汉式"><a href="#2-1-饿汉式" class="headerlink" title="2.1 饿汉式"></a>2.1 饿汉式</h3><p>使用前提：方法中不需要开辟更多空间</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//饿汉式单例模式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo01</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.私有化构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonDemo01</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2.类初始化的时候就，立即加载该对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonDemo01 instance = <span class="keyword">new</span> SingletonDemo01();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.提供获取该对象的方法，没有synchronized，效率高！</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonDemo01 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试是否成功</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo01test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        SingletonDemo01 singletonDemo01 = new SingletonDemo01();//不能new</span></span><br><span class="line">        SingletonDemo01 instance = SingletonDemo01.getInstance();</span><br><span class="line">        SingletonDemo01 instance2 = SingletonDemo01.getInstance();</span><br><span class="line">        System.out.println(instance==instance2); <span class="comment">//true 确保拿到的是一个对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-2-懒汉式"><a href="#2-2-懒汉式" class="headerlink" title="2.2 懒汉式"></a>2.2 懒汉式</h3><p>可以实现延迟加载：</p>
<p>synchronized：如果有多个线程同时进来，需要排队处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//懒汉式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo02</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.私有化构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonDemo02</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.类初始化的时候就，不立即加载该对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonDemo02 instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.提供获取该对象的方法，有synchronized，效率低！</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> SingletonDemo02 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> SingletonDemo02();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试是否成功</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo02test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        SingletonDemo02 singletonDemo02 = new SingletonDemo02();//不能new</span></span><br><span class="line">        SingletonDemo02 instance = SingletonDemo02.getInstance();</span><br><span class="line">        SingletonDemo02 instance2 = SingletonDemo02.getInstance();</span><br><span class="line">        System.out.println(instance==instance2); <span class="comment">//true 确保拿到的是一个对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-3-DCL懒汉式"><a href="#2-3-DCL懒汉式" class="headerlink" title="2.3 DCL懒汉式"></a>2.3 DCL懒汉式</h3><p>volatile作用：避免指令的重排，保证原子性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//DCL懒汉式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo03</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.私有化构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonDemo03</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.类初始化的时候就，不立即加载该对象</span></span><br><span class="line">    <span class="comment">//volatile作用：避免指令的重排，保证原子性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> SingletonDemo03 instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.提供获取该对象的方法，有synchronized，效率低！</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  SingletonDemo03 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (SingletonDemo03<span class="class">.<span class="keyword">class</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> SingletonDemo03();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 分配内存</span></span><br><span class="line">    <span class="comment">//2. 执行构造方法</span></span><br><span class="line">    <span class="comment">//3. 指向地址</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试是否成功</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo03test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        SingletonDemo03 singletonDemo03 = new SingletonDemo03();//不能new</span></span><br><span class="line">        SingletonDemo03 instance = SingletonDemo03.getInstance();</span><br><span class="line">        SingletonDemo03 instance2 = SingletonDemo03.getInstance();</span><br><span class="line">        System.out.println(instance==instance2); <span class="comment">//true 确保拿到的是一个对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-4-饿汉式改进：静态内部类实现"><a href="#2-4-饿汉式改进：静态内部类实现" class="headerlink" title="2.4 饿汉式改进：静态内部类实现"></a>2.4 饿汉式改进：静态内部类实现</h3><p><strong>前四种中最优秀的</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="comment">//饿汉式改进：静态内部类实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo04</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.私有化构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonDemo04</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.不会一出生就加载</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span> </span>&#123;</span><br><span class="line">        <span class="comment">//final：保证线程中只有一个存在</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SingletonDemo04 instance = <span class="keyword">new</span> SingletonDemo04();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.只有调用的时候才会加载</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonDemo04 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> InnerClass.instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//反射机制会破坏这个机制</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试是否成功</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo04test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException </span>&#123;</span><br><span class="line">        SingletonDemo04 instance = SingletonDemo04.getInstance();</span><br><span class="line">        SingletonDemo04 instance2 = SingletonDemo04.getInstance();</span><br><span class="line">        System.out.println(instance==instance2); <span class="comment">//true 确保拿到的是一个对象</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//反射机制会破坏这个机制</span></span><br><span class="line">        Constructor&lt;SingletonDemo04&gt; declaredConstructor = SingletonDemo04<span class="class">.<span class="keyword">class</span>.<span class="title">getDeclaredConstructor</span>(<span class="title">null</span>)</span>;</span><br><span class="line">        declaredConstructor.setAccessible(<span class="keyword">true</span>); <span class="comment">//关闭private权限</span></span><br><span class="line">        SingletonDemo04 instance3 = declaredConstructor.newInstance();</span><br><span class="line">        System.out.println(instance==instance3);</span><br><span class="line">        System.out.println(instance.hashCode());</span><br><span class="line">        System.out.println(instance3.hashCode());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-5-枚举单例"><a href="#2-5-枚举单例" class="headerlink" title="2.5 枚举单例"></a>2.5 枚举单例</h3><p><strong>纯天然防止反射破坏（弊端：不能延迟加载）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//枚举单例模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> SingletonDemo05 &#123;</span><br><span class="line"></span><br><span class="line">    INSTANCE; <span class="comment">//纯天然单例模式</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SingletonDemo05 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo05Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SingletonDemo05 instance = SingletonDemo05.INSTANCE;</span><br><span class="line">        SingletonDemo05 instance2 = SingletonDemo05.INSTANCE;</span><br><span class="line">        System.out.println(instance==instance2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="3-防止反射破坏单例模式"><a href="#3-防止反射破坏单例模式" class="headerlink" title="3. 防止反射破坏单例模式"></a>3. 防止反射破坏单例模式</h2><h3 id="3-1-防止一次反射破坏单例模式"><a href="#3-1-防止一次反射破坏单例模式" class="headerlink" title="3.1 防止一次反射破坏单例模式"></a>3.1 防止一次反射破坏单例模式</h3><ol>
<li>在私有化构造器中添加操作</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//DCL懒汉式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo03</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.私有化构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonDemo03</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (SingletonDemo03<span class="class">.<span class="keyword">class</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (instance!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"不要试图用反射破坏单例"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>全部测试代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="comment">//DCL懒汉式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo03</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.私有化构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonDemo03</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (SingletonDemo03<span class="class">.<span class="keyword">class</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (instance!=<span class="keyword">null</span>)&#123; <span class="comment">//假设已经存在instance了，不能再new</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"不要试图用反射破坏单例"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.类初始化的时候就，不立即加载该对象</span></span><br><span class="line">    <span class="comment">//volatile作用：避免指令的重排</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> SingletonDemo03 instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.提供获取该对象的方法，有synchronized，效率低！</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  SingletonDemo03 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (SingletonDemo03<span class="class">.<span class="keyword">class</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> SingletonDemo03();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 分配内存</span></span><br><span class="line">    <span class="comment">//2. 执行构造方法</span></span><br><span class="line">    <span class="comment">//3. 指向地址</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试反射破坏是否成功</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo03test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException </span>&#123;</span><br><span class="line">        SingletonDemo03 instance = SingletonDemo03.getInstance();</span><br><span class="line">        SingletonDemo03 instance2 = SingletonDemo03.getInstance();</span><br><span class="line">        System.out.println(instance==instance2); <span class="comment">//true 确保拿到的是一个对象</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试反射破坏是否成功</span></span><br><span class="line">        Constructor&lt;SingletonDemo03&gt; declaredConstructor = SingletonDemo03<span class="class">.<span class="keyword">class</span>.<span class="title">getDeclaredConstructor</span>()</span>;</span><br><span class="line">        declaredConstructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        SingletonDemo03 instance3 = declaredConstructor.newInstance();</span><br><span class="line">        System.out.println(instance==instance3);</span><br><span class="line">        System.out.println(instance.hashCode());</span><br><span class="line">        System.out.println(instance3.hashCode());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-2-防止两次反射破坏单例模式"><a href="#3-2-防止两次反射破坏单例模式" class="headerlink" title="3.2 防止两次反射破坏单例模式"></a>3.2 防止两次反射破坏单例模式</h3><p><strong>通过标志位防止两次反射创建对象破坏单例模式</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过标志位防止两次反射创建对象破坏单例模式</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> flag  = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.私有化构造器</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">SingletonDemo03</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (SingletonDemo03<span class="class">.<span class="keyword">class</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="keyword">false</span>)&#123;</span><br><span class="line">            flag = <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"不要试图用反射破坏单例"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-3-枚举防止破坏反射破坏单例模式"><a href="#3-3-枚举防止破坏反射破坏单例模式" class="headerlink" title="3.3 枚举防止破坏反射破坏单例模式"></a>3.3 枚举防止破坏反射破坏单例模式</h3><p><strong>点进newInstance()源码</strong></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200313105115.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//枚举单例模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> SingletonDemo05 &#123;</span><br><span class="line"></span><br><span class="line">    INSTANCE; <span class="comment">//纯天然单例模式</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SingletonDemo05 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo05Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SingletonDemo05 instance = SingletonDemo05.INSTANCE;</span><br><span class="line">        SingletonDemo05 instance2 = SingletonDemo05.INSTANCE;</span><br><span class="line">        System.out.println(instance==instance2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>设计者模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode-169</title>
    <url>/2020/03/12/Leetcode/Leetcode-169/</url>
    <content><![CDATA[<h1 id="Leecode-169-Majority-Element"><a href="#Leecode-169-Majority-Element" class="headerlink" title="Leecode-169 Majority Element"></a>Leecode-169 <a href="https://leetcode-cn.com/problems/majority-element/" target="_blank" rel="noopener">Majority Element</a></h1><h2 id="思路：哈希表，投票法，快排"><a href="#思路：哈希表，投票法，快排" class="headerlink" title="思路：哈希表，投票法，快排"></a>思路：哈希表，投票法，快排</h2><p><strong>题目描述</strong></p>
<ul>
<li>给定一个长度为n的数组，找出出现次数超过n/2的众数。</li>
</ul>
<p>示例1：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [3,2,3]</span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure>

<p>示例2：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [2,2,1,1,1,2,2]</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure>

<p><strong>Solution：</strong></p>
<ul>
<li>哈希表</li>
<li>排序法</li>
<li>投票法</li>
</ul>
<a id="more"></a>

<ol>
<li><p>哈希表</p>
<p>出现次数最多的元素大于n/2次，所以可以用哈希表来统计每个元素出现的次数</p>
<p>使用哈希映射（HashMap）来存储每个元素以及出现的次数。对于哈希映射中的每个键值对，键表示一个元素，值表示该元素出现的次数。</p>
<p>用一个循环遍历数组nums来将每个元素加入到哈希映射中，在这之后，<strong>我们遍历哈希映射所有的键值对，返回值最大的键。同样在nums中使用打擂台的方式，维护一个最大的值，这样省去了最后对哈希映射的遍历。</strong></p>
<p><strong>时间复杂度：O(n) , 空间复杂度O(n)</strong></p>
</li>
</ol>
<ol start="2">
<li><p>排序</p>
<p><strong>在下图中，第一个例子是 <em>n</em>为奇数的情况，第二个例子是 <em>n</em>为偶数的情况。</strong></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200315143508.png" alt=""></p>
</li>
</ol>
<p>​    <strong>如果将数组nums中的所有元素按照单调递增或者单调递减的顺序来排序，那么下标为n/2的数一定是众数（下标从0开始）</strong></p>
<p>​    <strong>时间复杂度：O(nlogn),空间复杂度：O(logn) （语法自带的排序算法）</strong></p>
<ol start="3">
<li><h4 id="Boyer-Moore-投票算法"><a href="#Boyer-Moore-投票算法" class="headerlink" title="Boyer-Moore 投票算法"></a>Boyer-Moore 投票算法</h4></li>
</ol>
<ul>
<li><p>如果候选人不是maj 则 maj,会和其他非候选人一起反对 会反对候选人,所以候选人一定会下台(maj==0时发生换届选举)</p>
</li>
<li><p>如果候选人是maj , 则maj 会支持自己，其他候选人会反对，同样因为maj 票数超过一半，所以maj 一定会成功当选</p>
</li>
</ul>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p><strong>Solution 1:哈希表</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">//将数组中的值遍历，存入hashmap</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Map&lt;Integer, Integer&gt; <span class="title">countNums</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; counts = <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!counts.containsKey(num)) &#123;</span><br><span class="line">                counts.put(num, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                counts.put(num, counts.get(num)+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> counts;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//首先返回counts</span></span><br><span class="line">        Map&lt;Integer, Integer&gt; counts = countNums(nums);</span><br><span class="line">        <span class="comment">//majorityEntry作为最后的返回结果</span></span><br><span class="line">        Map.Entry&lt;Integer, Integer&gt; majorityEntry = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//维护一个最大的键值对</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; entry : counts.entrySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (majorityEntry == <span class="keyword">null</span> || entry.getValue() &gt; majorityEntry.getValue()) &#123;</span><br><span class="line">                majorityEntry = entry;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回这个值的key</span></span><br><span class="line">        <span class="keyword">return</span> majorityEntry.getKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>Solution 2:排序</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">return</span> nums[nums.length/<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>Solution 3:摩尔投票法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        Integer candidate = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">                candidate = num;</span><br><span class="line">            &#125;</span><br><span class="line">            count += (num == candidate) ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> candidate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p><strong>Solution 1:哈希表</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">majorityElement</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        <span class="comment">#将nums以键值对返回</span></span><br><span class="line">        counts = collections.Counter(nums)</span><br><span class="line">        <span class="comment">#返回值次数出现最大的键</span></span><br><span class="line">        <span class="keyword">return</span> max(counts.keys(),key = counts.get)</span><br></pre></td></tr></table></figure>



<p><strong>Solution 2:排序</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">majorityElement</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        nums.sort()</span><br><span class="line">        <span class="keyword">return</span> nums[len(nums)//<span class="number">2</span>]</span><br></pre></td></tr></table></figure>



<p><strong>Solution 3:摩尔投票法</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">majorityElement</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        candidate = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> count == <span class="number">0</span>:</span><br><span class="line">                candidate = num</span><br><span class="line">            count += (<span class="number">1</span> <span class="keyword">if</span> num == candidate <span class="keyword">else</span> <span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> candidate</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Leetcode</tag>
        <tag>哈希表</tag>
        <tag>排序</tag>
        <tag>投票法</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode-543</title>
    <url>/2020/03/10/Leetcode/Leetcode-543/</url>
    <content><![CDATA[<h1 id="Leecode-543-Diameter-of-Binary-Tree"><a href="#Leecode-543-Diameter-of-Binary-Tree" class="headerlink" title="Leecode-543 Diameter of Binary Tree"></a>Leecode-543 <a href="https://leetcode-cn.com/problems/diameter-of-binary-tree/" target="_blank" rel="noopener">Diameter of Binary Tree</a></h1><h2 id="思路：递归"><a href="#思路：递归" class="headerlink" title="思路：递归"></a>思路：递归</h2><p><strong>题目描述</strong>：<strong>找出二叉树的最大深度</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    1</span><br><span class="line">   &#x2F; \</span><br><span class="line">  2   3</span><br><span class="line"> &#x2F; \     </span><br><span class="line">4   5</span><br></pre></td></tr></table></figure>

<p>Return <strong>3</strong>, which is the length of the path [4,2,1,3] or [5,2,1,3].</p>
<p><strong>Solution：</strong></p>
<p>很详细的题解如下：</p>
<p>点击链接：[Leetcode题解-543][<a href="https://leetcode-cn.com/problems/diameter-of-binary-tree/solution/shi-pin-jie-shi-di-gui-dai-ma-de-yun-xing-guo-chen/]" target="_blank" rel="noopener">https://leetcode-cn.com/problems/diameter-of-binary-tree/solution/shi-pin-jie-shi-di-gui-dai-ma-de-yun-xing-guo-chen/]</a></p>
<a id="more"></a>

<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p><strong>Solution :</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>; <span class="comment">//全局变量记录最大值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">diameterOfBinaryTree</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        dfs(root);</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> left  = dfs(root.left);</span><br><span class="line">        <span class="keyword">int</span> right = dfs(root.right);</span><br><span class="line">        res = Math.max(res,left + right);</span><br><span class="line">        <span class="keyword">return</span> Math.max(left,right) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p><strong>Solution :</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">diameterOfBinaryTree</span><span class="params">(self, root: TreeNode)</span> -&gt; int:</span></span><br><span class="line">        self.ans = <span class="number">1</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">depth</span><span class="params">(root)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            L = depth(root.left)</span><br><span class="line">            R = depth(root.right)</span><br><span class="line">            self.ans = max(self.ans, L + R + <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> max(L, R) + <span class="number">1</span></span><br><span class="line">        depth(root)</span><br><span class="line">        <span class="keyword">return</span> self.ans - <span class="number">1</span></span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>Leetcode</tag>
        <tag>春招每日一题</tag>
        <tag>深度优先搜索</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode-面试题57</title>
    <url>/2020/03/07/Leetcode/Leetcode-%E9%9D%A2%E8%AF%95%E9%A2%9857/</url>
    <content><![CDATA[<h1 id="Leecode-面试题57-II-和为s的连续正数序列"><a href="#Leecode-面试题57-II-和为s的连续正数序列" class="headerlink" title="Leecode-面试题57 - II. 和为s的连续正数序列"></a>Leecode-<a href="https://leetcode-cn.com/problems/he-wei-sde-lian-xu-zheng-shu-xu-lie-lcof/" target="_blank" rel="noopener">面试题57 - II. 和为s的连续正数序列</a></h1><h2 id="思路：滑动窗口"><a href="#思路：滑动窗口" class="headerlink" title="思路：滑动窗口"></a>思路：滑动窗口</h2><p><strong>题目描述</strong></p>
<p>输入一个正整数 target ，输出所有和为 target 的连续正整数序列（至少含有两个数）。</p>
<p>序列内的数字由小到大排列，不同序列按照首个数字从小到大排列。</p>
<p>示例1：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：target &#x3D; 9</span><br><span class="line">输出：[[2,3,4],[4,5]]</span><br></pre></td></tr></table></figure>

<p>示例2：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：target &#x3D; 15</span><br><span class="line">输出：[[1,2,3,4,5],[4,5,6],[7,8]]</span><br></pre></td></tr></table></figure>

<p>限制条件：</p>
<p><code>1 &lt;= target &lt;= 10^5</code></p>
<p><strong>Solution：</strong></p>
<ul>
<li><img src = "https://pic.leetcode-cn.com/af4821c41d5b093e6a41ad5602208f9e7057cc1b002cd0053de71bc9a0e35b12.jpg">

</li>
</ul>
<a id="more"></a>



<ul>
<li><p>滑动窗口可以看成<strong>数组中框起来的一个部分</strong>。在一些数组类题目中，我们可以用滑动窗口来观察可能的候选结果。当滑动窗口从数组的左边滑到了右边，我们就可以从所有的候选结果中找到最优的结果。</p>
</li>
<li><p>对于这道题来说，数组就是正整数序列[1,2,3,…,<em>n</em>]。我们设<strong>滑动窗口的左边界为i,右边界为j,则滑动窗口框起来的是一个左闭右开的区间[i,j)</strong>。</p>
</li>
<li><p>注意：为了编程的方便，滑动窗口一般表示成一个左闭右开的区间。在一开始，i=1,j=1。<strong>滑动窗口为了序列的最左侧，窗口大小为0</strong>。</p>
</li>
<li><p><strong>滑动窗口重要的性质是：窗口的左边界和右边界永远只能向右移动</strong>。这是为了保证滑动窗口 的时间复杂度为O(n)。如果左右边界向左移动的话，这叫做“回溯法”。算法的时间复杂度就不止为O(n)了。</p>
</li>
</ul>
<h2 id="如何用滑动窗口解这道题"><a href="#如何用滑动窗口解这道题" class="headerlink" title="如何用滑动窗口解这道题"></a>如何用滑动窗口解这道题</h2><p>要用滑动窗口解这道题，有两个问题时必须要回答的</p>
<ul>
<li>第一个问题，窗口何时扩大，何时缩小？</li>
<li>第二个问题，滑动窗口能找到全部的解吗？</li>
</ul>
<p><strong>对于第一个问题，回答非常简单：</strong></p>
<ul>
<li>当窗口的和小于target的时候，窗口的和需要增加，所以需要扩大窗口，窗口的右边界向右移动</li>
<li>当窗口的和大于target的时候，窗口的和需要减少，所以徐要减少窗口，窗口的左边界向右移动</li>
<li>当窗口的和恰好的等于target的时候，我们需要记录此时的结果，设此时的窗口大小为【i,j），那么我们已经找到了一个i开头的序列，也是唯一一个i开头的序列，接下来只需要寻找i+1开头的序列，所以窗口的左边界向右移动。</li>
</ul>
<p><strong>对于第二个问题，我们可以稍微简单地证明一下：</strong></p>
<img src = "https://pic.leetcode-cn.com/728c705889a672d5a85709cb3fd157216bb1a41dc377dcc125818d9e18b8dd55.jpg">

<p>我们一开始要找的是 1 开头的序列，只要窗口的和小于 target，窗口的右边界会一直向右移动。假设 1+2+⋯+8 小于 target，再加上一个 9 之后， 发现 1+2+⋯+8+9 又大于 target 了。这说明 1 开头的序列找不到解。此时滑动窗口的最右元素是 9。</p>
<p>接下来，我们需要找 2 开头的序列，我们发现，2 +..+ 8  &lt;1+2+⋯+8&lt;target。这说明 2 开头的序列至少要加到 9。那么，我们只需要把原先 1<del>9 的滑动窗口的左边界向右移动，变成 2</del>9 的滑动窗口，然后继续寻找。而右边界完全不需要向左移动。</p>
<p>以此类推，滑动窗口的左右边界都不需要向左移动，所以这道题用滑动窗口一定可以得到所有的解。时间复杂度是 <em>O</em>(<em>n</em>)。</p>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p><strong>Solution :</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[][] findContinuousSequence(<span class="keyword">int</span> target) &#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>; <span class="comment">// 滑动窗口的左边界</span></span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">1</span>; <span class="comment">// 滑动窗口的右边界</span></span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>; <span class="comment">// 滑动窗口中数字的和</span></span><br><span class="line">    List&lt;<span class="keyword">int</span>[]&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= target / <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sum &lt; target) &#123;</span><br><span class="line">            <span class="comment">// 右边界向右移动</span></span><br><span class="line">            sum += j;</span><br><span class="line">            j++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &gt; target) &#123;</span><br><span class="line">            <span class="comment">// 左边界向右移动</span></span><br><span class="line">            sum -= i;</span><br><span class="line">            i++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 记录结果</span></span><br><span class="line">            <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[j-i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = i; k &lt; j; k++) &#123;</span><br><span class="line">                arr[k-i] = k;</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(arr);</span><br><span class="line">            <span class="comment">// 左边界向右移动</span></span><br><span class="line">            sum -= i;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>[][])res.toArray(<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>][]); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200309111027.png" alt=""></p>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p><strong>Solution :</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findContinuousSequence</span><span class="params">(self, target: int)</span> -&gt; List[List[int]]:</span></span><br><span class="line">    i = <span class="number">1</span> <span class="comment"># 滑动窗口的左边界</span></span><br><span class="line">    j = <span class="number">1</span> <span class="comment"># 滑动窗口的右边界</span></span><br><span class="line">    sum = <span class="number">0</span> <span class="comment"># 滑动窗口中数字的和</span></span><br><span class="line">    res = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> i &lt;= target // <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">if</span> sum &lt; target:</span><br><span class="line">            <span class="comment"># 右边界向右移动</span></span><br><span class="line">            sum += j</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> sum &gt; target:</span><br><span class="line">            <span class="comment"># 左边界向右移动</span></span><br><span class="line">            sum -= i</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 记录结果</span></span><br><span class="line">            arr = list(range(i, j))</span><br><span class="line">            res.append(arr)</span><br><span class="line">            <span class="comment"># 左边界向右移动</span></span><br><span class="line">            sum -= i</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>



<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200309113236.png" alt=""></p>
]]></content>
      <tags>
        <tag>Leetcode</tag>
        <tag>春招每日一题</tag>
        <tag>滑动窗口</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode-994</title>
    <url>/2020/03/04/Leetcode/Leetcode-994/</url>
    <content><![CDATA[<h1 id="Leecode-994-Rotting-Oranges"><a href="#Leecode-994-Rotting-Oranges" class="headerlink" title="Leecode-994 Rotting Oranges"></a>Leecode-994 <a href="https://leetcode-cn.com/problems/rotting-oranges/" target="_blank" rel="noopener">Rotting Oranges</a></h1><h2 id="思路：BFS"><a href="#思路：BFS" class="headerlink" title="思路：BFS"></a>思路：BFS</h2><p><strong>题目描述</strong></p>
<ul>
<li>在一个二维的网格中，0代表空的网格，1代表新鲜的橘子，2代表腐烂的橘子</li>
<li>每过一分钟，新鲜的橘子会被腐烂的橘子传染，传染方向来自上下左右</li>
<li>如果有无法感染的橘子，最终返回-1</li>
<li>如果全部感染，返回需要的分钟数（轮数）</li>
</ul>
<p>Example1:</p>
<img src='https://assets.leetcode.com/uploads/2019/02/16/oranges.png'>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [[2,1,1],[1,1,0],[0,1,1]]</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure>

<p>Example2:</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">Input: [[2,1,1],[0,1,1],[1,0,1]]</span></span><br><span class="line"><span class="section">Output: -1</span></span><br><span class="line"><span class="section">Explanation:  The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.</span></span><br></pre></td></tr></table></figure>



<p><strong>Solution：BFS</strong></p>
<ul>
<li>一开始，我们找出所有腐烂的橘子，将他们放入队列，作为第0层的节点。</li>
<li>然后进行BFS遍历，每个节点的相邻节点可能是上下左右四个方向的节点，注意判断网格边界的特殊情况</li>
<li>由于可能存在无法被感染的橘子，我们需要记录新鲜橘子的数量。在BFS中，每遍历到一个橘子（污染了一个橘子）就将新鲜橘子的数量减掉1。</li>
</ul>
<a id="more"></a>



<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p><strong>Solution :</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">orangesRotting</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> M = grid.length;</span><br><span class="line">        <span class="keyword">int</span> N = grid[<span class="number">0</span>].length;</span><br><span class="line">        Queue&lt;<span class="keyword">int</span>[]&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> r = <span class="number">0</span>;r &lt; M;r++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> c = <span class="number">0</span>;c &lt; N;c++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[r][c] == <span class="number">1</span>) count++;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(grid[r][c] == <span class="number">2</span>) queue.add(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;r,c&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> round = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(count &gt; <span class="number">0</span> &amp;&amp; queue.size()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            round ++;</span><br><span class="line">            <span class="keyword">int</span> n = queue.size();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">                <span class="keyword">int</span>[] orange = queue.poll();</span><br><span class="line">                <span class="keyword">int</span> r = orange[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">int</span> c = orange[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span>(r - <span class="number">1</span>&gt;= <span class="number">0</span> &amp;&amp; grid[r-<span class="number">1</span>][c] == <span class="number">1</span>)&#123;</span><br><span class="line">                    grid[r-<span class="number">1</span>][c] = <span class="number">2</span>;</span><br><span class="line">                    count --;</span><br><span class="line">                    queue.add(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;r-<span class="number">1</span>,c&#125;);</span><br><span class="line">                &#125; </span><br><span class="line">                <span class="keyword">if</span> (r+<span class="number">1</span> &lt; M &amp;&amp; grid[r+<span class="number">1</span>][c] == <span class="number">1</span>) &#123;</span><br><span class="line">                    grid[r+<span class="number">1</span>][c] = <span class="number">2</span>;</span><br><span class="line">                    count--;</span><br><span class="line">                    queue.add(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;r+<span class="number">1</span>, c&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (c-<span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; grid[r][c-<span class="number">1</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">                    grid[r][c-<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">                    count--;</span><br><span class="line">                    queue.add(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;r, c-<span class="number">1</span>&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (c+<span class="number">1</span> &lt; N &amp;&amp; grid[r][c+<span class="number">1</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">                    grid[r][c+<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">                    count--;</span><br><span class="line">                    queue.add(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;r, c+<span class="number">1</span>&#125;);</span><br><span class="line">                &#125;                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(count &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> round;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p><strong>Solution :</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">orangesRotting</span><span class="params">(self, grid: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">        M = len(grid)</span><br><span class="line">        N = len(grid[<span class="number">0</span>])</span><br><span class="line">        queue = []</span><br><span class="line"></span><br><span class="line">        count = <span class="number">0</span> <span class="comment"># count用来记录新鲜橘子的数量</span></span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> range(M):</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> range(N):</span><br><span class="line">                <span class="keyword">if</span> grid[r][c] == <span class="number">1</span>:</span><br><span class="line">                    count += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> grid[r][c] == <span class="number">2</span>:</span><br><span class="line">                    queue.append((r,c))</span><br><span class="line"></span><br><span class="line">        round = <span class="number">0</span> <span class="comment"># round表示腐烂需要的轮数，或者是分钟数</span></span><br><span class="line">        <span class="keyword">while</span> count &gt; <span class="number">0</span> <span class="keyword">and</span> len(queue) &gt; <span class="number">0</span>:</span><br><span class="line">            round += <span class="number">1</span></span><br><span class="line">            n = len(queue)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">                r,c = queue.pop(<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">if</span> r<span class="number">-1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> grid[r<span class="number">-1</span>][c] == <span class="number">1</span>:</span><br><span class="line">                    grid[r<span class="number">-1</span>][c] = <span class="number">2</span></span><br><span class="line">                    count -= <span class="number">1</span></span><br><span class="line">                    queue.append((r<span class="number">-1</span>,c))</span><br><span class="line">                <span class="keyword">if</span> r+<span class="number">1</span> &lt; M <span class="keyword">and</span> grid[r+<span class="number">1</span>][c] == <span class="number">1</span>:</span><br><span class="line">                    grid[r+<span class="number">1</span>][c] = <span class="number">2</span></span><br><span class="line">                    count -= <span class="number">1</span></span><br><span class="line">                    queue.append((r+<span class="number">1</span>,c))</span><br><span class="line">                <span class="keyword">if</span> c<span class="number">-1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> grid[r][c<span class="number">-1</span>] == <span class="number">1</span>:</span><br><span class="line">                    grid[r][c<span class="number">-1</span>] = <span class="number">2</span></span><br><span class="line">                    count -= <span class="number">1</span></span><br><span class="line">                    queue.append((r,c<span class="number">-1</span>))</span><br><span class="line">                <span class="keyword">if</span> c+<span class="number">1</span> &lt; N <span class="keyword">and</span> grid[r][c+<span class="number">1</span>] == <span class="number">1</span>:</span><br><span class="line">                    grid[r][c+<span class="number">1</span>] = <span class="number">2</span></span><br><span class="line">                    count -= <span class="number">1</span></span><br><span class="line">                    queue.append((r,c+<span class="number">1</span>))</span><br><span class="line">        <span class="keyword">if</span> count &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> round</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>Leetcode</tag>
        <tag>春招每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>html详解</title>
    <url>/2020/03/01/Webfront/html/</url>
    <content><![CDATA[<h1 id="html详解"><a href="#html详解" class="headerlink" title="html详解"></a>html详解</h1><h2 id="1-什么是HTMl？"><a href="#1-什么是HTMl？" class="headerlink" title="1. 什么是HTMl？"></a>1. 什么是HTMl？</h2><ul>
<li>Hyper Text Markup Language(超文本标记语言)<ul>
<li>超文本：图片，音频，视频…..</li>
</ul>
</li>
</ul>
<h3 id="1-1-HTML的基本结构"><a href="#1-1-HTML的基本结构" class="headerlink" title="1.1 HTML的基本结构"></a>1.1 HTML的基本结构</h3><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200302192919.png" alt=""></p>
<h3 id="1-2-网页框架标签"><a href="#1-2-网页框架标签" class="headerlink" title="1.2 网页框架标签"></a>1.2 网页框架标签</h3><ol>
<li><strong>DOCTYPE:告诉浏览器，我们要使用什么规范</strong></li>
<li><strong>html: 网页都囊括在html标签中</strong></li>
<li><strong>head：网页的头部</strong></li>
<li><strong>body:代表网页的主体</strong></li>
<li><strong>title:网页的标题</strong></li>
<li><strong>meta:描述网站的一些信息（一般用来做SEO）</strong></li>
</ol>
<a id="more"></a>

<h3 id="1-3-网页的基本标签"><a href="#1-3-网页的基本标签" class="headerlink" title="1.3 网页的基本标签"></a>1.3 网页的基本标签</h3><ol>
<li>标题标签</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--标题标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>一级标签<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>二级标签<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>三级标签<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>四级标签<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>五级标签<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200302193950.png" alt=""></p>
<ol start="2">
<li>段落标签</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--段落标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>两只老虎 两只老虎<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>跑的快 跑的快<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>   效果如下：</p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200302194249.png" alt=""></p>
<ol start="3">
<li>换行标签</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--换行标签--&gt;</span></span><br><span class="line">两只老虎 两只老虎<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">跑的快 跑的快<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200302194506.png" alt=""></p>
<ol start="4">
<li>水平线标签</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--水平线标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果图下：</p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200302194655.png" alt=""></p>
<ol start="5">
<li>字体样式标签</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--字体样式标签--&gt;</span></span><br><span class="line">粗体：<span class="tag">&lt;<span class="name">strong</span>&gt;</span>This is 粗体<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">斜体：<span class="tag">&lt;<span class="name">em</span>&gt;</span>This is 斜体<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200302194917.png" alt=""></p>
<ol start="6">
<li>特殊符号</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--特殊符号--&gt;</span></span><br><span class="line">空<span class="symbol">&amp;nbsp;</span>格</span><br><span class="line"></span><br><span class="line"><span class="symbol">&amp;gt;</span> 大于号</span><br><span class="line"><span class="symbol">&amp;lt;</span> 小于号</span><br><span class="line"></span><br><span class="line"><span class="symbol">&amp;copy;</span> 版权符号</span><br></pre></td></tr></table></figure>



<ol start="6">
<li>图像标签</li>
</ol>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200302201234.png" alt=""></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../resources/image/证件照.jpg"</span> <span class="attr">alt</span>=<span class="string">"我的证件照"</span> <span class="attr">title</span>=<span class="string">"帅照"</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"300"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="7">
<li>链接标签</li>
</ol>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200302201906.png" alt=""></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">herf:  必填，表示要跳转到哪个页面</span></span><br><span class="line"><span class="comment">target:表示窗口在哪里打开</span></span><br><span class="line"><span class="comment">        target="_blank":在新的窗口打开</span></span><br><span class="line"><span class="comment">        target="_self"：在当前页面打开</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"Basictags.html"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>点击我跳转的页面一<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"www.baidu.com"</span> <span class="attr">target</span>=<span class="string">"_self"</span>&gt;</span>点击我跳转到百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"Basictags.html"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../resources/image/证件照.jpg"</span> <span class="attr">alt</span>=<span class="string">"我的证件照"</span> <span class="attr">title</span>=<span class="string">"帅照"</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"300"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>7.1 锚链接</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">"top"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--锚链接</span></span><br><span class="line"><span class="comment">1.需要一个锚标记</span></span><br><span class="line"><span class="comment">2.跳转到标记(用#号)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#top"</span>&gt;</span>点击我回到顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>7.2 功能性链接</strong></p>
<ol>
<li>QQ链接:<a href="https://shang.qq.com/v3/index.html" target="_blank" rel="noopener">https://shang.qq.com/v3/index.html</a></li>
</ol>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200302204125.png" alt=""></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">"http://wpa.qq.com/msgrd?v=3&amp;uin=&amp;site=qq&amp;menu=yes"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">src</span>=<span class="string">"http://wpa.qq.com/pa?p=2::51"</span> <span class="attr">alt</span>=<span class="string">"朱酱酱的QQ"</span> <span class="attr">title</span>=<span class="string">"朱酱酱的QQ"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>邮件链接</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--功能性链接</span></span><br><span class="line"><span class="comment">邮件链接：mailto</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mailto:353446503@qq.com"</span>&gt;</span>点击联系我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>



<ol start="8">
<li><strong>列表标签</strong></li>
</ol>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200302204943.png" alt=""></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--有序列表</span></span><br><span class="line"><span class="comment">应用范围：需要顺序的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>运维<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>前端<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>C/C++<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>PHP<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--无序列表</span></span><br><span class="line"><span class="comment">应用范围：侧边栏，导航--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>运维<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>前端<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>C/C++<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>PHP<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--自定义标签</span></span><br><span class="line"><span class="comment">dl:标签</span></span><br><span class="line"><span class="comment">dt:列表名称</span></span><br><span class="line"><span class="comment">dd:列表内容--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>学科<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>运维<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>前端<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>C/C++<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>PHP<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>位置<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>江苏<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>南京<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200302205841.png" alt=""></p>
<ol start="9">
<li>表格标签</li>
</ol>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200302205904.png" alt=""></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--表格table</span></span><br><span class="line"><span class="comment">行  tr</span></span><br><span class="line"><span class="comment">列  td</span></span><br><span class="line"><span class="comment">border : 加边框</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1px"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--colspan跨列--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"4"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--rowspan跨行--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">"2"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3-1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3-2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3-3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200302210636.png" alt=""></p>
<h3 id="1-4-行内元素和块元素"><a href="#1-4-行内元素和块元素" class="headerlink" title="1.4 行内元素和块元素"></a>1.4 行内元素和块元素</h3><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200302204627.png" alt=""></p>
<h3 id="1-5-媒体元素"><a href="#1-5-媒体元素" class="headerlink" title="1.5 媒体元素"></a>1.5 媒体元素</h3><p><strong>视频和音频</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--video</span></span><br><span class="line"><span class="comment">src:资源目录</span></span><br><span class="line"><span class="comment">controls:控制条</span></span><br><span class="line"><span class="comment">autoplay:自动播放--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">"../resources/video/XXX.mp4"</span> <span class="attr">controls</span> <span class="attr">autoplay</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--audio</span></span><br><span class="line"><span class="comment">controls:控制条</span></span><br><span class="line"><span class="comment">autoplay:自动播放--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">"../resources/audio/XXX.mp3"</span> <span class="attr">controls</span> <span class="attr">autoplay</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="2-页面结构分析"><a href="#2-页面结构分析" class="headerlink" title="2. 页面结构分析"></a>2. 页面结构分析</h2><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200303110422.png" alt=""></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>网页头部<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>网页主题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>网页脚部<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="3-iframe内联框架"><a href="#3-iframe内联框架" class="headerlink" title="3.iframe内联框架"></a>3.iframe内联框架</h2><p>B 站举例：</p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200303110851.png" alt=""></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"//player.bilibili.com/player.html?aid=55631961&amp;cid=97257967&amp;page=11"</span> <span class="attr">scrolling</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">framespacing</span>=<span class="string">"0"</span> <span class="attr">allowfullscreen</span>=<span class="string">"true"</span>&gt;</span> <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200303111304.png" alt=""></p>
<p>博客举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--iframe内联框架</span></span><br><span class="line"><span class="comment">src:地址</span></span><br><span class="line"><span class="comment">w-h:宽度高度--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">name</span>=<span class="string">"hello"</span> <span class="attr">frameborder</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">"1600"</span> <span class="attr">height</span>=<span class="string">"900"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://zhuuu.work"</span> <span class="attr">target</span>=<span class="string">"hello"</span>&gt;</span>点击跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="4-表单"><a href="#4-表单" class="headerlink" title="4. 表单"></a>4. 表单</h2><h3 id="4-1-表单语法"><a href="#4-1-表单语法" class="headerlink" title="4.1 表单语法"></a>4.1 表单语法</h3><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200303112029.png" alt=""></p>
<h3 id="4-2-实现简单登录"><a href="#4-2-实现简单登录" class="headerlink" title="4.2 实现简单登录"></a>4.2 实现简单登录</h3><p>实现简单登录：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--表单form</span></span><br><span class="line"><span class="comment">action:表单提交的位置，可以是网站，也可以是一个请求处理地址</span></span><br><span class="line"><span class="comment">method:post,get提交方式</span></span><br><span class="line"><span class="comment">get:可以在url中看到我们提交的信息，不安全，搞笑</span></span><br><span class="line"><span class="comment">post:在url中看不到提交的信息，安全但不高效，可以传输大的文件</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"Basictags.html"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--文本输入框--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>名字： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>密码： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="4-3-表单元素格式"><a href="#4-3-表单元素格式" class="headerlink" title="4.3 表单元素格式"></a>4.3 表单元素格式</h3><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200303113531.png" alt=""></p>
<ol>
<li>单选框</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--单选框</span></span><br><span class="line"><span class="comment">input type = "radio"</span></span><br><span class="line"><span class="comment">value: 单选框的值</span></span><br><span class="line"><span class="comment">name:  表示一个组，name一样就是同一个组--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>性别：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">"boy"</span> <span class="attr">name</span>=<span class="string">"gender"</span>&gt;</span>男孩</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">"girl"</span> <span class="attr">name</span>=<span class="string">"gender"</span>&gt;</span>女孩</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>多选框</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--多选框</span></span><br><span class="line"><span class="comment">input type="checkbox"--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>爱好：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"睡觉"</span> <span class="attr">name</span>=<span class="string">"hobbys"</span>&gt;</span>睡觉</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"代码"</span> <span class="attr">name</span>=<span class="string">"hobbys"</span>&gt;</span>代码</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"聊天"</span> <span class="attr">name</span>=<span class="string">"hobbys"</span>&gt;</span>聊天</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"看片"</span> <span class="attr">name</span>=<span class="string">"hobbys"</span>&gt;</span>看片</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"游戏"</span> <span class="attr">name</span>=<span class="string">"hobbys"</span>&gt;</span>游戏</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>按钮</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--自定义按钮</span></span><br><span class="line"><span class="comment">input type="button" ：普通按钮</span></span><br><span class="line"><span class="comment">input type="image"  ：图像按钮</span></span><br><span class="line"><span class="comment">input type="submit" ：提交按钮</span></span><br><span class="line"><span class="comment">input type="reset"  ：重置按钮</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>按钮：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">"btn1"</span> <span class="attr">value</span>=<span class="string">"点击变长"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"image"</span> <span class="attr">src</span>=<span class="string">"../resources/image/证件照.jpg"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--提交按钮--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span> <span class="attr">value</span>=<span class="string">"清空表单"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>列表框下拉框</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--下拉框</span></span><br><span class="line"><span class="comment">selected：设定默认值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>下拉框：</span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"列表名称"</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"选项的值"</span>&gt;</span>中国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"选项的值"</span>&gt;</span>美国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"选项的值"</span> <span class="attr">selected</span>&gt;</span>日本<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"选项的值"</span>&gt;</span>韩国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>文本域</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--文本域</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>反馈：</span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"textarea"</span>  <span class="attr">cols</span>=<span class="string">"30"</span> <span class="attr">rows</span>=<span class="string">"10"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li>文件域</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--文件域：上传文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"files"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"上传"</span> <span class="attr">name</span>=<span class="string">"upload"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="7">
<li>label标签</li>
</ol>
<p>作用：增强鼠标的可用性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--label</span></span><br><span class="line"><span class="comment">点击文字会让搜索框生效--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"mark"</span>&gt;</span>你点我试试<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"mark"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="4-4-表单的应用"><a href="#4-4-表单的应用" class="headerlink" title="4.4 表单的应用"></a>4.4 表单的应用</h3><ol>
<li><strong>只读(readonly)</strong></li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>名字： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"admin"</span> <span class="attr">readonly</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>禁用（disabled）</strong></li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>性别：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">"boy"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">disabled</span>&gt;</span>男孩</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">"girl"</span> <span class="attr">name</span>=<span class="string">"gender"</span>&gt;</span>女孩</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><strong>隐藏（hidden）</strong></li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>密码： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">hidden</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="4-5-表单初级验证"><a href="#4-5-表单初级验证" class="headerlink" title="4.5 表单初级验证"></a>4.5 表单初级验证</h3><ol>
<li><strong>placeholder（提示信息）</strong></li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>名字： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>required (非空判断)</strong></li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>密码： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">required</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><strong>pattern(正则表达式判断 )</strong></li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--正则表达式判断</span></span><br><span class="line"><span class="comment">pattern--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"diymail"</span> <span class="attr">pattern</span>=<span class="string">"^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里的正则表达式用来验证邮箱：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$</span><br></pre></td></tr></table></figure>





<h2 id="5-简单验证"><a href="#5-简单验证" class="headerlink" title="5. 简单验证"></a>5. 简单验证</h2><h3 id="5-1-邮箱验证"><a href="#5-1-邮箱验证" class="headerlink" title="5.1 邮箱验证"></a>5.1 邮箱验证</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--邮件验证--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>邮箱：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"email"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-2-url验证"><a href="#5-2-url验证" class="headerlink" title="5.2 url验证"></a>5.2 url验证</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--url验证--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"url"</span> <span class="attr">name</span>=<span class="string">"url"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-3-数字验证"><a href="#5-3-数字验证" class="headerlink" title="5.3 数字验证"></a>5.3 数字验证</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--数字验证--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">name</span>=<span class="string">"num"</span> <span class="attr">max</span>=<span class="string">"100"</span> <span class="attr">min</span>=<span class="string">"0"</span> <span class="attr">step</span>=<span class="string">"10"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-4-滑块验证"><a href="#5-4-滑块验证" class="headerlink" title="5.4 滑块验证"></a>5.4 滑块验证</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--滑块验证</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>滑块：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"range"</span> <span class="attr">name</span>=<span class="string">"voice"</span> <span class="attr">min</span>=<span class="string">"0"</span> <span class="attr">max</span>=<span class="string">"100"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>通常可用于音量调节</strong></p>
<h3 id="5-5-搜索框"><a href="#5-5-搜索框" class="headerlink" title="5.5 搜索框"></a>5.5 搜索框</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--搜索框</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"search"</span> <span class="attr">name</span>=<span class="string">"search"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="6-HTML总结"><a href="#6-HTML总结" class="headerlink" title="6. HTML总结"></a>6. HTML总结</h2><p><strong>name代表提交的键值对中的键</strong></p>
<p><strong>name一定不能少</strong></p>
<p>以下自己总结的iframe内联式思维导图</p>
<iframe id="embed_dom" name="embed_dom" frameborder="0" style="display:block;width:525px; height:245px;" src="https://www.processon.com/embed/5e5f9768e4b08601cf491b28"></iframe>

]]></content>
      <tags>
        <tag>html</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>VMware虚拟机安装</title>
    <url>/2020/02/26/personal_server/%E6%98%A5%E6%8B%9B%E5%BF%85%E5%A4%87-%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
    <content><![CDATA[<h1 id="VMware虚拟机安装"><a href="#VMware虚拟机安装" class="headerlink" title="VMware虚拟机安装"></a>VMware虚拟机安装</h1><h1 id="1-关于VMware15下载"><a href="#1-关于VMware15下载" class="headerlink" title="1. 关于VMware15下载"></a>1. 关于VMware15下载</h1><p>微信号请关注 <em>软件智库</em> </p>
<p>公众号里面有的不再阐述</p>
<h1 id="2-Win10-消费者版安装"><a href="#2-Win10-消费者版安装" class="headerlink" title="2. Win10 消费者版安装"></a>2. Win10 消费者版安装</h1><h2 id="2-1-MSDN-镜像下载地址"><a href="#2-1-MSDN-镜像下载地址" class="headerlink" title="2.1 MSDN:镜像下载地址"></a>2.1 MSDN:镜像下载地址</h2><p><a href="https://msdn.sjjzm.com/" target="_blank" rel="noopener">https://msdn.sjjzm.com/</a></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200227221406.png" alt=""></p>
<a id="more"></a>

<h2 id="2-2-镜像安装详情"><a href="#2-2-镜像安装详情" class="headerlink" title="2.2 镜像安装详情"></a>2.2 镜像安装详情</h2><ol>
<li>首先打开vmware，点击文件，新建虚拟机</li>
</ol>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200227221504.png" alt=""></p>
<ol start="2">
<li>选择稍后安装操作系统</li>
</ol>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200227221527.png" alt=""></p>
<ol start="3">
<li>先选择Microsoft windows，在选择win10 x64</li>
</ol>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200227221551.png" alt=""></p>
<ol start="4">
<li>完成相关配置之后，接下来就是装系统了，选择CD/DVD寻找到自己的win10镜像所在的位置</li>
</ol>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200227221622.png" alt=""></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200227221633.png" alt=""></p>
<ol start="5">
<li>接下来就是一系列的设置了，完成之后点击现在安装</li>
</ol>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200227221700.png" alt=""></p>
<p>这边有好几种版本，我个人觉得企业版是最好用的</p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200227221722.png" alt=""></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200227221816.png" alt=""></p>
<p>常规设置</p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200227221752.png" alt=""></p>
<p>最后就安装成果啦~</p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200227224232.png" alt=""></p>
]]></content>
      <tags>
        <tag>VMware虚拟机</tag>
        <tag>春招应试技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaWeb/JavaWeb</title>
    <url>/2020/02/26/JavaWeb/JavaWeb/</url>
    <content><![CDATA[<p>title: JavaWeb<br>date: 2019-07-17 11:12:22<br>tags: [‘JavaWeb’,’servlet’,’Tomcat’,’Maven’,’JSP’]</p>
<h1 id="JavaWeb"><a href="#JavaWeb" class="headerlink" title="JavaWeb"></a>JavaWeb</h1><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200228120607.png" alt=""></p>
<h1 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1. 基本概念"></a>1. 基本概念</h1><h2 id="1-1-前言"><a href="#1-1-前言" class="headerlink" title="1.1 前言"></a>1.1 前言</h2><p>web开发：</p>
<ul>
<li>web,网页的意思：<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></li>
<li>静态web<ul>
<li>html,css</li>
<li>提供给所有人看的网页数据始终不会发生变化</li>
</ul>
</li>
<li>动态web<ul>
<li>淘宝，几乎是所有的网站</li>
<li>提供给每个人看的数据在不同时间，不同地点都不一样</li>
<li>技术栈：Servlet/JSP,ASP,PHP</li>
</ul>
</li>
</ul>
<a id="more"></a>

<h2 id="1-2-web应用程序"><a href="#1-2-web应用程序" class="headerlink" title="1.2 web应用程序"></a>1.2 web应用程序</h2><p><strong>web应用程序：可以提供浏览器访问的程序；</strong></p>
<ul>
<li>a.html、b.html……多个web资源，这些web资源可以被外界访问，对外界提供服务；</li>
<li>能访问到的任何一个页面或者资源，都存在于这个世界的某一个角落的计算机上。</li>
<li>URL 统计资源定位符来找到它们</li>
<li>这个统一的web资源会被放在同一个文件夹下，web应用程序–&gt;Tomcat：服务器</li>
<li>一个web应用由多部分组成（静态web,动态web）<ul>
<li>html,css,js</li>
<li>jsp,servlet</li>
<li>java程序</li>
<li>jar包</li>
<li>配置文件（properties）</li>
</ul>
</li>
</ul>
<p>web应用程序编写完毕后，若想提供给外界访问：需要一个服务器来统一管理；</p>
<h2 id="1-3-静态web"><a href="#1-3-静态web" class="headerlink" title="1.3 静态web"></a>1.3 静态web</h2><ul>
<li><p>*.htm  *.html这些都是网页的后缀，如果在服务器上一直存在这些东西，我们就可以直接进行读取</p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200220092530.png" alt=""></p>
</li>
</ul>
<ul>
<li>静态web存在的缺点<ul>
<li>Web页面无法动态更新，所有用户看到的都是同一个也没面<ul>
<li>轮播图  ，点击特效：伪动态</li>
<li>JavaScript【实际开发中用得最多】</li>
<li>VBScript</li>
</ul>
</li>
<li>它无法和数据库交互</li>
</ul>
</li>
</ul>
<h2 id="1-4-动态web"><a href="#1-4-动态web" class="headerlink" title="1.4 动态web"></a>1.4 动态web</h2><p>作用：页面会动态展示： “Web的页面展示的效果因人而异”；</p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200220092904.png" alt=""></p>
<p>缺点：</p>
<ul>
<li>加入服务器的动态web资源出现了错误，我们需要重新编写我们的<strong>后台程序</strong>,重新发布；<ul>
<li>停机维护</li>
</ul>
</li>
</ul>
<p>优点：</p>
<ul>
<li>Web页面可以动态更新，所有用户看到都不是同一个页面</li>
<li>它可以与数据库交互 （数据持久化：注册，商品信息，用户信息……..）</li>
</ul>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200220093025.png" alt=""></p>
<h1 id="2-Web服务器"><a href="#2-Web服务器" class="headerlink" title="2. Web服务器"></a>2. Web服务器</h1><h2 id="2-1-技术讲解"><a href="#2-1-技术讲解" class="headerlink" title="2.1 技术讲解"></a>2.1 技术讲解</h2><p><strong>ASP:</strong></p>
<ul>
<li>微软：国内最早流行的就是ASP;</li>
<li>在HTML中嵌入VB的脚本，ASP+COM;</li>
<li>在ASP开发中，基本一个页面都有几千行代码，页面极其混乱</li>
<li>维护成本高</li>
<li>C#</li>
<li>IIS （微软的容器）</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag">            <span class="attr">System.out.println</span>("<span class="attr">hello</span>")</span></span><br><span class="line"><span class="tag">            %&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>php：</strong></p>
<ul>
<li>PHP开发速度很快，功能很强大，跨平台，代码很简单 （70% , WordPress）</li>
<li>无法承载大访问量的情况（局限性）</li>
</ul>
<p><strong>JSP/Servlet</strong>:</p>
<p>B/S:  浏览和服务器</p>
<p>C/S：客户端和服务器</p>
<ul>
<li>sun公司主推B/S架构</li>
<li>基于Java语言 (所有的大公司，或者一些开源的组件，都是用Java写的)</li>
<li>可以承载三高问题带来的影响（高并发，高可用，高性能）</li>
<li>语法像ASP,ASP–&gt;JSP , 加强市场强度；</li>
</ul>
<h2 id="2-2-Web服务器"><a href="#2-2-Web服务器" class="headerlink" title="2.2 Web服务器"></a>2.2 Web服务器</h2><p><strong>服务器是一种被动的操作，用来处理用户的一些请求和给用户一些响应信息；</strong></p>
<p><strong>1. IIS</strong></p>
<p>微软的； ASP…,Windows中自带的</p>
<p><strong>2. Tomcat</strong></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200220094318.png" alt=""></p>
<ul>
<li>Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现，因为Tomcat 技术先进、性能稳定，而且<strong>免费</strong>，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的<strong>Web 应用服务器</strong>。</li>
<li>Tomcat 实际上运行JSP 页面和Servlet。Tomcat最新版本为<strong>9.0。</strong></li>
<li>Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于<strong>轻量级应用<a href="https://baike.baidu.com/item/服务器" target="_blank" rel="noopener">服务器</a></strong>，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。对于一个Java初学web的人来说，它是最佳的选择</li>
</ul>
<p>下载tomcat：</p>
<ol>
<li>安装 or  解压</li>
<li>了解配置文件及目录结构</li>
<li>这个东西的作用</li>
</ol>
<p><strong>工作3-5年之后，可以尝试手写Tomcat服务器；</strong></p>
<h1 id="3-Tomcat"><a href="#3-Tomcat" class="headerlink" title="3. Tomcat"></a>3. Tomcat</h1><h2 id="3-1-安装Tomcat"><a href="#3-1-安装Tomcat" class="headerlink" title="3.1 安装Tomcat"></a>3.1 安装Tomcat</h2><p>tomcat官网：<a href="http://tomcat.apache.org/" target="_blank" rel="noopener">http://tomcat.apache.org/</a></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200222095146.png" alt=""></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200222095203.png" alt=""></p>
<h2 id="3-2-Tomcat的启动和配置"><a href="#3-2-Tomcat的启动和配置" class="headerlink" title="3.2 Tomcat的启动和配置"></a>3.2 Tomcat的启动和配置</h2><p>文件夹作用：</p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200222095311.png" alt=""></p>
<p><strong>启动。关闭Tomcat</strong></p>
<p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200222095332756.png" alt="image-20200222095332756"></p>
<p><strong>访问测试：<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a></strong></p>
<p>可能遇到的问题：</p>
<ol>
<li>Java环境变量没有配置</li>
<li>闪退问题：需要配置兼容性</li>
<li>乱码问题：配置文件中设置</li>
</ol>
<h2 id="3-3-配置"><a href="#3-3-配置" class="headerlink" title="3.3 配置"></a>3.3 配置</h2><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200222095416.png" alt=""></p>
<p>可以配置启动的端口号</p>
<ul>
<li>tomcat的默认端口号为：8080</li>
<li>mysql：3306</li>
<li>http：80</li>
<li>https：443</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8081"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-4-高难度面试题"><a href="#3-4-高难度面试题" class="headerlink" title="3.4 高难度面试题"></a>3.4 高难度面试题</h2><p>请你谈谈网站是如何进行访问的！</p>
<ol>
<li><p>输入一个域名；回车</p>
</li>
<li><p>检查本机的 C:\Windows\System32\drivers\etc\hosts配置文件下有没有这个域名映射；</p>
<ul>
<li><p>有：直接返回对应的ip地址，这个地址中，有我们需要访问的web程序，可以直接访问</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>      www.zhuuu.com</span><br></pre></td></tr></table></figure>
</li>
<li><p>没有：去DNS服务器找，找到的话就返回，找不到就返回找不到；</p>
</li>
</ul>
</li>
</ol>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200222095631.png" alt=""></p>
<h2 id="3-5-发布一个网站"><a href="#3-5-发布一个网站" class="headerlink" title="3.5 发布一个网站"></a>3.5 发布一个网站</h2><p>不会就先模仿</p>
<ul>
<li>将自己写的网站，放到服务器(Tomcat)中指定的web应用的文件夹（webapps）下，就可以访问了</li>
</ul>
<h3 id="网站应该有的结构"><a href="#网站应该有的结构" class="headerlink" title="网站应该有的结构"></a>网站应该有的结构</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">--webapps ：Tomcat服务器的web目录</span><br><span class="line">	-ROOT</span><br><span class="line">	-kuangstudy ：网站的目录名</span><br><span class="line">		- WEB-INF</span><br><span class="line">			-classes : java程序</span><br><span class="line">			-lib：web应用所依赖的jar包</span><br><span class="line">			-web.xml ：网站配置文件</span><br><span class="line">		- index.html 默认的首页</span><br><span class="line">		- <span class="keyword">static</span> </span><br><span class="line">            -css</span><br><span class="line">            	-style.css</span><br><span class="line">            -js</span><br><span class="line">            -img</span><br><span class="line">         -.....</span><br></pre></td></tr></table></figure>

<h1 id="4-HTTP协议"><a href="#4-HTTP协议" class="headerlink" title="4. HTTP协议"></a>4. HTTP协议</h1><h2 id="4-1-什么是HTTP"><a href="#4-1-什么是HTTP" class="headerlink" title="4.1 什么是HTTP"></a>4.1 什么是HTTP</h2><p>HTTP（超文本传输协议）是一个简单的请求-响应协议，它通常运行在TCP之上。</p>
<ul>
<li>文本：html,字符串….</li>
<li>超文本：图片，音乐，视频，定位，地图</li>
<li>端口号：80</li>
</ul>
<p>Https：安全的HTTP</p>
<ul>
<li>端口号：443</li>
</ul>
<h2 id="4-2-两个时代"><a href="#4-2-两个时代" class="headerlink" title="4.2 两个时代"></a>4.2 两个时代</h2><ul>
<li><p>http1.0</p>
<ul>
<li>HTTP/1.0：客户端可以与web服务器连接后，只能获得一个web资源，断开连接</li>
</ul>
</li>
<li><p>http2.0</p>
<ul>
<li>HTTP/1.1：客户端可以与web服务器连接后，可以获得多个web资源</li>
</ul>
</li>
</ul>
<h2 id="4-3-HTTP请求"><a href="#4-3-HTTP请求" class="headerlink" title="4.3 HTTP请求"></a>4.3 HTTP请求</h2><ul>
<li>客户端—&gt;发送请求（Request）—&gt;服务器</li>
</ul>
<p>百度为例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//请求头</span></span><br><span class="line">Request URL:https:<span class="comment">//www.baidu.com/   请求地址</span></span><br><span class="line">Request Method:GET    get方法/post方法</span><br><span class="line">Status Code:<span class="number">200</span> OK    状态码：<span class="number">200</span></span><br><span class="line">Remote（远程） Address:<span class="number">14.215</span><span class="number">.177</span><span class="number">.39</span>:<span class="number">443</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Accept:text/html  </span><br><span class="line">Accept-Encoding:gzip, deflate, br</span><br><span class="line">Accept-Language:zh-CN,zh;q=<span class="number">0.9</span>    语言</span><br><span class="line">Cache-Control:max-age=<span class="number">0</span></span><br><span class="line">Connection:keep-alive</span><br></pre></td></tr></table></figure>

<ol>
<li>请求行<ul>
<li>请求行中的请求方式：GET</li>
<li>请求方式:<strong>GET,POST</strong>   HEAD,DELETE,PUT,TRACT…（CRUD)</li>
<li>GET 和 POST的区别<ul>
<li>GET:  请求能够携带的参数比较少，大小有限制，会在浏览器的URL地址栏中显示数据内容，不安全但高效</li>
<li>POST: 请求能够携带的参数比较多，大小没有限制，不会在浏览器的URL地址栏中显示数据内容，安全但不高效</li>
</ul>
</li>
</ul>
</li>
<li>消息头</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//消息头</span></span><br><span class="line">Accept：告诉浏览器，它所支持的数据类型</span><br><span class="line">Accept-Encoding：支持哪种编码格式  (GBK   UTF-<span class="number">8</span>   GB2312  ISO8859-<span class="number">1</span>)</span><br><span class="line">Accept-Language：告诉浏览器，它的语言环境</span><br><span class="line">Cache-Control：缓存控制</span><br><span class="line">Connection：告诉浏览器，请求完成是断开还是保持连接</span><br><span class="line">HOST：主机..../.</span><br></pre></td></tr></table></figure>

<h2 id="4-4-HTTP响应"><a href="#4-4-HTTP响应" class="headerlink" title="4.4 HTTP响应"></a>4.4 HTTP响应</h2><ul>
<li>服务器–&gt;响应–&gt;客户端</li>
</ul>
<p>百度示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cache-Control:<span class="keyword">private</span>    缓存控制</span><br><span class="line">Connection:Keep-Alive    连接</span><br><span class="line">Content-Encoding:gzip    编码</span><br><span class="line">Content-Type:text/html   类型</span><br></pre></td></tr></table></figure>

<ol>
<li>响应体</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Accept：告诉浏览器，它所支持的数据类型</span><br><span class="line">Accept-Encoding：支持哪种编码格式  GBK   UTF-<span class="number">8</span>   GB2312  ISO8859-<span class="number">1</span></span><br><span class="line">Accept-Language：告诉浏览器，它的语言环境</span><br><span class="line">Cache-Control：缓存控制</span><br><span class="line">Connection：告诉浏览器，请求完成是断开还是保持连接</span><br><span class="line">HOST：主机..../.</span><br><span class="line">Refresh：告诉客户端，多久刷新一次；</span><br><span class="line">Location：让网页重新定位；</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>响应状态码</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">200</span>:请求响应成功</span><br><span class="line"><span class="number">3</span>xx:请求重定向</span><br><span class="line">    - 重定向：你重新给我到你新位置去</span><br><span class="line"><span class="number">4</span>xx:找不到资源 <span class="number">404</span></span><br><span class="line">    - 资源不存在</span><br><span class="line"><span class="number">5</span>xx:服务器代码错误 <span class="number">500</span>   <span class="number">502</span>：网关错误</span><br></pre></td></tr></table></figure>



<h2 id="4-5-常见面试题"><a href="#4-5-常见面试题" class="headerlink" title="4.5 常见面试题"></a>4.5 常见面试题</h2><p>当你的浏览器中地址栏输入地址并回车的一瞬间到页面能够展示回来，经历了什么？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这道题目没有所谓的完全的正确答案，这个题目可以让你在任意的一个点深入下去， 只要你对这个点是熟悉的。以下是一个大概流程：</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>. 浏览器向DNS服务器查找输入URL对应的IP地址。</span><br><span class="line"><span class="number">2</span>. DNS服务器返回网站的IP地址。</span><br><span class="line"><span class="number">3</span>. 浏览器根据IP地址与目标web服务器在<span class="number">80</span>端口上建立TCP连接</span><br><span class="line"><span class="number">4</span>. 浏览器获取请求页面的html代码。</span><br><span class="line"><span class="number">5</span>. 浏览器在显示窗口内渲染HTML。</span><br><span class="line"><span class="number">6</span>. 窗口关闭时，浏览器终止与服务器的连接。</span><br><span class="line"></span><br><span class="line">这其中最有趣的是第<span class="number">1</span>步和第<span class="number">2</span>步(域名解析)。我们输入的网址(域名)是IP地址的一个别名， 在一个DNS内，一个域名对应一个IP地址。域名系统(DNS) 的工作就是将域名与它的IP地址对应起来。DNS是分布式的，同时也是具有层级关系的。</span><br><span class="line"></span><br><span class="line">一个域名服务器虽然只记录一个小的子网内的主机名和IP地址， 但所有的域名服务器联合起来工作，就能将全网内的域名与它们的IP地址对应起来。 这也就意味着，如果一个域名服务器无法找到某个请求域名所对应的IP地址， 它就会向其它的域名服务器发出请求进行寻找。</span><br></pre></td></tr></table></figure>

<h1 id="5-Maven"><a href="#5-Maven" class="headerlink" title="5. Maven"></a>5. Maven</h1><ol>
<li><p>作用：就是方便来导jar包的！</p>
</li>
<li><p>Maven的核心思想：<strong>约定大于配置</strong></p>
</li>
</ol>
<ul>
<li>有约束，不要去违反。</li>
<li>Maven会规定好你该如何去编写我们的Java代码，必须要按照这个规范来；</li>
</ul>
<h2 id="5-1-下载安装"><a href="#5-1-下载安装" class="headerlink" title="5.1 下载安装"></a>5.1 下载安装</h2><p>官网;<a href="https://maven.apache.org/" target="_blank" rel="noopener">https://maven.apache.org/</a></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200222111851.png" alt=""></p>
<p>下载完成后，解压即可；</p>
<h2 id="5-2-配置环境变量"><a href="#5-2-配置环境变量" class="headerlink" title="5.2 配置环境变量"></a>5.2 配置环境变量</h2><p>在我们的系统环境变量中</p>
<p>配置如下配置：</p>
<ul>
<li>M2_HOME     maven目录下的bin目录</li>
<li>MAVEN_HOME      maven的目录</li>
<li>在系统的path中配置  %MAVEN_HOME%\bin</li>
</ul>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200222111953.png" alt=""></p>
<h2 id="5-3-配置阿里云镜像"><a href="#5-3-配置阿里云镜像" class="headerlink" title="5.3 配置阿里云镜像"></a>5.3 配置阿里云镜像</h2><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200222112023.png" alt=""></p>
<ul>
<li>镜像：mirrors<ul>
<li>作用：加速我们的下载</li>
</ul>
</li>
<li>国内建议使用阿里云的镜像</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*,!jeecg,!jeecg-snapshots<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="5-4-配置本地仓库"><a href="#5-4-配置本地仓库" class="headerlink" title="5.4 配置本地仓库"></a>5.4 配置本地仓库</h2><ol>
<li><p>在本地的仓库，远程仓库；</p>
</li>
<li><p><strong>建立一个本地仓库：</strong>localRepository</p>
</li>
<li><p>然后在settings.xml配置如下：</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:\Environment\apache-maven-3.6.2\maven-repo<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="5-5-在IDEA中使用Maven"><a href="#5-5-在IDEA中使用Maven" class="headerlink" title="5.5 在IDEA中使用Maven"></a>5.5 在IDEA中使用Maven</h2><ol>
<li>启动IDEA</li>
<li>创建一个Maven项目</li>
</ol>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200222112237.png" alt=""></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200222112327.png" alt=""></p>
<ol start="3">
<li>等待项目初始化完毕</li>
</ol>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200222112437.png" alt=""></p>
<h2 id="5-6-标记文件夹的作用"><a href="#5-6-标记文件夹的作用" class="headerlink" title="5.6 标记文件夹的作用"></a>5.6 标记文件夹的作用</h2><p>直接鼠标右键标记：</p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200222112531.png" alt=""></p>
<p>同样也可以在项目结构中标记：</p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200222112616.png" alt=""></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200222112639.png" alt=""></p>
<h2 id="5-7-在IDEA中配置Tomcat"><a href="#5-7-在IDEA中配置Tomcat" class="headerlink" title="5.7 在IDEA中配置Tomcat"></a>5.7 在IDEA中配置Tomcat</h2><ol>
<li>右上角点击配置【一定要在一个WEB工程中】</li>
</ol>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200222112815.png" alt=""></p>
<ol start="2">
<li>点击加号</li>
</ol>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200222112839.png" alt=""></p>
<ol start="3">
<li>找到Tomcat</li>
</ol>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200222112857.png" alt=""></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200222112918.png" alt=""></p>
<p><strong>解决警告问题</strong></p>
<p>必须要的配置：<strong>为什么会有这个问题：我们访问一个网站，需要指定一个文件夹名字；</strong></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200222113018.png" alt=""></p>
<h2 id="5-8-pom-xml"><a href="#5-8-pom-xml" class="headerlink" title="5.8 pom,xml"></a>5.8 pom,xml</h2><p><strong>pom.xml 是Maven的核心配置文件</strong></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200222113054.png" alt=""></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--Maven版本和头文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--这里就是我们刚才配置的GAV--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhuuu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javaweb-01-maven<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--Package：项目的打包方式</span></span><br><span class="line"><span class="comment">  jar：java应用</span></span><br><span class="line"><span class="comment">  war：JavaWeb应用</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--配置--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--项目的默认构建编码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--编码版本--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--项目依赖--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--具体依赖的jar包配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--项目构建用的东西--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>javaweb-01-maven<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span><span class="comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-clean-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.22.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-install-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="5-9-Maven资源过滤的问题"><a href="#5-9-Maven资源过滤的问题" class="headerlink" title="5.9 Maven资源过滤的问题"></a>5.9 Maven资源过滤的问题</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">maven由于他的约定大于配置，我们之后可以能遇到我们写的配置文件，无法被导出或者生效的问题，解决方案：</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--在build中配置resources，来防止我们资源导出失败的问题--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="5-10-Maven目录树"><a href="#5-10-Maven目录树" class="headerlink" title="5.10 Maven目录树"></a>5.10 Maven目录树</h2><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200222113534.png" alt=""></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200222113551.png" alt=""></p>
<h2 id="5-11-可能遇到的遇到"><a href="#5-11-可能遇到的遇到" class="headerlink" title="5.11 可能遇到的遇到"></a>5.11 可能遇到的遇到</h2><ol>
<li>Maven 3.6.2</li>
</ol>
<p>​      解决方法：降级为3.6.1</p>
<ol start="2">
<li>maven默认web项目中的web.xml版本问题</li>
</ol>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200222113701.png" alt=""></p>
<p>​    解决方案：替换为webapp4.0版本和tomcat一致</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">metadata-complete</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="6-Servlet"><a href="#6-Servlet" class="headerlink" title="6. Servlet"></a>6. Servlet</h1><h2 id="6-1-Servlet简介"><a href="#6-1-Servlet简介" class="headerlink" title="6.1 Servlet简介"></a>6.1 Servlet简介</h2><ul>
<li>Servlet就是sun公司开发动态web的一门技术</li>
<li>Sun公司提供了一个接口叫做：Servlet,如果想开发一个Servlet程序，只需要完成下面两个步骤<ul>
<li><strong>编写一个类：实现servlet接口</strong></li>
<li><strong>把开发好的Java类部署到容器中</strong></li>
</ul>
</li>
</ul>
<p><strong>导入依赖：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="6-2-HelloServlet小程序"><a href="#6-2-HelloServlet小程序" class="headerlink" title="6.2 HelloServlet小程序"></a>6.2 HelloServlet小程序</h2><p>Serlvet接口Sun公司有两个默认的实现类：HttpServlet，GenericServlet </p>
<ol>
<li><p>构建一个普通的Maven项目，删掉里面的src目录，以后我们的学习就在这个项目里面建立Moudel；这个空的工程就是Maven主工程；</p>
</li>
<li><p>关于Maven父子工程的理解：</p>
<p>父项目中会有：(modules)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>servlet-01<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>子项目中会有：(parent)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javaweb-02-servlet<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhuuu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>父项目中的java子项目可以直接使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">son extends father</span><br></pre></td></tr></table></figure>
</li>
<li><p>Maven环境优化</p>
<ul>
<li>修改web.xml为最新的</li>
<li>将maven的结构搭建完整</li>
</ul>
</li>
<li><p><strong>编写一个Servlet程序</strong></p>
</li>
</ol>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200226092843.png" alt=""></p>
<ul>
<li>编写一个普通类</li>
<li>实现Servlet接口，这里我们直接集成HttpServlet</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//由于get或者post只是请求实现的不同的方式，可以相互调用，业务逻辑都一样；</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//ServletOutputStream outputStream = resp.getOutputStream();</span></span><br><span class="line">        PrintWriter writer = resp.getWriter(); <span class="comment">//响应流</span></span><br><span class="line">        writer.print(<span class="string">"Hello,Serlvet"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编写Servlet映射</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">metadata-complete</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.zhuuu.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>配置Tomcat<ul>
<li>注意：配置项目的发布路径就可以了</li>
</ul>
</li>
<li>启动测试，OK !</li>
</ul>
<h2 id="6-3-Servlet原理"><a href="#6-3-Servlet原理" class="headerlink" title="6.3 Servlet原理"></a>6.3 Servlet原理</h2><ul>
<li>Servlet是有WEB服务器调用，web服务器在收到浏览器请求会后，会做如下事情：</li>
</ul>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200226095331.png" alt=""></p>
<h2 id="6-4-Mapping-问题"><a href="#6-4-Mapping-问题" class="headerlink" title="6.4 Mapping 问题"></a>6.4 Mapping 问题</h2><ol>
<li>一个Servlet可以制定一个映射路径</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>一个Servlet可以指定多个映射路径</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello2<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello3<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello4<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello5<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>一个Servlet可以指定通用的映射路径</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>默认请求路径</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--默认请求路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>指定一些前缀后缀等等—-</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--可以自定义后实现请求映射</span></span><br><span class="line"><span class="comment">注意点：*前面不能加项目的映射路径</span></span><br><span class="line"><span class="comment">hello/sadasda.zhuuu--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.zhuuu<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li><p>优先级问题</p>
<p> 指定了固有的映射路径优先级最高，如果找不到才会走默认路径</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--404--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>error<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.zhuuu.servlet.ErrorServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>error<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="6-5-ServletContext"><a href="#6-5-ServletContext" class="headerlink" title="6.5 ServletContext"></a>6.5 ServletContext</h2><p>web容器在启动的时候，它会为每一个web程序都创建一个对应的ServletContext对象，它代表了当前Web应用</p>
<h3 id="6-5-1-共享数据"><a href="#6-5-1-共享数据" class="headerlink" title="6.5.1 共享数据"></a>6.5.1 共享数据</h3><p><strong>我们这个Servlet中保存的数据，可以在另外一个Servlet中拿到</strong></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200226102652.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//        this.getInitParameter()   初始化参数</span></span><br><span class="line"><span class="comment">//        this.getServletConfig()   Servlet配置</span></span><br><span class="line"><span class="comment">//        this.getServletContext()  获取Servlet上下文</span></span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line"></span><br><span class="line">        String username = <span class="string">"Zhuuu"</span>;</span><br><span class="line">        context.setAttribute(<span class="string">"username"</span>,username);</span><br><span class="line">        <span class="comment">//将一个数据保存在ServletContext中,名字是username,值username</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>声明另一个Servlet实现类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        String username = (String) context.getAttribute(<span class="string">"username"</span>);</span><br><span class="line"></span><br><span class="line">        resp.setContentType(<span class="string">"text/html"</span>);</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        resp.getWriter().print(<span class="string">"名字"</span>+username);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>xml配置：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.zhuuu.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>getc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.zhuuu.servlet.GetServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>getc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/getc<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>测试访问的结果~</strong></p>
<h3 id="6-5-2-获取初始化参数"><a href="#6-5-2-获取初始化参数" class="headerlink" title="6.5.2 获取初始化参数"></a>6.5.2 获取初始化参数</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置一些web应用初始化参数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>url<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>jdbc:mysql://localhost:3306/mybatis<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">    String url = context.getInitParameter(<span class="string">"url"</span>);</span><br><span class="line">    resp.getWriter().print(url);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-5-3-请求转发"><a href="#6-5-3-请求转发" class="headerlink" title="6.5.3 请求转发"></a>6.5.3 请求转发</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">    System.out.println(<span class="string">"进入了该方法"</span>);</span><br><span class="line">    <span class="comment">//RequestDispatcher requestDispatcher = context.getRequestDispatcher("/gp"); //转发的请求路径</span></span><br><span class="line">    <span class="comment">//requestDispatcher.forward(req,resp); //调用forward实现请求转发；</span></span><br><span class="line">    context.getRequestDispatcher(<span class="string">"/gp"</span>).forward(req.resp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200228101646.png" alt=""></p>
<h3 id="6-5-4-读取资源文件"><a href="#6-5-4-读取资源文件" class="headerlink" title="6.5.4 读取资源文件"></a>6.5.4 读取资源文件</h3><p>Properties</p>
<ul>
<li>在java目录下新建properties</li>
<li>在resources目录下新建properties</li>
</ul>
<p><strong>发现：都被打包到了同一个路径下：classes，我们俗称这个路径为classpath:</strong>（target中）</p>
<p><strong>思路：需要一个文件流；</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">username</span>=<span class="string">root12312</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">zxczxczxc</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo05</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        InputStream is = <span class="keyword">this</span>.getServletContext().getResourceAsStream(<span class="string">"/WEB-INF/classes/com/zhuuu/servlet/aa.properties"</span>);</span><br><span class="line">        <span class="comment">//1. 把相对路径的流读取进来</span></span><br><span class="line">        <span class="comment">//2. new Properties，然后load读取进来</span></span><br><span class="line">        <span class="comment">//3. prop.getProperte把properties属性加载进来</span></span><br><span class="line">        Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">        prop.load(is);</span><br><span class="line">        String user = prop.getProperty(<span class="string">"username"</span>);</span><br><span class="line">        String pwd = prop.getProperty(<span class="string">"password"</span>);</span><br><span class="line">        resp.getWriter().print(user+<span class="string">":"</span>pwd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-6-HttpServletResponse"><a href="#6-6-HttpServletResponse" class="headerlink" title="6.6 HttpServletResponse"></a>6.6 HttpServletResponse</h2><ul>
<li><p>web服务器收到客户端http请求，针对这个请求，分别创建一个代表请求的HttpServletRequest对象，代表响应的一个HttpServletResponse;</p>
</li>
<li><p>如果要<strong>获取客户端请求过来的参数</strong>：找HttpServletRequest</p>
</li>
<li><p>如果要<strong>给客户端响应一些信息</strong>：找HttpServletResponse</p>
</li>
</ul>
<h3 id="6-6-1-简单分类"><a href="#6-6-1-简单分类" class="headerlink" title="6.6.1 简单分类"></a>6.6.1 简单分类</h3><p><strong>负责向浏览器发送数据的方法：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. 字符流</span></span><br><span class="line"><span class="function">ServletOutPutStream <span class="title">getOutPutStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"><span class="comment">//2 writer</span></span><br><span class="line"><span class="function">PrintWriter <span class="title">getwriter</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br></pre></td></tr></table></figure>

<p><strong>负责向浏览器发送响应头的方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setCharacterEncoding</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setContentLength</span><span class="params">(<span class="keyword">int</span> var1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setContentLengthLong</span><span class="params">(<span class="keyword">long</span> var1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setContentType</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setDateHeader</span><span class="params">(String var1, <span class="keyword">long</span> var2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addDateHeader</span><span class="params">(String var1, <span class="keyword">long</span> var2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setHeader</span><span class="params">(String var1, String var2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addHeader</span><span class="params">(String var1, String var2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setIntHeader</span><span class="params">(String var1, <span class="keyword">int</span> var2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addIntHeader</span><span class="params">(String var1, <span class="keyword">int</span> var2)</span></span>;</span><br></pre></td></tr></table></figure>

<p><strong>响应的状态码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> SC_CONTINUE = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> SC_SWITCHING_PROTOCOLS = <span class="number">101</span>;</span><br><span class="line"><span class="keyword">int</span> SC_OK = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">int</span> SC_CREATED = <span class="number">201</span>;</span><br><span class="line"><span class="keyword">int</span> SC_ACCEPTED = <span class="number">202</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NON_AUTHORITATIVE_INFORMATION = <span class="number">203</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NO_CONTENT = <span class="number">204</span>;</span><br><span class="line"><span class="keyword">int</span> SC_RESET_CONTENT = <span class="number">205</span>;</span><br><span class="line"><span class="keyword">int</span> SC_PARTIAL_CONTENT = <span class="number">206</span>;</span><br><span class="line"><span class="keyword">int</span> SC_MULTIPLE_CHOICES = <span class="number">300</span>;</span><br><span class="line"><span class="keyword">int</span> SC_MOVED_PERMANENTLY = <span class="number">301</span>;</span><br><span class="line"><span class="keyword">int</span> SC_MOVED_TEMPORARILY = <span class="number">302</span>;</span><br><span class="line"><span class="keyword">int</span> SC_FOUND = <span class="number">302</span>;</span><br><span class="line"><span class="keyword">int</span> SC_SEE_OTHER = <span class="number">303</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NOT_MODIFIED = <span class="number">304</span>;</span><br><span class="line"><span class="keyword">int</span> SC_USE_PROXY = <span class="number">305</span>;</span><br><span class="line"><span class="keyword">int</span> SC_TEMPORARY_REDIRECT = <span class="number">307</span>;</span><br><span class="line"><span class="keyword">int</span> SC_BAD_REQUEST = <span class="number">400</span>;</span><br><span class="line"><span class="keyword">int</span> SC_UNAUTHORIZED = <span class="number">401</span>;</span><br><span class="line"><span class="keyword">int</span> SC_PAYMENT_REQUIRED = <span class="number">402</span>;</span><br><span class="line"><span class="keyword">int</span> SC_FORBIDDEN = <span class="number">403</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NOT_FOUND = <span class="number">404</span>;</span><br><span class="line"><span class="keyword">int</span> SC_METHOD_NOT_ALLOWED = <span class="number">405</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NOT_ACCEPTABLE = <span class="number">406</span>;</span><br><span class="line"><span class="keyword">int</span> SC_PROXY_AUTHENTICATION_REQUIRED = <span class="number">407</span>;</span><br><span class="line"><span class="keyword">int</span> SC_REQUEST_TIMEOUT = <span class="number">408</span>;</span><br><span class="line"><span class="keyword">int</span> SC_CONFLICT = <span class="number">409</span>;</span><br><span class="line"><span class="keyword">int</span> SC_GONE = <span class="number">410</span>;</span><br><span class="line"><span class="keyword">int</span> SC_LENGTH_REQUIRED = <span class="number">411</span>;</span><br><span class="line"><span class="keyword">int</span> SC_PRECONDITION_FAILED = <span class="number">412</span>;</span><br><span class="line"><span class="keyword">int</span> SC_REQUEST_ENTITY_TOO_LARGE = <span class="number">413</span>;</span><br><span class="line"><span class="keyword">int</span> SC_REQUEST_URI_TOO_LONG = <span class="number">414</span>;</span><br><span class="line"><span class="keyword">int</span> SC_UNSUPPORTED_MEDIA_TYPE = <span class="number">415</span>;</span><br><span class="line"><span class="keyword">int</span> SC_REQUESTED_RANGE_NOT_SATISFIABLE = <span class="number">416</span>;</span><br><span class="line"><span class="keyword">int</span> SC_EXPECTATION_FAILED = <span class="number">417</span>;</span><br><span class="line"><span class="keyword">int</span> SC_INTERNAL_SERVER_ERROR = <span class="number">500</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NOT_IMPLEMENTED = <span class="number">501</span>;</span><br><span class="line"><span class="keyword">int</span> SC_BAD_GATEWAY = <span class="number">502</span>;</span><br><span class="line"><span class="keyword">int</span> SC_SERVICE_UNAVAILABLE = <span class="number">503</span>;</span><br><span class="line"><span class="keyword">int</span> SC_GATEWAY_TIMEOUT = <span class="number">504</span>;</span><br><span class="line"><span class="keyword">int</span> SC_HTTP_VERSION_NOT_SUPPORTED = <span class="number">505</span>;</span><br></pre></td></tr></table></figure>

<h3 id="6-6-2-如何打造一个下载文件的response"><a href="#6-6-2-如何打造一个下载文件的response" class="headerlink" title="6.6.2 如何打造一个下载文件的response"></a>6.6.2 如何打造一个下载文件的response</h3><ol>
<li>向浏览器输出消息</li>
<li>下载文件<ul>
<li>要获取下载文件的路径</li>
<li>下载文件的名字叫啥</li>
<li>设置想办法让浏览器支持我们需要下载的东西</li>
<li>获取下载文件的输入流</li>
<li>创建缓冲区</li>
<li>获取OutputStream对象</li>
<li>将FileOutputStream流写入到buffer缓冲区</li>
<li>使用OutPutStream将缓冲区中的数据输出到客户端</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuuu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">download</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 要获取下载文件的路径</span></span><br><span class="line">        String realPath = <span class="string">"这里是一个绝对路径"</span>;</span><br><span class="line">        System.out.println(<span class="string">"下载文件的路径："</span>+realPath);</span><br><span class="line">        <span class="comment">// 2. 下载的文件名是啥？</span></span><br><span class="line">        String fileName = realPath.substring(realPath.lastIndexOf(<span class="string">"\\"</span>) + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 3. 设置想办法让浏览器能够支持(Content-Disposition)下载我们需要的东西,中文文件名URLEncoder.encode编码，否则有可能乱码</span></span><br><span class="line">        resp.setHeader(<span class="string">"Content-Disposition"</span>,<span class="string">"attachment;filename="</span>+URLEncoder.encode(fileName,<span class="string">"UTF-8"</span>));</span><br><span class="line">        <span class="comment">// 4. 获取下载文件的输入流</span></span><br><span class="line">        FileInputStream in = <span class="keyword">new</span> FileInputStream(realPath);</span><br><span class="line">        <span class="comment">// 5. 创建缓冲区</span></span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="comment">// 6. 获取OutputStream对象</span></span><br><span class="line">        ServletOutputStream out = resp.getOutputStream();</span><br><span class="line">        <span class="comment">// 7. 将FileOutputStream流写入到buffer缓冲区,使用OutputStream将缓冲区中的数据输出到客户端！</span></span><br><span class="line">        <span class="keyword">while</span> ((len=in.read(buffer))&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            out.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        in.close();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-6-3-验证码功能"><a href="#6-6-3-验证码功能" class="headerlink" title="6.6.3 验证码功能"></a>6.6.3 验证码功能</h3><p>动态刷新生成网页验证码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuuu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如何让浏览器3秒自动刷新一次;</span></span><br><span class="line">        resp.setHeader(<span class="string">"refresh"</span>,<span class="string">"3"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在内存中创建一个图片</span></span><br><span class="line">        BufferedImage image = <span class="keyword">new</span> BufferedImage(<span class="number">80</span>,<span class="number">20</span>,BufferedImage.TYPE_INT_RGB);</span><br><span class="line">        <span class="comment">//得到图片</span></span><br><span class="line">        Graphics2D g = (Graphics2D) image.getGraphics(); <span class="comment">//笔</span></span><br><span class="line">        <span class="comment">//设置图片的背景颜色</span></span><br><span class="line">        g.setColor(Color.white);</span><br><span class="line">        g.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">80</span>,<span class="number">20</span>);</span><br><span class="line">        <span class="comment">//给图片写数据</span></span><br><span class="line">        g.setColor(Color.BLUE);</span><br><span class="line">        g.setFont(<span class="keyword">new</span> Font(<span class="keyword">null</span>,Font.BOLD,<span class="number">20</span>));</span><br><span class="line">        g.drawString(makeNum(),<span class="number">0</span>,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//告诉浏览器，这个请求用图片的方式打开</span></span><br><span class="line">        resp.setContentType(<span class="string">"image/jpeg"</span>);</span><br><span class="line">        <span class="comment">//网站存在缓存，不让浏览器缓存</span></span><br><span class="line">        resp.setDateHeader(<span class="string">"expires"</span>,-<span class="number">1</span>);</span><br><span class="line">        resp.setHeader(<span class="string">"Cache-Control"</span>,<span class="string">"no-cache"</span>);</span><br><span class="line">        resp.setHeader(<span class="string">"Pragma"</span>,<span class="string">"no-cache"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把图片写给浏览器</span></span><br><span class="line">        ImageIO.write(image,<span class="string">"jpg"</span>, resp.getOutputStream());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成随机数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">makeNum</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        String num = random.nextInt(<span class="number">9999999</span>) + <span class="string">""</span>;</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>-num.length() ; i++) &#123;</span><br><span class="line">            sb.append(<span class="string">"0"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        num = sb.toString() + num;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-6-4-实现重定向"><a href="#6-6-4-实现重定向" class="headerlink" title="6.6.4 实现重定向"></a>6.6.4 实现重定向</h3><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200229215011.png" alt=""></p>
<p>B的一个web资源收到客户端A的请求后，B他会通知A客户端去访问另外一个Web资源C,这个过程叫重定向</p>
<p><strong>常见场景：</strong></p>
<ul>
<li>用户登录</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sendRedirect</span><span class="params">(String var1)</span> <span class="keyword">throws</span> IOException</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>测试：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedictServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String username = req.getParameter(<span class="string">"username"</span>);</span><br><span class="line">        String password = req.getParameter(<span class="string">"password"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(username + <span class="string">":"</span> + password);</span><br><span class="line">        <span class="comment">//重定向的时候一定要注意，路径问题，否则会404</span></span><br><span class="line">        resp.sendRedirect(<span class="string">"/redirect.jsp"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>面试题：说说重定向和转发的区别？</p>
<ul>
<li>相同点：页面都会实现跳转</li>
<li>不同点：<ul>
<li>请求转发的时候，url不会发生变化</li>
<li>重定向的时候，url会发生变化</li>
</ul>
</li>
</ul>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200229215412.png" alt=""></p>
<h3 id="6-6-5-简单实现重定向功能"><a href="#6-6-5-简单实现重定向功能" class="headerlink" title="6.6.5 简单实现重定向功能"></a>6.6.5 简单实现重定向功能</h3><ol>
<li>index.jsp改为</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"$&#123;pageContext.request.contextPath&#125;/login"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></span><br><span class="line">        用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        密码：  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>重定向函数编写</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">//处理请求</span></span><br><span class="line">    String username = req.getParameter(<span class="string">"username"</span>);</span><br><span class="line">    String password = req.getParameter(<span class="string">"password"</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(username+<span class="string">":"</span>+password);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重定向时候一定要注意，路径问题，否则404；</span></span><br><span class="line">    resp.sendRedirect(<span class="string">"/r/success.jsp"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>配置web.xml</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>requset<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.zhuuu.servlet.RequestTest<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>requset<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/login<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>编写重定向后的页面</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;Success&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="6-7-HttpServletRequest"><a href="#6-7-HttpServletRequest" class="headerlink" title="6.7 HttpServletRequest"></a>6.7 HttpServletRequest</h2><ul>
<li>HttpServletRequest代表<strong>客户端的请求</strong>，用户通过Http协议访问服务器，Http请求中所有的信息会被封装到HttpServletRequest，通过这个HttpServletRequest方法，获取客户端所有的信息。</li>
</ul>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200301094350.png" alt=""></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200301094414.png" alt=""></p>
<p><strong>获取参数，请求转发</strong></p>
<ol>
<li>编写转发request</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//处理编码的问题</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//处理接收的问题</span></span><br><span class="line">        String username = req.getParameter(<span class="string">"username"</span>);</span><br><span class="line">        String password = req.getParameter(<span class="string">"password"</span>);</span><br><span class="line">        String[] hobbys = req.getParameterValues(<span class="string">"hobbys"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"==================="</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//后台输入</span></span><br><span class="line">        System.out.println(username);</span><br><span class="line">        System.out.println(password);</span><br><span class="line">        System.out.println(Arrays.toString(hobbys));</span><br><span class="line">        System.out.println(<span class="string">"==============="</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(req.getContextPath());</span><br><span class="line">        <span class="comment">//通过请求转发  （注意这里的/ 相当于当前路径）</span></span><br><span class="line">        req.getRequestDispatcher(<span class="string">"/success.jsp"</span>).forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>success.jsp</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;Success&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>index.jsp</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/login"</span> method=<span class="string">"get"</span>&gt;</span><br><span class="line">    用户名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span>&gt; <span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line">    密码：  &lt;input type="password" name="password"&gt; &lt;br&gt;</span><br><span class="line">    &lt;input type="submit"&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>web.xml</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">metadata-complete</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>/request<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.zhuuu.RequestServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>/request<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/login<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>面试题：请你聊聊重定向和转发的区别？</strong></p>
<p>相同点</p>
<ul>
<li>页面都会实现跳转</li>
</ul>
<p>不同点</p>
<ul>
<li>请求转发的时候，url不会产生变化   307</li>
<li>重定向时候，url地址栏会发生变化； 302</li>
</ul>
<h1 id="7-Cookie、Session"><a href="#7-Cookie、Session" class="headerlink" title="7. Cookie、Session"></a>7. Cookie、Session</h1><h2 id="7-1-会话"><a href="#7-1-会话" class="headerlink" title="7.1 会话"></a>7.1 会话</h2><p><strong>会话</strong>：用户<strong>打开一个浏览器</strong>，点击了很多超链接，访问了多个web资源，<strong>关闭浏览器</strong>，这个过程可以称之为会话。</p>
<p><strong>一个网站，怎么证明你来过？</strong></p>
<p>客户端              服务器</p>
<ol>
<li>服务器给客户端一个信件，客户端下次访问服务端带上新建就可以了；cookie</li>
<li>服务器登记你来过了，下次你来的时候我来匹配你：session</li>
</ol>
<h2 id="7-2-保存会话的两种技术"><a href="#7-2-保存会话的两种技术" class="headerlink" title="7.2 保存会话的两种技术"></a>7.2 保存会话的两种技术</h2><p><strong>cookie</strong></p>
<ul>
<li>客户端技术（请求，响应）</li>
</ul>
<p><strong>session</strong></p>
<ul>
<li><p>服务端技术，利用这个技术，可以把信息和数据放在Session中。</p>
<p>常见应用：网站登录之后，你下次不用再登录了，第二次访问直接就上去了！</p>
</li>
</ul>
<h2 id="7-3-Cookie"><a href="#7-3-Cookie" class="headerlink" title="7.3 Cookie"></a>7.3 Cookie</h2><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200303174147.png" alt=""></p>
<ol>
<li>从请求中拿到cookie的信息</li>
<li>服务端响应给客户端cookie</li>
</ol>
<p><strong>用法总结：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Cookie,服务端从客户端获取</span></span><br><span class="line">Cookie[] cookies = req.getCookies();<span class="comment">//这里返回数组，说明cookie可能存在多个</span></span><br><span class="line"></span><br><span class="line">cookie.getName(); <span class="comment">//获得cookie中的key</span></span><br><span class="line">cookie.getValue(); <span class="comment">//获得cookie中的vlaue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Cookie(<span class="string">"lastLoginTime"</span>, System.currentTimeMillis()+<span class="string">""</span>); <span class="comment">//新建一个cookie</span></span><br><span class="line"></span><br><span class="line">cookie.setMaxAge(<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>); <span class="comment">//设置cookie的有效期</span></span><br><span class="line">resp.addCookie(cookie); <span class="comment">//服务器响应给客户端一个cookie</span></span><br></pre></td></tr></table></figure>





<p><strong>1. CookieDemo01</strong></p>
<p>步骤一：编写java类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解决中文乱码</span></span><br><span class="line">    req.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">    resp.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    PrintWriter out = resp.getWriter();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Cookie,服务端从客户端获取</span></span><br><span class="line">    Cookie[] cookies = req.getCookies();<span class="comment">//这里返回数组，说明cookie可能存在多个</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断Cookie是否存在</span></span><br><span class="line">    <span class="keyword">if</span>(cookies!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="comment">//如果存在怎么办</span></span><br><span class="line">        out.write(<span class="string">"你上一次访问的时间是:"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cookies.length; i++) &#123;</span><br><span class="line">            Cookie cookie = cookies[i];</span><br><span class="line">            <span class="comment">//获取cookie的名字</span></span><br><span class="line">            <span class="keyword">if</span> (cookie.getName().equals(<span class="string">"LastLoginTime"</span>))&#123;</span><br><span class="line">                <span class="comment">//获取cookie中的值</span></span><br><span class="line">                <span class="keyword">long</span> LastLoginTime = Long.parseLong(cookie.getValue());</span><br><span class="line">                Date date = <span class="keyword">new</span> Date(LastLoginTime);</span><br><span class="line">                out.write(date.toLocaleString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        out.write(<span class="string">"这是你第一次访问本站"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//服务器给客户端响应一个cookie</span></span><br><span class="line">    resp.addCookie(<span class="keyword">new</span> Cookie(<span class="string">"LastLoginTime"</span>,System.currentTimeMillis()+<span class="string">""</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>步骤二：之后注册Servlet</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">metadata-complete</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>CookieDemo01<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.zhuuu.CookieDemo01<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>CookieDemo01<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/c1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>一个网站cookie是否存在上限！<strong>聊聊细节问题</strong></p>
<ul>
<li>一个Cookie只能保存一个信息；</li>
<li>一个web站点可以给浏览器发送多个cookie，最多存放20个cookie；</li>
<li>Cookie大小有限制4kb；</li>
<li>300个cookie浏览器上限</li>
</ul>
<p>删除Cookie:</p>
<ul>
<li>不设置有效期，关闭浏览器，自动失效</li>
<li>设置有效期时间为</li>
</ul>
<p>编码解码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">URLEncoder.encode(<span class="string">"zhuuu"</span>,<span class="string">"utf-8"</span>)</span><br><span class="line">URLDecoder.decode(cookie.getValue(),<span class="string">"UTF-8"</span>)</span><br></pre></td></tr></table></figure>



<h2 id="7-4-Session-重点"><a href="#7-4-Session-重点" class="headerlink" title="7.4 Session(重点)"></a>7.4 Session(重点)</h2><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200303194047.png" alt=""></p>
<p>什么是Session？</p>
<ul>
<li>服务器会给每一个用户（浏览器）创建一个Session对象</li>
<li>一个Session独占一个浏览器，只要浏览器没有关闭，这个Session就存在</li>
<li>用户登录之后，整个网站它都可以访问–》保存信息，保存购物车信息</li>
</ul>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200303194448.png" alt=""></p>
<p><strong>Session和Cookie的区别</strong></p>
<ul>
<li>Cookie是把用户的数据写给用户的浏览器，浏览器保存（可以保存多个）</li>
<li>Session把用户的数据写到用户独占Session中，服务器端保存（保存重要的信息，减少服务器资源的浪费）</li>
<li>Session对象有服务器端创建</li>
</ul>
<p><strong>使用场景</strong></p>
<ul>
<li>保存一个用户登录的信息</li>
<li>淘宝购物车的信息</li>
<li>在整个网站中经常会使用到的数据，我们将它保存在Session中</li>
</ul>
<p><strong>Session原理</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//session创建的时候做了什么事情(本质上)</span></span><br><span class="line">Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"Jsessionid"</span>,<span class="string">"session"</span>);</span><br><span class="line">resp.addCookie(cookie);</span><br></pre></td></tr></table></figure>



<p><strong>SessionDemo01：创建Session</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">//解决乱码问题</span></span><br><span class="line">    resp.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">    req.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">    resp.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//得到session</span></span><br><span class="line">    HttpSession session = req.getSession();</span><br><span class="line">    <span class="comment">//给Session中存东西</span></span><br><span class="line">    session.setAttribute(<span class="string">"name"</span>,<span class="keyword">new</span> Person(<span class="string">"zhuuu"</span>,<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取Session的id</span></span><br><span class="line">    String id = session.getId();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断Session是不是新创建的</span></span><br><span class="line">    <span class="keyword">if</span> (session.isNew())&#123;</span><br><span class="line">        resp.getWriter().write(<span class="string">"创建成功"</span> + id);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        resp.getWriter().write(<span class="string">"已经存在了sessionid"</span> + id);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>SessionDemo02:手动删除Session</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionDemo02</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        HttpSession session = req.getSession();</span><br><span class="line"></span><br><span class="line">        Person person = (Person) session.getAttribute(<span class="string">"name"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(person.toString());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//手动删除session</span></span><br><span class="line">        session.removeAttribute(<span class="string">"name"</span>);</span><br><span class="line">        <span class="comment">//注销session</span></span><br><span class="line">        session.invalidate();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p><strong>不同浏览器的sessionid不一样</strong></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200303200802.png" alt=""></p>
<p><strong>web.xml中可以配置session的失效时间</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置session的失效时间：15分钟--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>15<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure>







<h1 id="8-JSP"><a href="#8-JSP" class="headerlink" title="8. JSP"></a>8. JSP</h1><h2 id="8-1-什么是JSP"><a href="#8-1-什么是JSP" class="headerlink" title="8.1 什么是JSP?"></a>8.1 什么是JSP?</h2><p>Java Server Pages:Java服务端页面，也和Servlet一样，用于动态web技术</p>
<p>最大的特点：</p>
<ul>
<li>写JSP就像在写HTML</li>
<li>区别：<ul>
<li>HTML只给用户提供静态的数据</li>
<li>JSP页面中可以嵌入Java代码，为用户提供动态的数据</li>
</ul>
</li>
</ul>
<h2 id="8-2-JSP原理"><a href="#8-2-JSP原理" class="headerlink" title="8.2 JSP原理"></a>8.2 JSP原理</h2><p>思路：JSP到底是怎么执行的！</p>
<ul>
<li>代码层面没有任何问题</li>
<li>服务器内部工作</li>
</ul>
<p>tomcat中有一个work目录：</p>
<p>IDEA中使用Tomcat会在IDEA的tomcat中生产一个work目录</p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200305135931.png" alt=""></p>
<p>电脑地址：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">C:\Users\Administrator\.IntelliJIdea2019.1\system\tomcat\Tomcat_9_0_31_JSP-study\work\Catalina\localhost\ROOT\org\apache\jsp</span></span><br></pre></td></tr></table></figure>



<p><strong>本质上：浏览器向服务器发送请求，不管访问什么资源，其实都是在访问Servlet!</strong></p>
<ul>
<li>JSP最终也会被转换成一个java类！</li>
<li>JSP本质上就是一个Servlet</li>
</ul>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200305140133.png" alt=""></p>
<h2 id="8-3-JSP内置方法"><a href="#8-3-JSP内置方法" class="headerlink" title="8.3 JSP内置方法"></a>8.3 JSP内置方法</h2><ol>
<li>判断请求</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">_jspInit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      </span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//销毁</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">_jspDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//JSPService</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">_jspService</span><span class="params">(.HttpServletRequest request,HttpServletResponse response)</span></span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>内置一些对象</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">final</span> javax.servlet.jsp.PageContext pageContext; <span class="comment">//页面上下文</span></span><br><span class="line">   javax.servlet.http.HttpSession session = <span class="keyword">null</span>;   <span class="comment">// session</span></span><br><span class="line">   <span class="keyword">final</span> javax.servlet.ServletContext application; <span class="comment">//applicationContext</span></span><br><span class="line">   <span class="keyword">final</span> javax.servlet.ServletConfig config;   <span class="comment">//config</span></span><br><span class="line">   javax.servlet.jsp.JspWriter out = <span class="keyword">null</span>;     <span class="comment">//out</span></span><br><span class="line">   <span class="keyword">final</span> java.lang.Object page = <span class="keyword">this</span>;         <span class="comment">//page：当前</span></span><br><span class="line"> HttpServletRequest request                        <span class="comment">//请求</span></span><br><span class="line">HttpServletResponse response                      <span class="comment">//响应</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>输出页面前增加的代码</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>); <span class="comment">// 设置响应的页面类型</span></span><br><span class="line">pageContext = _jspxFactory.getPageContext(<span class="keyword">this</span>, request, response,</span><br><span class="line">                                          <span class="keyword">null</span>, <span class="keyword">true</span>, <span class="number">8192</span>, <span class="keyword">true</span>);</span><br><span class="line">_jspx_page_context = pageContext;</span><br><span class="line">application = pageContext.getServletContext();</span><br><span class="line">config = pageContext.getServletConfig();</span><br><span class="line">session = pageContext.getSession();</span><br><span class="line">out = pageContext.getOut();</span><br><span class="line">_jspx_out = out;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>以上的这些个对象我们可以在JSP页面中直接使用</li>
</ol>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200305140530.png" alt=""></p>
<p>在JSP页面中：</p>
<p>只要是Java代码就会原封不动的输出：<br>如果是HTML代码，就会被转换为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">out.write(<span class="string">"&lt;html&gt;\r\n"</span>);</span><br></pre></td></tr></table></figure>

<p>这样的格式，输出到前端！</p>
<h2 id="8-4-JSP的语法"><a href="#8-4-JSP的语法" class="headerlink" title="8.4 JSP的语法"></a>8.4 JSP的语法</h2><p>任何语言都有自己的语法，JAVA中有,。 JSP 作为java技术的一种应用，它拥有一些自己扩充的语法（了解，知道即可！），Java所有语法都支持！</p>
<ol>
<li>JSP表达式</li>
</ol>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--JSP表达式</span><br><span class="line">作用：用来将程序的输出，输出到客户端</span><br><span class="line">&lt;%= 变量或者表达式%&gt;</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%= <span class="keyword">new</span> java.util.Date()%&gt;</span><br></pre></td></tr></table></figure>



<ol start="2">
<li>JSP脚本片段</li>
</ol>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;%--jsp脚本片段--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">  <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=<span class="number">100</span> ; i++) &#123;</span><br><span class="line">    sum+=i;</span><br><span class="line">  &#125;</span><br><span class="line">  out.println(<span class="string">"&lt;h1&gt;Sum="</span>+sum+<span class="string">"&lt;/h1&gt;"</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//相当于同一个方法中不能定义两个相同的变量  </span></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line">    out.println(x);</span><br><span class="line">  %&gt;</span><br><span class="line">  &lt;p&gt;这是一个JSP文档&lt;/p&gt;</span><br><span class="line">  &lt;%</span><br><span class="line">    <span class="keyword">int</span> y = <span class="number">2</span>;</span><br><span class="line">    out.println(y);</span><br><span class="line">  %&gt;</span><br><span class="line"></span><br><span class="line">  &lt;hr&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;%--在代码嵌入HTML元素--%&gt;</span><br><span class="line">  &lt;%</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  %&gt;</span><br><span class="line">    &lt;h1&gt;Hello,World  &lt;%=i%&gt; &lt;/h1&gt;</span><br><span class="line">  &lt;%</span><br><span class="line">    &#125;</span><br><span class="line">  %&gt;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>JSP声明(用&lt;!%—-%&gt;进行声明)</li>
</ol>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%!</span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">"Loading Servlet!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> globalVar = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">kuang</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"进入了方法Kuang！"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p>区别：</p>
<p>JSP声明：会被编译到JSP生成的Java类中，其他的会被生成到_jspService方法中</p>
<p>JSP的注释，不会在客户端显示，HTML就会！</p>
<h2 id="8-5-JSP的指令"><a href="#8-5-JSP的指令" class="headerlink" title="8.5 JSP的指令"></a>8.5 JSP的指令</h2><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> args.... %&gt;</span><br><span class="line">&lt;%<span class="meta">@include</span> file=<span class="string">""</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--<span class="meta">@include</span>会将两个页面合二为一--%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%<span class="meta">@include</span> file=<span class="string">"common/header.jsp"</span>%&gt;</span><br><span class="line">&lt;h1&gt;网页主体&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;%<span class="meta">@include</span> file=<span class="string">"common/footer.jsp"</span>%&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;%--jSP标签</span><br><span class="line">    jsp:include：拼接页面，本质还是三个</span><br><span class="line">    --%&gt;</span><br><span class="line">&lt;jsp:include page=<span class="string">"/common/header.jsp"</span>/&gt;</span><br><span class="line">&lt;h1&gt;网页主体&lt;/h1&gt;</span><br><span class="line">&lt;jsp:include page=<span class="string">"/common/footer.jsp"</span>/&gt;</span><br></pre></td></tr></table></figure>



<h2 id="8-6-九大内置对象"><a href="#8-6-九大内置对象" class="headerlink" title="8.6 九大内置对象"></a>8.6 九大内置对象</h2><ul>
<li>pageContext     存东西</li>
<li>Request             存东西</li>
<li>Response</li>
<li>Session              存东西</li>
<li>Applicaiton 【ServletContext】 存东西</li>
<li>config【ServletConfig】</li>
<li>out 【writer】</li>
<li>page  不用了解</li>
<li>exception </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">pageContext.setAttribute(<span class="string">"name1"</span>,<span class="string">"1号"</span>); <span class="comment">//保存的数据只在一个页面中有效</span></span><br><span class="line">request.setAttribute(<span class="string">"name2"</span>,<span class="string">"2号"</span>); <span class="comment">//保存的数据只在一次请求中有效，请求转发会携带这个数据</span></span><br><span class="line">session.setAttribute(<span class="string">"name3"</span>,<span class="string">"3号"</span>); <span class="comment">//保存的数据只在一次会话中有效，从打开浏览器到关闭浏览器</span></span><br><span class="line">application.setAttribute(<span class="string">"name4"</span>,<span class="string">"4号"</span>);  <span class="comment">//保存的数据只在服务器中有效，从打开服务器到关闭服务器</span></span><br></pre></td></tr></table></figure>

<p>request:客户端向服务器发送请求，用户看完就没用了</p>
<p>session:客户端向服务器发送请求，产生的数据，用户用玩一会还有用</p>
<p>application:客户端向服务器发送请求,产生的数据，一个用户用完了，其他用户还可能使用</p>
<h2 id="8-7-JSP标签，JSTL表达式，EL表达式"><a href="#8-7-JSP标签，JSTL表达式，EL表达式" class="headerlink" title="8.7 JSP标签，JSTL表达式，EL表达式"></a>8.7 JSP标签，JSTL表达式，EL表达式</h2><ol>
<li>首先要导入依赖</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- JSTL表达式的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp.jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- standard标签库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>standard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>EL表达式: <strong>${}</strong></li>
</ol>
<ul>
<li><strong>获取数据</strong></li>
<li><strong>执行运算</strong></li>
<li><strong>获取web开发的常用对象</strong></li>
</ul>
<ol start="3">
<li>JSP标签</li>
</ol>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%--jsp:include--%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--</span><br><span class="line">http:<span class="comment">//localhost:8080/jsptag.jsp?name=zhuuu&amp;age=12</span></span><br><span class="line">--%&gt;</span><br><span class="line"></span><br><span class="line">&lt;jsp:forward page=<span class="string">"/jsptag2.jsp"</span>&gt;</span><br><span class="line">    &lt;jsp:param name="name" value="zhuuu"&gt;&lt;/jsp:param&gt;</span><br><span class="line">    &lt;jsp:param name="age" value="12"&gt;&lt;/jsp:param&gt;</span><br><span class="line">&lt;/jsp:forward&gt;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>JSTL表达式</li>
</ol>
<p>JSTL标签库的使用就是为了弥补HTML标签的不足！它自定义了许多标签，可以供我们使用，标签的功能和Java代码一样！</p>
<p><strong>格式化标签</strong></p>
<p><strong>SQL标签</strong></p>
<p><strong>XML 标签</strong></p>
<p><strong>核心标签</strong> （掌握部分）</p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200305142314.png" alt=""></p>
<ol start="5">
<li>JSTL标签库的使用步骤</li>
</ol>
<ul>
<li>引入对应的taglib</li>
<li>使用其中的方法</li>
<li>在Tomcat中也需要引入jstl的包，否则会报错：JSTL解析错误</li>
</ul>
<p><strong>5.1 c- if</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;h4&gt;if测试&lt;/h4&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">"coreif.jsp"</span> method=<span class="string">"get"</span>&gt;</span><br><span class="line">    &lt;%--</span><br><span class="line">    EL表达式获取表单中的数据</span><br><span class="line">    $&#123;param.参数名&#125;</span><br><span class="line">    --%&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span> value=<span class="string">"$&#123;param.username&#125;"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"登录"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--判断如果提交的用户名是管理员，则登录成功--%&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123;param.username=='admin'&#125;"</span> <span class="keyword">var</span>=<span class="string">"isAdmin"</span>&gt;</span><br><span class="line">    &lt;c:out value=<span class="string">"管理员欢迎您！"</span>/&gt;</span><br><span class="line">&lt;/c:if&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--自闭合标签--%&gt;</span><br><span class="line">&lt;c:out value=<span class="string">"$&#123;isAdmin&#125;"</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>



<p><strong>5.2 c:choose when</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--定义一个变量score，值为<span class="number">85</span>--%&gt;</span><br><span class="line">&lt;c:set <span class="keyword">var</span>=<span class="string">"score"</span> value=<span class="string">"55"</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:choose&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">"$&#123;score&gt;=90&#125;"</span>&gt;</span><br><span class="line">        你的成绩为优秀</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">"$&#123;score&gt;=80&#125;"</span>&gt;</span><br><span class="line">        你的成绩为一般</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">"$&#123;score&gt;=70&#125;"</span>&gt;</span><br><span class="line">        你的成绩为良好</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">"$&#123;score&lt;=60&#125;"</span>&gt;</span><br><span class="line">        你的成绩为不及格</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">&lt;/c:choose&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>



<p><strong>5.3 c:forEach</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    ArrayList&lt;String&gt; people = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    people.add(<span class="number">0</span>,<span class="string">"张三"</span>);</span><br><span class="line">    people.add(<span class="number">1</span>,<span class="string">"李四"</span>);</span><br><span class="line">    people.add(<span class="number">2</span>,<span class="string">"王五"</span>);</span><br><span class="line">    people.add(<span class="number">3</span>,<span class="string">"赵六"</span>);</span><br><span class="line">    people.add(<span class="number">4</span>,<span class="string">"田六"</span>);</span><br><span class="line">    request.setAttribute(<span class="string">"list"</span>,people);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--</span><br><span class="line"><span class="keyword">var</span> , 每一次遍历出来的变量</span><br><span class="line">items, 要遍历的对象</span><br><span class="line">begin,   哪里开始</span><br><span class="line">end,     到哪里</span><br><span class="line">step,   步长</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;c:forEach <span class="keyword">var</span>=<span class="string">"people"</span> items=<span class="string">"$&#123;list&#125;"</span>&gt;</span><br><span class="line">    &lt;c:out value=<span class="string">"$&#123;people&#125;"</span>/&gt; &lt;br&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:forEach <span class="keyword">var</span>=<span class="string">"people"</span> items=<span class="string">"$&#123;list&#125;"</span> begin=<span class="string">"1"</span> end=<span class="string">"3"</span> step=<span class="string">"1"</span> &gt;</span><br><span class="line">    &lt;c:out value=<span class="string">"$&#123;people&#125;"</span>/&gt; &lt;br&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure>



<h1 id="9-JavaBean"><a href="#9-JavaBean" class="headerlink" title="9. JavaBean"></a>9. JavaBean</h1><p><strong>实体类</strong></p>
<p>JavaBean有特定的写法</p>
<ul>
<li>必须要有一个无参构造</li>
<li>属性必须私有化</li>
<li>必须有对应的get/set方法</li>
</ul>
<p><strong>一般是用来和数据库对象的字段做映射：ORM(对象关系映射)</strong></p>
<ul>
<li>表 –》类</li>
<li>字段—》属性</li>
<li>行记录 –》对象</li>
</ul>
<p><strong>People表</strong></p>
<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
<th>age</th>
<th>address</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>1号</td>
<td>3</td>
<td>南京</td>
</tr>
<tr>
<td>2</td>
<td>2号</td>
<td>18</td>
<td>南京</td>
</tr>
<tr>
<td>3</td>
<td>3号</td>
<td>100</td>
<td>南京</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span></span>&#123; <span class="comment">//表--》类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id; <span class="comment">//字段</span></span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//字段</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;<span class="comment">//字段</span></span><br><span class="line">    <span class="keyword">private</span> String address;<span class="comment">//字段</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">new</span> People(<span class="number">1</span>,<span class="string">"1号"</span>,<span class="number">3</span>，<span class="string">"南京"</span>); <span class="comment">//行记录</span></span><br><span class="line">    <span class="keyword">new</span> People(<span class="number">2</span>,<span class="string">"2号"</span>,<span class="number">3</span>，<span class="string">"南京"</span>); <span class="comment">//行记录</span></span><br><span class="line">    <span class="keyword">new</span> People(<span class="number">3</span>,<span class="string">"3号"</span>,<span class="number">3</span>，<span class="string">"南京"</span>); <span class="comment">//行记录</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="10-Filter-重点"><a href="#10-Filter-重点" class="headerlink" title="10. Filter(重点)"></a>10. Filter(重点)</h1><p>Filter：过滤器，用来过滤网站数据</p>
<ul>
<li>处理中文乱码</li>
<li>登录验证….</li>
</ul>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200310084739.png" alt=""></p>
<p>Filter使用步骤：</p>
<ol>
<li>导包</li>
<li>编写过滤器</li>
</ol>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200310084929.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuuu.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Filterdemo</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="comment">//初始化：web服务器启动，就以及初始化了，随时等待过滤对象出现！</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"CharacterEncodingFilter初始化"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Chain : 链</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1. 过滤中的所有代码，在过滤特定请求的时候都会执行</span></span><br><span class="line"><span class="comment">    2. 必须要让过滤器继续同行</span></span><br><span class="line"><span class="comment">        chain.doFilter(request,response);</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"CharacterEncodingFilter执行前...."</span>);</span><br><span class="line">        chain.doFilter(request,response); <span class="comment">//让我们的请求继续走，如果不写，程序到这里就被拦截停止！</span></span><br><span class="line">        System.out.println(<span class="string">"CharacterEncodingFilter执行后...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//销毁：web服务器关闭的时候，过滤会销毁</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"CharacterEncodingFilter销毁"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>在web.xml中配置 Filter</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>filterdemo<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.zhuuu.utils.Filterdemo<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>filterdemo<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="11-监听器"><a href="#11-监听器" class="headerlink" title="11. 监听器"></a>11. 监听器</h1><p>实现一个监听器的接口；（有N种）</p>
<ol>
<li>编写一个监听器 实现监听器的接口</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//统计网站在线人数 ： 统计session</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OnlineCountListener</span> <span class="keyword">implements</span> <span class="title">HttpSessionListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建session监听： 看你的一举一动</span></span><br><span class="line">    <span class="comment">//一旦创建Session就会触发一次这个事件！</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionCreated</span><span class="params">(HttpSessionEvent se)</span> </span>&#123;</span><br><span class="line">        ServletContext ctx = se.getSession().getServletContext();</span><br><span class="line"></span><br><span class="line">        System.out.println(se.getSession().getId());</span><br><span class="line"></span><br><span class="line">        Integer onlineCount = (Integer) ctx.getAttribute(<span class="string">"OnlineCount"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (onlineCount==<span class="keyword">null</span>)&#123;</span><br><span class="line">            onlineCount = <span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> count = onlineCount.intValue();</span><br><span class="line">            onlineCount = <span class="keyword">new</span> Integer(count+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ctx.setAttribute(<span class="string">"OnlineCount"</span>,onlineCount);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//销毁session监听</span></span><br><span class="line">    <span class="comment">//一旦销毁Session就会触发一次这个事件！</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionDestroyed</span><span class="params">(HttpSessionEvent se)</span> </span>&#123;</span><br><span class="line">        ServletContext ctx = se.getSession().getServletContext();</span><br><span class="line"></span><br><span class="line">        Integer onlineCount = (Integer) ctx.getAttribute(<span class="string">"OnlineCount"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (onlineCount==<span class="keyword">null</span>)&#123;</span><br><span class="line">            onlineCount = <span class="keyword">new</span> Integer(<span class="number">0</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> count = onlineCount.intValue();</span><br><span class="line">            onlineCount = <span class="keyword">new</span> Integer(count-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ctx.setAttribute(<span class="string">"OnlineCount"</span>,onlineCount);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Session销毁：</span></span><br><span class="line"><span class="comment">    1. 手动销毁  getSession().invalidate();</span></span><br><span class="line"><span class="comment">    2. 自动销毁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>web.xml中注册监听器</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--注册监听器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.zhuuu.OnlineCountListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="12-过滤器和监听器的应用"><a href="#12-过滤器和监听器的应用" class="headerlink" title="12. 过滤器和监听器的应用"></a>12. 过滤器和监听器的应用</h1><p>用户登录之后才能进入主页！用户注销后就不能进入主页了！</p>
<ol>
<li><p>用户登录之后，向Sesison中放入用户的数据</p>
</li>
<li><p>进入主页的时候要判断用户是否已经登录；要求：在过滤器中实现！</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HttpServletRequest request = (HttpServletRequest) req;</span><br><span class="line">HttpServletResponse response = (HttpServletResponse) resp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (request.getSession().getAttribute(Constant.USER_SESSION)==<span class="keyword">null</span>)&#123;</span><br><span class="line">    response.sendRedirect(<span class="string">"/error.jsp"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">chain.doFilter(request,response);</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>JVM探究</title>
    <url>/2020/02/24/JavaInterview/JVM%E6%8E%A2%E7%A9%B6/</url>
    <content><![CDATA[<h1 id="JVM探究"><a href="#JVM探究" class="headerlink" title="JVM探究"></a>JVM探究</h1><ul>
<li>请你谈谈对JVM的理解？ java8虚拟机和之前的变化更新？</li>
<li>什么是OOM,什么是栈溢出StackOverFlowError？怎么分析？</li>
<li>JVM的常用调优参数有哪些？</li>
<li>内存快照如何抓取，怎么分析Dump文件？</li>
<li>谈谈JVM中，你对类加载器的认识？</li>
</ul>
<h2 id="需要掌握的内容"><a href="#需要掌握的内容" class="headerlink" title="需要掌握的内容"></a>需要掌握的内容</h2><h3 id="1-JVM的位置"><a href="#1-JVM的位置" class="headerlink" title="1. JVM的位置"></a>1. JVM的位置</h3><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200218175915.png" alt="Jvm的位置"></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200218180047.png" alt=""></p>
<a id="more"></a>

<h3 id="2-JVM的体系结构"><a href="#2-JVM的体系结构" class="headerlink" title="2. JVM的体系结构"></a>2. JVM的体系结构</h3><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200218180637.png" alt="体系架构"></p>
<h3 id="3-类加载器"><a href="#3-类加载器" class="headerlink" title="3. 类加载器"></a>3. 类加载器</h3><ul>
<li>作用：加载class字节码文件  </li>
</ul>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200218203932.png" alt=""></p>
<h3 id="4-类加载器的类别"><a href="#4-类加载器的类别" class="headerlink" title="4. 类加载器的类别"></a>4. 类加载器的类别</h3><h4 id="4-1-BootstrapClassLoader（启动类加载器）"><a href="#4-1-BootstrapClassLoader（启动类加载器）" class="headerlink" title="4.1 BootstrapClassLoader（启动类加载器）"></a>4.1 BootstrapClassLoader（启动类加载器）</h4><p><code>c++</code>编写，加载<code>java</code>核心库 <code>java.*</code>,构造<code>ExtClassLoader</code>和<code>AppClassLoader</code>。由于引导类加载器涉及到虚拟机本地实现细节，开发者无法直接获取到启动类加载器的引用，所以不允许直接通过引用进行操作</p>
<h4 id="4-2-ExtClassLoader-（标准扩展类加载器）"><a href="#4-2-ExtClassLoader-（标准扩展类加载器）" class="headerlink" title="4.2 ExtClassLoader （标准扩展类加载器）"></a>4.2 ExtClassLoader （标准扩展类加载器）</h4><p><code>java</code>编写，加载扩展库，如<code>classpath</code>中的<code>jre</code> ，<code>javax.*</code>或者<br> <code>java.ext.dir</code> 指定位置中的类，开发者可以直接使用标准扩展类加载器。</p>
<h4 id="4-3-AppClassLoader（系统类加载器）"><a href="#4-3-AppClassLoader（系统类加载器）" class="headerlink" title="4.3 AppClassLoader（系统类加载器）"></a>4.3 AppClassLoader（系统类加载器）</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java&#96;编写，加载程序所在的目录，如&#96;user.dir&#96;所在的位置的&#96;class</span><br></pre></td></tr></table></figure>

<h4 id="4-4-CustomClassLoader（用户自定义类加载器）"><a href="#4-4-CustomClassLoader（用户自定义类加载器）" class="headerlink" title="4.4 CustomClassLoader（用户自定义类加载器）"></a>4.4 CustomClassLoader（用户自定义类加载器）</h4><p><code>java</code>编写,用户自定义的类加载器,可加载指定路径的<code>class</code>文件</p>
<h3 id="5-双亲委派机制"><a href="#5-双亲委派机制" class="headerlink" title="5. 双亲委派机制"></a>5. 双亲委派机制</h3><p><strong>5.1 作用：</strong></p>
<p> 1、防止重复加载同一个<code>.class</code>。通过委托去向上面问一问，加载过了，就不用再加载一遍。保证数据安全。<br> 2、保证核心<code>.class</code>不能被篡改。通过委托方式，不会去篡改核心<code>.class</code>，即使篡改也不会去加载，即使加载也不会是同一个<code>.class</code>对象了。不同的加载器加载同一个<code>.class</code>也不是同一个<code>Class</code>对象。这样保证了<code>Class</code>执行安全。</p>
<p><strong>5.2 定义：</strong></p>
<p>当某个类加载器需要加载某个<code>.class</code>文件时，它首先把这个任务委托给他的上级类加载器，递归这个操作，如果上级的类加载器没有加载，自己才会去加载这个类。</p>
<ol>
<li>类加载器收到类加载的请求 </li>
<li>将这个请求向上委托给父类加载器去完成，一直向上委托</li>
<li>启动类加载器检查是否能加载当前这个类，能加载就结束，使用当前的加载器，否则抛出异常，通过子类加载器进行加载</li>
<li>重复步骤3</li>
</ol>
<p><strong>5.3 源码分析</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="keyword">boolean</span> resolve)</span><br><span class="line">            <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">            <span class="comment">// 首先检查这个classsh是否已经加载过了</span></span><br><span class="line">            Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">long</span> t0 = System.nanoTime();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// c==null表示没有加载，如果有父类的加载器则让父类加载器加载</span></span><br><span class="line">                    <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        c = parent.loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">//如果父类的加载器为空 则说明递归到bootStrapClassloader了</span></span><br><span class="line">                        <span class="comment">//bootStrapClassloader比较特殊无法通过get获取</span></span><br><span class="line">                        c = findBootstrapClassOrNull(name);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;&#125;</span><br><span class="line">                <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//如果bootstrapClassLoader 仍然没有加载过，则递归回来，尝试自己去加载class</span></span><br><span class="line">                    <span class="keyword">long</span> t1 = System.nanoTime();</span><br><span class="line">                    c = findClass(name);</span><br><span class="line">                    sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class="line">                    sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class="line">                    sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">                resolveClass(c);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="6-沙箱安全机制"><a href="#6-沙箱安全机制" class="headerlink" title="6. 沙箱安全机制"></a>6. 沙箱安全机制</h3><ol>
<li><p>什么是沙箱安全机制？</p>
<ul>
<li><p>Java安全模型的核心就是Java沙箱（sandbox）</p>
</li>
<li><p>什么是沙箱？沙箱是一个限制程序运行的环境。沙箱机制就是将 Java 代码限定在虚拟机(JVM)特定的运行范围中，并且严格限制代码对本地系统资源访问，通过这样的措施来保证对代码的有效隔离，防止对本地系统造成破坏。</p>
</li>
<li><p>沙箱<strong>主要限制系统资源访问</strong>，那系统资源包括什么？——<code>CPU、内存、文件系统、网络</code>。不同级别的沙箱对这些资源访问的限制也可以不一样。</p>
</li>
</ul>
</li>
</ol>
<h3 id="7-Native"><a href="#7-Native" class="headerlink" title="7. Native"></a>7. Native</h3><ol>
<li><p>凡是带了native关键字的，表示java的作用范围达不到了，会去调用底层C语言的库！</p>
</li>
<li><p>会进入本地方法栈，会调用本地方法接口（JNI）</p>
</li>
<li><p>JNI的作用：扩展Java的使用，融合不同的编程语言为Java所用 （最初：C，C++）</p>
</li>
<li><p>Java在内存区域中专门开辟了一块标记区域，Native Method Stack, 登记native方法</p>
</li>
<li><p>在最终执行的时候，加载本地方法库中的方法通过JNI</p>
</li>
</ol>
<h3 id="8-PC寄存器"><a href="#8-PC寄存器" class="headerlink" title="8. PC寄存器"></a>8. PC寄存器</h3><p>程序计数器：Program Counter Register</p>
<p>每个线程都有一个程序计数器，是线程私有的，就是一个指针，指向方法区中的字节码文件（用来存储指向像一条指令的地址，也即将要执行的指令代码），在执行引擎读取下一条指令，是一个非常小的内存空间，可以忽略不计</p>
<h3 id="9-方法区"><a href="#9-方法区" class="headerlink" title="9. 方法区"></a>9. 方法区</h3><p>Method Area 方法区</p>
<p>​    方法区是被所有现场共享的，所有字段和方法字节码，以及一些特殊方法，如构造函数，接口代码也在此定义，简单说，所有定义的方法的信息都保存在该区域，此区域属于共享区间</p>
<p><strong>静态变量，常量，类信息（构造方法，接口定义）,运行时的常量池存在方法区中，但是实例变量（variable）存在堆内存中，和方法区无关</strong></p>
<p>用来存放</p>
<ul>
<li><p>static</p>
</li>
<li><p>final</p>
</li>
<li><p>class</p>
</li>
<li><p>常量池</p>
</li>
</ul>
<h3 id="10-栈"><a href="#10-栈" class="headerlink" title="10. 栈"></a>10. 栈</h3><p>程序猿：数据结构 + 算法</p>
<p>码农：     框架 + 业务逻辑</p>
<h4 id="10-1-栈"><a href="#10-1-栈" class="headerlink" title="10.1 栈"></a>10.1 栈</h4><ul>
<li><p>栈：先进后出，后进先出（main方法先执行，最后结束~）</p>
</li>
<li><p>栈，栈内存主管程序的执行，生命周期和线程同步</p>
</li>
<li><p>线程结束，栈内存也就被释放了</p>
</li>
<li><p>对于栈来说，不存在垃圾回收问题（一旦线程结束，栈就Over）</p>
</li>
<li><p>栈：8大基本类型 + 对象的引用（地址） + 实例的方法（method）</p>
</li>
<li><p>原理：栈帧</p>
<p> <img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200221103845.png" alt=""></p>
</li>
</ul>
<p> <img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200221104938.png" alt=""></p>
<h4 id="10-2-队列"><a href="#10-2-队列" class="headerlink" title="10.2 队列"></a>10.2 队列</h4><p><strong>队列：先进先出（FIFO:First Input First Output）</strong></p>
<p><strong>喝多了吐就是栈，吃多了拉就是队列</strong></p>
<h4 id="10-3-栈溢出"><a href="#10-3-栈溢出" class="headerlink" title="10.3 栈溢出"></a>10.3 栈溢出</h4><p>​    <img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200221104002.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//StackOverflowError</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zhan</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Zhan().test();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        a();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span></span>&#123;</span><br><span class="line">        test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//栈溢出 ： 递归会有问题 StackOverflow</span></span><br><span class="line">	at Zhan.a(Zhan.java:<span class="number">12</span>)</span><br><span class="line">	at Zhan.test(Zhan.java:<span class="number">8</span>)</span><br><span class="line">	at Zhan.a(Zhan.java:<span class="number">12</span>)</span><br><span class="line">	at Zhan.test(Zhan.java:<span class="number">8</span>)</span><br><span class="line">	at Zhan.a(Zhan.java:<span class="number">12</span>)</span><br><span class="line">	at Zhan.test(Zhan.java:<span class="number">8</span>)</span><br><span class="line">	at Zhan.a(Zhan.java:<span class="number">12</span>)</span><br><span class="line">	at Zhan.test(Zhan.java:<span class="number">8</span>)</span><br><span class="line">	at Zhan.a(Zhan.java:<span class="number">12</span>)</span><br><span class="line">	at Zhan.test(Zhan.java:<span class="number">8</span>)</span><br><span class="line">	at Zhan.a(Zhan.java:<span class="number">12</span>)</span><br><span class="line">	at Zhan.test(Zhan.java:<span class="number">8</span>)</span><br><span class="line">	at Zhan.a(Zhan.java:<span class="number">12</span>)</span><br><span class="line">	at Zhan.test(Zhan.java:<span class="number">8</span>)</span><br><span class="line">	at Zhan.a(Zhan.java:<span class="number">12</span>)</span><br></pre></td></tr></table></figure>



<h4 id="10-4-栈-堆-方法区：交互关系"><a href="#10-4-栈-堆-方法区：交互关系" class="headerlink" title="10.4 栈 + 堆 + 方法区：交互关系"></a>10.4 栈 + 堆 + 方法区：交互关系</h4><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200310171936.png" alt=""></p>
<p><strong>画出一个对象实例化的过程（在内存中）： 百度 看视频</strong></p>
<h3 id="11-三种JVM"><a href="#11-三种JVM" class="headerlink" title="11. 三种JVM"></a>11. 三种JVM</h3><ul>
<li>Sun公司 <code>HotSpot</code></li>
</ul>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200221111743.png" alt=""></p>
<ul>
<li><p>Oracle <code>JRockit</code> （原来的 Bea JRockit）电脑软件 (基本JRockit JVM是世界上最快的<a href="https://baike.baidu.com/item/JVM/2902369" target="_blank" rel="noopener">JVM</a>)</p>
</li>
<li><p>IBM<code>J9</code>  (<a href="https://www.zhihu.com/question/39780313?sort=created" target="_blank" rel="noopener">https://www.zhihu.com/question/39780313?sort=created</a>)</p>
</li>
</ul>
<h3 id="12-堆"><a href="#12-堆" class="headerlink" title="12. 堆"></a>12. 堆</h3><p><strong>Heap：一个JVM只有一个堆内存，堆内存的大小是可以调节的</strong></p>
<ul>
<li>类加载器读取了类文件后，一般会把什么东西放到堆中？<ul>
<li>类，常量，变量~</li>
<li>保存所有引用类型的真实对象</li>
</ul>
</li>
</ul>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200221112550.png" alt=""></p>
<p>堆内存中还要细分为三个区域：</p>
<ul>
<li><p>新生区（伊甸园区） Young/new</p>
</li>
<li><p>养老区   old</p>
</li>
<li><p>永久区</p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200221113037.png" alt=""></p>
</li>
</ul>
<h4 id="12-1-新生区，老年区，永久区"><a href="#12-1-新生区，老年区，永久区" class="headerlink" title="12.1 新生区，老年区，永久区"></a>12.1 新生区，老年区，永久区</h4><p><strong>GC垃圾回收，主要实在伊甸园区和养老区</strong></p>
<p><strong>假设内存满了：OOM</strong> (<strong>堆内存不够：OutOfMemoryError</strong>)</p>
<p><strong>在JDK8以后,永久存储区改了个名字（元空间）</strong></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200221113722.png" alt=""></p>
<h4 id="12-2-新生区"><a href="#12-2-新生区" class="headerlink" title="12.2 新生区"></a>12.2 新生区</h4><ul>
<li>类：诞生和成长的地方，甚至到死亡；</li>
<li>伊甸园，所有对象都是在伊甸园区new出来的</li>
<li>幸存者区（0，1）</li>
<li>真理：经过研究，99%的对象都是临时对象</li>
</ul>
<h4 id="12-3-永久区"><a href="#12-3-永久区" class="headerlink" title="12.3 永久区"></a>12.3 永久区</h4><p>这个区域常驻内存的，用来存放JDK自身携带的Class对象，Interface元数据，存储的使Java运行时的一些环境或类信息</p>
<p>这个区域不存在垃圾回收，关闭VM虚拟就会释放这个区域的内存</p>
<p>一个启动类，加载了大量的第三方jar包。Tomcat部署了太多的应用，大量动态生成的反射类。不断的被加载，直到内存满，就会出现OOM</p>
<ul>
<li>jdk 1.6:永久代，<strong>常量池在方法区</strong></li>
<li>jdk 1.7:永久代，但是慢慢退化了，去永久代，<strong>常量池在堆中</strong></li>
<li>jdk 1.8:无永久代，<strong>常量池在元空间</strong></li>
</ul>
<p><strong>元空间：逻辑上存在，物理上不存在</strong></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200223095714.png" alt=""></p>
<h4 id="12-4-OOM-Error"><a href="#12-4-OOM-Error" class="headerlink" title="12.4 OOM Error"></a>12.4 OOM Error</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OOM Error示例</span></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OOM</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"Zhuuuu"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            str = str + <span class="keyword">new</span> Random().nextInt(<span class="number">899888888</span>) + <span class="keyword">new</span> Random().nextInt(<span class="number">999999999</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>输出：OutOfMemoryError</strong></p>
<p><strong>解决方法</strong>：</p>
<ol>
<li>尝试扩大堆内存（如下所示看结果）</li>
<li>分析内存，看一下哪个地方出现了问题</li>
</ol>
<h4 id="12-5-IDEA调节虚拟机堆内存大小"><a href="#12-5-IDEA调节虚拟机堆内存大小" class="headerlink" title="12.5 IDEA调节虚拟机堆内存大小"></a>12.5 IDEA调节虚拟机堆内存大小</h4><p>配置如下代码：在Configuration中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">-Xms8m -Xmx8m -XX:+PrintGCDetails</span><br></pre></td></tr></table></figure>

<p>具体步骤如下图所示：</p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200223102028.png" alt=""></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200223100534.png" alt=""></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200223111226.png" alt=""></p>
<p><strong>元空间：逻辑上存在，物理上不存在</strong></p>
<h4 id="12-6-扩展学习（Random-nextInt-）"><a href="#12-6-扩展学习（Random-nextInt-）" class="headerlink" title="12.6 扩展学习（Random.nextInt()）"></a>12.6 扩展学习（Random.nextInt()）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">random.nextInt()的用法</span></span><br><span class="line"><span class="comment">1、不带参数的nextInt()会生成所有有效的整数（包含正数，负数，0）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2、带参的nextInt(int x)则会生成一个范围在0~x（不包含X）内的任意正整数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">例如：int x=new Random.nextInt(100); </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">则x为一个0~99的任意整数</span></span><br><span class="line"><span class="comment">　　　　</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>



<h3 id="13-堆内存调优"><a href="#13-堆内存调优" class="headerlink" title="13. 堆内存调优"></a>13. 堆内存调优</h3><h4 id="13-1-Jprofiler"><a href="#13-1-Jprofiler" class="headerlink" title="13.1 Jprofiler"></a>13.1 Jprofiler</h4><ul>
<li>分析Dump内存文件，快速定位内存泄露</li>
<li>获得堆中的数据</li>
<li>获得大的对象~</li>
</ul>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200223105004.png" alt=""></p>
<h3 id="14-GC垃圾回收器"><a href="#14-GC垃圾回收器" class="headerlink" title="14. GC垃圾回收器"></a>14. GC垃圾回收器</h3><ul>
<li>JVM在进行GC中，并不是对三个区域进行统一回收。大部分时候，回收的都是新生代</li>
<li>GC的两种类：<ul>
<li>轻GC(普通的GC)</li>
<li>重GC(深度的GC)</li>
</ul>
</li>
</ul>
<h4 id="14-1-GC的作用区域"><a href="#14-1-GC的作用区域" class="headerlink" title="14.1 GC的作用区域"></a>14.1 GC的作用区域</h4><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200223111437.png" alt=""></p>
<h4 id="14-2-GC面试题"><a href="#14-2-GC面试题" class="headerlink" title="14.2 GC面试题"></a>14.2 GC面试题</h4><ol>
<li><p>JVM内存模型和分区 详细到每个区放什么？</p>
</li>
<li><p>堆里面的分区有哪些？(Eden, from, to，老年区)</p>
</li>
<li><p>GC的算法有哪些？</p>
<ul>
<li>标记清除法</li>
<li>标记压缩法</li>
<li>复制算法</li>
<li>引用计数器</li>
</ul>
</li>
<li><p>轻GC和重GC分别用在什么时候？</p>
</li>
</ol>
<h4 id="14-3-GC-引用计数法"><a href="#14-3-GC-引用计数法" class="headerlink" title="14.3 GC 引用计数法"></a>14.3 GC 引用计数法</h4><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200223112254.png" alt=""></p>
<h4 id="14-4-GC-复制算法"><a href="#14-4-GC-复制算法" class="headerlink" title="14.4 GC 复制算法"></a>14.4 GC 复制算法</h4><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200223113151.png" alt=""></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200223113452.png" alt=""></p>
<ul>
<li>步骤：</li>
</ul>
<ol>
<li>from区把垃圾丢给to</li>
<li>Eden区把垃圾丢给to</li>
</ol>
<ul>
<li>优点：</li>
</ul>
<ol>
<li>没有内存的碎片</li>
</ol>
<ul>
<li>缺点：</li>
</ul>
<ol>
<li>浪费了内存空间，多了一半空间永远是空的</li>
</ol>
<ul>
<li>复制算法最佳场景使用：对象存活度较低的时候（新生区中使用最好）</li>
</ul>
<h4 id="14-5-GC-标记清除法"><a href="#14-5-GC-标记清除法" class="headerlink" title="14.5 GC 标记清除法"></a>14.5 GC 标记清除法</h4><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200223120429.png" alt=""></p>
<ul>
<li>优点：不需要额外的空间</li>
<li>缺点：两次扫描，严重浪费时间，会产生内存碎片</li>
</ul>
<h4 id="14-6-GC-标记压缩法"><a href="#14-6-GC-标记压缩法" class="headerlink" title="14.6 GC 标记压缩法"></a>14.6 GC 标记压缩法</h4><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200223120715.png" alt=""></p>
<h4 id="14-7-GC算法总结"><a href="#14-7-GC算法总结" class="headerlink" title="14.7 GC算法总结"></a>14.7 GC算法总结</h4><ul>
<li>内存效率 ： 复制算法&gt;标记清除算法&gt;标记压缩算法（时间复杂度）</li>
<li>内存整齐度：复制算法=标记压缩算法&gt;标记清除算法</li>
<li>内存利用率：标记压缩算法=标记清除算法&gt;复制算法</li>
</ul>
<p><strong>没有最好的算法，只有一个最合适的算法</strong></p>
<p>GC:分代收集算法</p>
<p>年轻代：</p>
<ul>
<li>存活率低</li>
<li>复制算法</li>
</ul>
<p>老年代：</p>
<ul>
<li>区域大：存活率</li>
<li>标记清除（内存碎片不是太多） + 标记压缩混合 实现</li>
</ul>
<h3 id="15-JMM"><a href="#15-JMM" class="headerlink" title="15. JMM"></a>15. JMM</h3><p><strong>1. 什么是JMM?</strong></p>
<ul>
<li>Java 内存模型Java 内存模型（JMM）是一种抽象的概念，并不真实存在，它描述了一组规则或规范，</li>
<li>通过这组规范定义了程序中各个变量（包括实例字段、静态字段和构成数组对象的元素）的访问方式。</li>
<li>试图屏蔽各种硬件和操作系统的内存访问差异，以实现让 Java 程序在各种平台下都能达到一致的内存访问效果。</li>
<li>注意JMM与JVM内存区域划分的区别：JMM描述的是一组规则，围绕<strong>原子性</strong>、<strong>有序性</strong>和<strong>可见性</strong>展开</li>
</ul>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200225104802.png" alt=""></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200225104730.png" alt=""></p>
<p><strong>2. JMM的作用?</strong></p>
<p>作用：缓存一致性协议，用于定义数据读取的规则（遵守规则）</p>
<ul>
<li><p>JMM定义了线程工作内存和主内存之间的抽象关系：线程之间的共享变量存储在主内存（Main Memory）中，每个线程都有一个私有的本地内存。</p>
</li>
<li><p>所有的变量都存储在主内存当中，每个线程还有自己的工作内存，工作内存存储在高速缓存或者寄存器中，保存了该线程使用的变量的主内存副本拷贝。</p>
</li>
<li><p>线程只能直接操作工作内存中的变量，不同线程之间的变量值传递需要通过主内存来完成。</p>
</li>
</ul>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200225102824.png" alt=""></p>
<p><strong>解决共享对象可见性这个问题： volilate</strong></p>
<p><strong>3. JMM的规则</strong></p>
<p> 　内存交互操作有8种，虚拟机实现必须保证每一个操作都是原子的，不可在分的（对于double和long类型的变量来说，load、store、read和write操作在某些平台上允许例外）</p>
<ul>
<li><ul>
<li>lock   （锁定）：作用于主内存的变量，把一个变量标识为线程独占状态</li>
<li>unlock （解锁）：作用于主内存的变量，它把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定</li>
<li>read  （读取）：作用于主内存变量，它把一个变量的值从主内存传输到线程的工作内存中，以便随后的load动作使用</li>
<li>load   （载入）：作用于工作内存的变量，它把read操作从主存中变量放入工作内存中</li>
<li>use   （使用）：作用于工作内存中的变量，它把工作内存中的变量传输给执行引擎，每当虚拟机遇到一个需要使用到变量的值，就会使用到这个指令</li>
<li>assign （赋值）：作用于工作内存中的变量，它把一个从执行引擎中接受到的值放入工作内存的变量副本中</li>
<li>store  （存储）：作用于主内存中的变量，它把一个从工作内存中一个变量的值传送到主内存中，以便后续的write使用</li>
<li>write 　（写入）：作用于主内存中的变量，它把store操作从工作内存中得到的变量的值放入主内存的变量中</li>
</ul>
</li>
</ul>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200225104853.png" alt=""></p>
<p>　<strong>JMM对这八种指令的使用，制定了如下规则：</strong></p>
<ul>
<li><p>不允许read和load、store和write操作之一单独出现。即使用了read必须load，使用了store必须write</p>
</li>
<li><p>不允许线程丢弃他最近的assign操作，即工作变量的数据改变了之后，必须告知主存</p>
</li>
<li><p>不允许一个线程将没有assign的数据从工作内存同步回主内存</p>
</li>
<li><p>一个新的变量必须在主内存中诞生，不允许工作内存直接使用一个未被初始化的变量。就是怼变量实施use、store操作之前，必须经过assign和load操作</p>
</li>
<li><p>一个变量同一时间只有一个线程能对其进行lock。多次lock后，必须执行相同次数的unlock才能解锁</p>
</li>
<li><p>如果对一个变量进行lock操作，会清空所有工作内存中此变量的值，在执行引擎使用这个变量前，必须重新load或assign操作初始化变量的值</p>
</li>
<li><p>如果一个变量没有被lock，就不能对其进行unlock操作。也不能unlock一个被其他线程锁住的变量</p>
</li>
<li><p>对一个变量进行unlock操作之前，必须把此变量同步回主内存</p>
</li>
</ul>
<p>  JMM对这八种操作规则和对<a href="https://www.cnblogs.com/null-qige/p/8569131.html" target="_blank" rel="noopener">volatile的一些特殊规则</a>就能确定哪里操作是线程安全，哪些操作是线程不安全的了。但是这些规则实在复杂，很难在实践中直接分析。所以一般我们也不会通过上述规则进行分析。更多的时候，使用java的happen-before规则来进行分析。</p>
<p><strong>4. JMM和JVM的内存区域划分区别</strong></p>
<ul>
<li>JMM描述的是一组规则，围绕原子性，有序性和可见性展开</li>
<li>相似点：存在共享区域和私有区域</li>
</ul>
<h3 id="16-内存模型的三大特性"><a href="#16-内存模型的三大特性" class="headerlink" title="16. 内存模型的三大特性"></a>16. 内存模型的三大特性</h3><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>学习方案</strong></p>
<ol>
<li><p>百度</p>
</li>
<li><p>思维导图</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>JVM</tag>
        <tag>JMM</tag>
      </tags>
  </entry>
  <entry>
    <title>Java多线程</title>
    <url>/2020/02/22/JavaInterview/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="Java多线程"><a href="#Java多线程" class="headerlink" title="Java多线程"></a>Java多线程</h1><h2 id="1-普通线程和多线程的区别"><a href="#1-普通线程和多线程的区别" class="headerlink" title="1. 普通线程和多线程的区别"></a>1. 普通线程和多线程的区别</h2><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200222192459.png" alt=""></p>
<a id="more"></a>

<h3 id="1-1-程序，进程和线程的概念"><a href="#1-1-程序，进程和线程的概念" class="headerlink" title="1.1 程序，进程和线程的概念"></a>1.1 程序，进程和线程的概念</h3><ul>
<li>程序：是指令和数据的有序集合，其本身没有任何运行的含义，是一个<strong>静态</strong>的概念（是死的）</li>
<li>进程：是执行程序的一次执行过程，它是一个<strong>动态</strong>的概念，是系统的资源分配的单位</li>
<li>线程：通常在一个进程中可以包含若干个线程，线程是CPU调度和执行的单位</li>
</ul>
<h2 id="2-线程创建的方式"><a href="#2-线程创建的方式" class="headerlink" title="2. 线程创建的方式"></a>2. 线程创建的方式</h2><h3 id="2-1-Thread-Class（重点）"><a href="#2-1-Thread-Class（重点）" class="headerlink" title="2.1 Thread Class（重点）"></a>2.1 Thread Class（重点）</h3><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200223143752.png" alt=""></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200223143829.png" alt=""></p>
<ol>
<li>自定义线程类继承Thread类</li>
<li>重写run()方法，编写线程的执行体</li>
<li>创建线程对象，调用start()方法启动线程</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuuu.lesson1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLesson</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//run方法的线程体</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"这是线程一"</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//main线程，主线程</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个线程对象</span></span><br><span class="line">        ThreadLesson threadLesson = <span class="keyword">new</span> ThreadLesson();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用start（）方法开启线程</span></span><br><span class="line">        threadLesson.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"这是线程二"</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">这是线程二<span class="number">0</span></span><br><span class="line">这是线程二<span class="number">1</span></span><br><span class="line">这是线程一<span class="number">0</span></span><br><span class="line">这是线程一<span class="number">1</span></span><br><span class="line">这是线程一<span class="number">2</span></span><br><span class="line">这是线程一<span class="number">3</span></span><br><span class="line">这是线程一<span class="number">4</span></span><br><span class="line">这是线程一<span class="number">5</span></span><br><span class="line">这是线程一<span class="number">6</span></span><br><span class="line">这是线程一<span class="number">7</span></span><br><span class="line">这是线程一<span class="number">8</span></span><br><span class="line">这是线程一<span class="number">9</span></span><br><span class="line">这是线程一<span class="number">10</span></span><br><span class="line">这是线程一<span class="number">11</span></span><br><span class="line">这是线程一<span class="number">12</span></span><br><span class="line">这是线程一<span class="number">13</span></span><br><span class="line">这是线程一<span class="number">14</span></span><br><span class="line">这是线程一<span class="number">15</span></span><br><span class="line">这是线程一<span class="number">16</span></span><br><span class="line">这是线程一<span class="number">17</span></span><br><span class="line">这是线程一<span class="number">18</span></span><br><span class="line">这是线程一<span class="number">19</span></span><br><span class="line">这是线程二<span class="number">2</span></span><br><span class="line">这是线程二<span class="number">3</span></span><br><span class="line">这是线程二<span class="number">4</span></span><br><span class="line">这是线程二<span class="number">5</span></span><br><span class="line">这是线程二<span class="number">6</span></span><br><span class="line">这是线程二<span class="number">7</span></span><br><span class="line">这是线程二<span class="number">8</span></span><br><span class="line">这是线程二<span class="number">9</span></span><br><span class="line">这是线程二<span class="number">10</span></span><br><span class="line">这是线程二<span class="number">11</span></span><br><span class="line">这是线程二<span class="number">12</span></span><br><span class="line">这是线程二<span class="number">13</span></span><br><span class="line">这是线程二<span class="number">14</span></span><br><span class="line">这是线程二<span class="number">15</span></span><br><span class="line">这是线程二<span class="number">16</span></span><br><span class="line">这是线程二<span class="number">17</span></span><br><span class="line">这是线程二<span class="number">18</span></span><br><span class="line">这是线程二<span class="number">19</span></span><br></pre></td></tr></table></figure>



<h4 id="2-1-1-静态代理模式"><a href="#2-1-1-静态代理模式" class="headerlink" title="2.1.1 静态代理模式"></a>2.1.1 静态代理模式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson6;</span><br><span class="line"><span class="comment">//静态代理模式总结：</span></span><br><span class="line"><span class="comment">//真实对象和代理对象都要实现同一个接口</span></span><br><span class="line"><span class="comment">//代理对象要代理真实角色</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//好处：</span></span><br><span class="line"><span class="comment">// 代理对象可以做很多真实角色做不到的事情</span></span><br><span class="line"><span class="comment">// 真实对象专注做自己的事情</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">staticProxy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Thread底层是静态代理模式</span></span><br><span class="line">        <span class="comment">//new Thread(new You()).start();</span></span><br><span class="line">        <span class="keyword">new</span> WeddingCompany(<span class="keyword">new</span> You()).HappyMarry();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//需要事先的接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Marry</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">HappyMarry</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//真实对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">You</span> <span class="keyword">implements</span> <span class="title">Marry</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HappyMarry</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"结婚开心"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代理角色</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeddingCompany</span> <span class="keyword">implements</span> <span class="title">Marry</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Marry target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeddingCompany</span><span class="params">(Marry target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HappyMarry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        before();</span><br><span class="line">        <span class="keyword">this</span>.target.HappyMarry();</span><br><span class="line">        after();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"结婚后收钱"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"结婚前布置现场"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-2-Runnable接口（重点）"><a href="#2-2-Runnable接口（重点）" class="headerlink" title="2.2 Runnable接口（重点）"></a>2.2 Runnable接口（重点）</h3><ol>
<li>定义MyRunnable类实现<em>Runnable接口</em></li>
<li>实现run()方法，编写线程的执行体</li>
<li>创建线程对象，调用start()方法启动线程</li>
</ol>
<ul>
<li><strong>实现Runnable接口，避免了继承Thread类的单继承局限性。</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuuu.lesson2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableLesson</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//run方法线程体</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"这是线程一"</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建runnable接口实现类对象</span></span><br><span class="line">        RunnableLesson runnableLesson = <span class="keyword">new</span> RunnableLesson();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建线程对象，通过先出对象来开启我们的线程。（原理：静态代理）</span></span><br><span class="line">        <span class="keyword">new</span> Thread(runnableLesson).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"这是线程二"</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">这是线程二<span class="number">2</span></span><br><span class="line">这是线程二<span class="number">3</span></span><br><span class="line">这是线程二<span class="number">4</span></span><br><span class="line">这是线程二<span class="number">5</span></span><br><span class="line">这是线程二<span class="number">6</span></span><br><span class="line">这是线程二<span class="number">7</span></span><br><span class="line">这是线程二<span class="number">8</span></span><br><span class="line">这是线程二<span class="number">9</span></span><br><span class="line">这是线程一<span class="number">0</span></span><br><span class="line">这是线程一<span class="number">1</span></span><br><span class="line">这是线程一<span class="number">2</span></span><br><span class="line">这是线程一<span class="number">3</span></span><br><span class="line">这是线程一<span class="number">4</span></span><br><span class="line">这是线程一<span class="number">5</span></span><br><span class="line">这是线程一<span class="number">6</span></span><br><span class="line">这是线程一<span class="number">7</span></span><br><span class="line">这是线程一<span class="number">8</span></span><br><span class="line">这是线程一<span class="number">9</span></span><br><span class="line">这是线程一<span class="number">10</span></span><br><span class="line">这是线程一<span class="number">11</span></span><br><span class="line">这是线程一<span class="number">12</span></span><br><span class="line">这是线程一<span class="number">13</span></span><br><span class="line">这是线程一<span class="number">14</span></span><br><span class="line">这是线程一<span class="number">15</span></span><br><span class="line">这是线程一<span class="number">16</span></span><br><span class="line">这是线程一<span class="number">17</span></span><br><span class="line">这是线程一<span class="number">18</span></span><br><span class="line">这是线程一<span class="number">19</span></span><br><span class="line">这是线程二<span class="number">10</span></span><br><span class="line">这是线程二<span class="number">11</span></span><br><span class="line">这是线程二<span class="number">12</span></span><br><span class="line">这是线程二<span class="number">13</span></span><br><span class="line">这是线程二<span class="number">14</span></span><br><span class="line">这是线程二<span class="number">15</span></span><br><span class="line">这是线程二<span class="number">16</span></span><br><span class="line">这是线程二<span class="number">17</span></span><br><span class="line">这是线程二<span class="number">18</span></span><br><span class="line">这是线程二<span class="number">19</span></span><br></pre></td></tr></table></figure>





<h3 id="2-3-Callable接口（了解）"><a href="#2-3-Callable接口（了解）" class="headerlink" title="2.3 Callable接口（了解）"></a>2.3 Callable接口（了解）</h3><ol>
<li>实现Callable接口，需要返回值类型</li>
<li>重写call方法，需要抛出异常</li>
<li>创建目标对象</li>
<li>创建执行的服务</li>
<li>提交执行</li>
<li>获取结果</li>
<li>关闭服务</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//callable实现多线程下载图片</span></span><br><span class="line"><span class="keyword">package</span> com.zhuuu.lesson5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Boolean</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestCallable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写call方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        WebDownloader webDownloader = <span class="keyword">new</span> WebDownloader();</span><br><span class="line">        webDownloader.downloader(url,name);</span><br><span class="line">        System.out.println(<span class="string">"下载了文件名是"</span> + name);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">//重写call方法是有返回值的</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TestCallable t1 = <span class="keyword">new</span> TestCallable();</span><br><span class="line">        TestCallable t2 = <span class="keyword">new</span> TestCallable();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建执行服务</span></span><br><span class="line">        ExecutorService ser = Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//提交执行</span></span><br><span class="line">        Future&lt;Boolean&gt; r1 = ser.submit(t1);</span><br><span class="line">        Future&lt;Boolean&gt; r2 = ser.submit(t2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取结果</span></span><br><span class="line">        Boolean rs1 = r1.get();</span><br><span class="line">        Boolean rs2 = r2.get();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭服务</span></span><br><span class="line">        ser.shutdownNow();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下载器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebDownloader</span> </span>&#123;</span><br><span class="line">    <span class="comment">//下载方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downloader</span><span class="params">(String url, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileUtils.copyURLToFile(<span class="keyword">new</span> URL(url),<span class="keyword">new</span> File(name));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">"IO异常，downloader出现问题"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="3-并发的问题"><a href="#3-并发的问题" class="headerlink" title="3. 并发的问题"></a>3. 并发的问题</h2><p>示例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuuu.lesson3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parallelism</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticketNums = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (ticketNums &lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">230</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"拿到了第"</span> + ticketNums-- + <span class="string">"票"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Parallelism ticket = <span class="keyword">new</span> Parallelism();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(ticket,<span class="string">"小米"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(ticket,<span class="string">"黄牛"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(ticket,<span class="string">"小红"</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">黄牛拿到了第<span class="number">10</span>票</span><br><span class="line">小米拿到了第<span class="number">9</span>票</span><br><span class="line">小红拿到了第<span class="number">8</span>票</span><br><span class="line">小红拿到了第<span class="number">7</span>票</span><br><span class="line">小米拿到了第<span class="number">6</span>票</span><br><span class="line">黄牛拿到了第<span class="number">5</span>票</span><br><span class="line">小米拿到了第<span class="number">3</span>票</span><br><span class="line">黄牛拿到了第<span class="number">4</span>票</span><br><span class="line">小红拿到了第<span class="number">2</span>票</span><br><span class="line">小红拿到了第<span class="number">1</span>票</span><br><span class="line">黄牛拿到了第<span class="number">0</span>票</span><br><span class="line">小米拿到了第<span class="number">0</span>票</span><br></pre></td></tr></table></figure>



<p><strong>多个线程操作同一个对象的情况下，线程不安全，数据会紊乱</strong></p>
<h2 id="4-龟兔赛跑的问题"><a href="#4-龟兔赛跑的问题" class="headerlink" title="4. 龟兔赛跑的问题"></a>4. 龟兔赛跑的问题</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuuu.lesson4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Race</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String winner; <span class="comment">//winner提升作用域</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断比赛是否结束</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//模拟兔子休息</span></span><br><span class="line">            <span class="keyword">if</span> (Thread.currentThread().getName().equals(<span class="string">"兔子"</span>) &amp;&amp; i % <span class="number">10</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//判断比赛是否结束</span></span><br><span class="line">                <span class="keyword">boolean</span> flag = gameOver(i);</span><br><span class="line">                <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"--&gt;跑了"</span> + i + <span class="string">"步"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断是否完成比赛</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">gameOver</span><span class="params">(<span class="keyword">int</span> steps)</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断是否有胜利者</span></span><br><span class="line">        <span class="keyword">if</span>(winner != <span class="keyword">null</span>)&#123;<span class="comment">//已经存在胜利者了</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(steps &gt;= <span class="number">100</span>)&#123;</span><br><span class="line">            winner = Thread.currentThread().getName();</span><br><span class="line">            System.out.println(<span class="string">"winner is "</span> + winner);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Race race = <span class="keyword">new</span> Race();</span><br><span class="line">        <span class="keyword">new</span> Thread(race,<span class="string">"兔子"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(race,<span class="string">"乌龟"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="5-lambda表达式"><a href="#5-lambda表达式" class="headerlink" title="5. lambda表达式"></a>5. lambda表达式</h2><p>作用：</p>
<ul>
<li>避免匿名内部类定义过多</li>
<li>去掉一堆没有意义的代码，只留下核心的逻辑</li>
</ul>
<h3 id="5-1-函数式接口"><a href="#5-1-函数式接口" class="headerlink" title="5.1 函数式接口"></a>5.1 函数式接口</h3><p><strong>Functional Interface(函数式接口) 是学习lambda表达式关键所在</strong></p>
<ul>
<li><p>函数式接口定义：</p>
<ul>
<li>任何接口，如果只包含<strong>唯一一个抽象</strong>的方法，那么他就是一个函数式接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>对于函数式接口，可以通过lambda表达式创建该接口对象</strong></li>
</ul>
</li>
</ul>
<h3 id="5-2-lambda举例分析"><a href="#5-2-lambda举例分析" class="headerlink" title="5.2 lambda举例分析"></a>5.2 lambda举例分析</h3><p><strong>1. JDK1.8之后才有的特性</strong></p>
<p><strong>2. 本质是不断简化而来</strong></p>
<ol>
<li>无参数</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuuu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">lambdaExpression</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.静态内部类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Like2</span> <span class="keyword">implements</span> <span class="title">Ilike</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"this is lambda2"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Like like = <span class="keyword">new</span> Like();</span><br><span class="line">        like.lambda();</span><br><span class="line"></span><br><span class="line">        Like2 like2 = <span class="keyword">new</span> Like2();</span><br><span class="line">        like2.lambda();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 局部内部类:定义在方法里面</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Like3</span> <span class="keyword">implements</span> <span class="title">Ilike</span></span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"this is lambda3"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Like3 like3 = <span class="keyword">new</span> Like3();</span><br><span class="line">        like3.lambda();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 匿名内部类：没有类的名称，必须借助接口或者父类</span></span><br><span class="line">        Ilike ilike = <span class="keyword">new</span> Ilike() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"this is lambda4"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        ilike.lambda();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.用lambda简化</span></span><br><span class="line">        ilike = () -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">"this is lambda5"</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        ilike.lambda();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.定义一个函数式接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Ilike</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span>  <span class="title">lambda</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.实现类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Like</span> <span class="keyword">implements</span> <span class="title">Ilike</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"this is lambda"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ol start="2">
<li>有参数</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuuu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">lambdaExpression2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Love</span> <span class="keyword">implements</span> <span class="title">Ilove</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">love</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"that is lambda "</span> + <span class="string">"for "</span> + a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Love</span> <span class="keyword">implements</span> <span class="title">Ilove</span> </span>&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">love</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"that is lambda "</span> + <span class="string">"for "</span> + a);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Love love = <span class="keyword">new</span> Love();</span><br><span class="line">        love.love(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Ilove() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">love</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"that is lambda "</span> + <span class="string">"for "</span> + a);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        love.love(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Ilove ilove = (<span class="keyword">int</span> a) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">"that is lambda "</span> + <span class="string">"for "</span> + a);</span><br><span class="line">        &#125;;</span><br><span class="line">        love.love(<span class="number">520</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Ilove</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">love</span><span class="params">(<span class="keyword">int</span> a)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-3-lambda简化"><a href="#5-3-lambda简化" class="headerlink" title="5.3 lambda简化"></a>5.3 lambda简化</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 简化 1.去掉参数 2.去掉花括号 3.去掉括号</span></span><br><span class="line">Ilove ilove = a -&gt; System.out.println(<span class="string">"that is lambda "</span> + <span class="string">"for "</span> + a);</span><br><span class="line">love.love(<span class="number">520</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//总结：lambda表达式</span></span><br><span class="line"><span class="comment">//1.只有一行代码的情况下才能简化为一行，如果有多行，那么就用代码块包裹</span></span><br><span class="line"><span class="comment">//2.前提必须是函数式接口（接口里面只有一个方法）</span></span><br><span class="line"><span class="comment">//3.去掉参数要么都去掉，要么要用同一个括号包起来</span></span><br></pre></td></tr></table></figure>

<p>注意事项：前提接口只能有一个方法</p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200229113232.png" alt=""></p>
<h2 id="6-线程状态"><a href="#6-线程状态" class="headerlink" title="6. 线程状态"></a>6. 线程状态</h2><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200229115439.png" alt=""></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200229115640.png" alt=""></p>
<h3 id="6-1-停止线程"><a href="#6-1-停止线程" class="headerlink" title="6.1 停止线程"></a>6.1 停止线程</h3><ol>
<li>注意事项</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 测试stop</span><br><span class="line">&#x2F;&#x2F;1. 建议线程正常停止 --》利用次数，不建议死循环</span><br><span class="line">&#x2F;&#x2F;2. 建议使用标志位--》设置一个标志位</span><br><span class="line">&#x2F;&#x2F;3. 不要试用stop或者destroy等过时JDK不建议使用的方法</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuuu;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试stop</span></span><br><span class="line"><span class="comment">//1. 建议线程正常停止 --》利用次数，不建议死循环</span></span><br><span class="line"><span class="comment">//2. 建议使用标志位--》设置一个标志位</span></span><br><span class="line"><span class="comment">//3. 不要试用stop或者destroy等过时JDK不建议使用的方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStop</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.设置一个标志位</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag =<span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//标志位为flag</span></span><br><span class="line">        <span class="keyword">while</span> (flag)&#123;</span><br><span class="line">            System.out.println(<span class="string">"runThread"</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 设置一个公开的方法停止线程，转换标志位</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flag = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//new 对象 开启线程</span></span><br><span class="line">        TestStop testStop = <span class="keyword">new</span> TestStop();</span><br><span class="line">        <span class="keyword">new</span> Thread(testStop).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"这是第"</span> + i + <span class="string">"次的线程"</span>);</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">900</span>)&#123;</span><br><span class="line">                <span class="comment">//调用stop方法切换标志位，让线程停止</span></span><br><span class="line">                testStop.stop();</span><br><span class="line">                System.out.println(<span class="string">"线程在此停止"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200229144658.png" alt=""></p>
<h3 id="6-2-线程休眠"><a href="#6-2-线程休眠" class="headerlink" title="6.2 线程休眠"></a>6.2 线程休眠</h3><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200229144916.png" alt=""></p>
<p><strong>模拟10s倒计时</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSleep2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//模拟10s倒计时</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        tenDown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tenDown</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//1000ms = 1s</span></span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(num--);</span><br><span class="line">            <span class="keyword">if</span>(num &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>模拟实时显示系统时间</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSleep2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date(System.currentTimeMillis());<span class="comment">//获取系统当前时间</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>); <span class="comment">//每隔一秒显示时间</span></span><br><span class="line">                System.out.println(<span class="keyword">new</span> SimpleDateFormat(<span class="string">"HH:mm:ss"</span>).format(date));</span><br><span class="line">                date = <span class="keyword">new</span> Date(System.currentTimeMillis()); <span class="comment">//刷新显示新时间</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="6-3-线程礼让"><a href="#6-3-线程礼让" class="headerlink" title="6.3 线程礼让"></a>6.3 线程礼让</h3><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200229150504.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuuu;</span><br><span class="line"></span><br><span class="line"><span class="comment">//礼让不一定成功，看CPU心情</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">yieldTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyYield myYield = <span class="keyword">new</span> MyYield();</span><br><span class="line">        <span class="keyword">new</span> Thread(myYield,<span class="string">"A"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(myYield,<span class="string">"B"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyYield</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"线程开始执行"</span>);</span><br><span class="line">        Thread.yield(); <span class="comment">//yield()方法</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"线程停止执行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>成果的结果如下：</p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200229151107.png" alt=""></p>
<h3 id="6-4-线程强制执行"><a href="#6-4-线程强制执行" class="headerlink" title="6.4 线程强制执行"></a>6.4 线程强制执行</h3><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200229155507.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuuu;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试join方法 可以想象为插队</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJoin</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"线程vip来了"</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        TestJoin testJoin = <span class="keyword">new</span> TestJoin();</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(testJoin);</span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//主线程</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">200</span>)&#123;</span><br><span class="line">                thread.join();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"main"</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="6-6-查看线程状态"><a href="#6-6-查看线程状态" class="headerlink" title="6.6 查看线程状态"></a>6.6 查看线程状态</h3><ol>
<li>查看JDK文档</li>
</ol>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200229160217.png" alt=""></p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuuu;</span><br><span class="line"></span><br><span class="line"><span class="comment">//观察线程的状态</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestState</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"============"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//观察状态 NEW</span></span><br><span class="line">        Thread.State state = thread.getState();</span><br><span class="line">        System.out.println(state); <span class="comment">// NEW</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//观察启动后 RUNNABLE</span></span><br><span class="line">        thread.start();</span><br><span class="line">        state = thread.getState();</span><br><span class="line">        System.out.println(state); <span class="comment">// Run</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (state != Thread.State.TERMINATED)&#123;</span><br><span class="line">            <span class="comment">//只要线程不终止就输出状态 TIMED_WAITING</span></span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            state = thread.getState(); <span class="comment">// 更新线程状态</span></span><br><span class="line">            System.out.println(state);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">NEW</span><br><span class="line">RUNNABLE</span><br><span class="line">TIMED_WAITING</span><br><span class="line">TIMED_WAITING</span><br><span class="line">TIMED_WAITING</span><br><span class="line">TIMED_WAITING</span><br><span class="line">TIMED_WAITING</span><br><span class="line">TIMED_WAITING</span><br><span class="line">TIMED_WAITING</span><br><span class="line">TIMED_WAITING</span><br><span class="line">TIMED_WAITING</span><br><span class="line">============</span><br><span class="line">TERMINATED</span><br></pre></td></tr></table></figure>



<h3 id="6-7-线程优先级"><a href="#6-7-线程优先级" class="headerlink" title="6.7 线程优先级"></a>6.7 线程优先级</h3><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200229161348.png" alt=""></p>
<p>打开Thread源码：</p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200229161628.png" alt=""></p>
<p>示例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuuu;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试线程的优先级</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testPriority</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() +<span class="string">"---&gt;"</span> +Thread.currentThread().getPriority()); <span class="comment">//这是输出主线程的优先级</span></span><br><span class="line"></span><br><span class="line">        MyPriority myPriority = <span class="keyword">new</span> MyPriority();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(myPriority);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(myPriority);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(myPriority);</span><br><span class="line">        Thread t4 = <span class="keyword">new</span> Thread(myPriority);</span><br><span class="line">        Thread t5 = <span class="keyword">new</span> Thread(myPriority);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先设置优先级在启动</span></span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        t2.setPriority(<span class="number">1</span>);</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">        t3.setPriority(<span class="number">2</span>);</span><br><span class="line">        t3.start();</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        t5.setPriority(Thread.MAX_PRIORITY); <span class="comment">// 默认等于10</span></span><br><span class="line">        t5.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span>  <span class="title">MyPriority</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"---&gt;"</span>+Thread.currentThread().getPriority()); <span class="comment">//这是输出每一个线程的优先级</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果如下：性能倒置</p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200229162427.png" alt=""></p>
<h3 id="6-8-守护线程"><a href="#6-8-守护线程" class="headerlink" title="6.8 守护线程"></a>6.8 守护线程</h3><ul>
<li>线程分为<strong>用户线程</strong>和<strong>守护线程</strong></li>
<li>虚拟机必须确保<strong>用户线程执行完毕 （main线程）</strong></li>
<li>虚拟机<strong>不用等待守护线程执行完毕 （gc线程）</strong></li>
<li>守护线程如：垃圾回收，记录操作日志，监控内存</li>
</ul>
<p>示例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuuu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDaemon</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        God god = <span class="keyword">new</span> God();</span><br><span class="line">        You you = <span class="keyword">new</span> You();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(god);</span><br><span class="line">        thread.setDaemon(<span class="keyword">true</span>); <span class="comment">//默认是false表示用户线程，正常是用户线程</span></span><br><span class="line">        thread.start();<span class="comment">//上帝守护线程启动</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(you).start(); <span class="comment">// 你：用户线程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//上帝</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">God</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"God bless you"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//你</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">You</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">36500</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"一辈子开心的活着"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"====goodbye!world======="</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>最后我们消失了，但上帝还在</strong></p>
<h2 id="7-线程同步"><a href="#7-线程同步" class="headerlink" title="7. 线程同步"></a>7. 线程同步</h2><ul>
<li><p>发生场景：多个线程操作同一个资源</p>
</li>
<li><p>什么是并发？</p>
</li>
</ul>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200229163446.png" alt=""></p>
<ul>
<li><p><strong>解决方法：队列 + 锁</strong>  <strong>（synchronized）</strong></p>
</li>
<li><p><strong>synchronized会发生的问题</strong></p>
<ul>
<li>一个线程持有锁会导致其他所有需要这个锁的线程挂起</li>
<li>在多线程的竞争下，加锁会导致性能下降</li>
<li>如果一个优先级高的线程被优先级低的线程拿到了锁，会导致优先级倒置，引起性能的问题</li>
</ul>
</li>
</ul>
<h3 id="7-1-线程不安全的情况"><a href="#7-1-线程不安全的情况" class="headerlink" title="7.1 线程不安全的情况"></a>7.1 线程不安全的情况</h3><ol>
<li>示例 ： 不安全的买票</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//线程不安全：有负数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeBuyTicket</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BuyTicket station = <span class="keyword">new</span> BuyTicket();</span><br><span class="line">        <span class="keyword">new</span> Thread(station,<span class="string">"陪跑"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(station,<span class="string">"可恶的黄牛党"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(station,<span class="string">"可恶的机器人"</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuyTicket</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="comment">//票</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticketNums = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;  <span class="comment">//外部停止方式</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//买票</span></span><br><span class="line">        <span class="keyword">while</span> (flag)&#123;</span><br><span class="line">            buy();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断是否有票</span></span><br><span class="line">        <span class="keyword">if</span>(ticketNums &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//模拟延时</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//买票</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"拿到"</span>+ticketNums--);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>模拟银行取钱</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不安全的取钱</span></span><br><span class="line"><span class="comment">// 两个人去银行取钱，账户</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeBank</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Account account = <span class="keyword">new</span> Account(<span class="number">100</span>,<span class="string">"结婚基金"</span>);</span><br><span class="line">        Drawing you = <span class="keyword">new</span> Drawing(account,<span class="number">50</span>,<span class="string">"你"</span>);</span><br><span class="line">        Drawing wife = <span class="keyword">new</span> Drawing(account,<span class="number">100</span>,<span class="string">"你老婆"</span>);</span><br><span class="line"></span><br><span class="line">        you.start();</span><br><span class="line">        wife.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//账户</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> money; <span class="comment">// 余额</span></span><br><span class="line">    String name; <span class="comment">// 卡名</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(<span class="keyword">int</span> money,String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//银行 : 模拟取款</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Drawing</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    Account account; <span class="comment">//账户</span></span><br><span class="line">    <span class="keyword">int</span> drawingMoney; <span class="comment">//取了多少钱</span></span><br><span class="line">    <span class="keyword">int</span> nowMoney; <span class="comment">//现在手里有多少钱</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Drawing</span><span class="params">(Account account,<span class="keyword">int</span> drawingMoney,String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.account = account;</span><br><span class="line">        <span class="keyword">this</span>.drawingMoney = drawingMoney;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取钱</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(account.money - drawingMoney &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"钱不够了，取不了"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(account.money);</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getName()+nowMoney);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>ArrayList 不安全性</li>
</ol>
<p>原因：少的元素是因为（在同一个时间操作了添加了同一个线程，有重复的结果）</p>
<p><strong>根本原因：从主内存拷贝了工作内存</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//线程不安全的集合</span></span><br><span class="line"><span class="comment">//这里开启了100000条线程</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                list.add(Thread.currentThread().getName());</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200229212815.png" alt=""></p>
<h3 id="7-2-Synchronized"><a href="#7-2-Synchronized" class="headerlink" title="7.2 Synchronized"></a>7.2 Synchronized</h3><p>作用：</p>
<ul>
<li>类似于private关键字（保证数据对象只能被方法访问）</li>
<li>Synchronized用法包括两种：  <ul>
<li>同步方法</li>
<li>同步方法块</li>
</ul>
</li>
<li>Synchronized方法控制对“对象”的访问，<strong>每个对象对应一把锁</strong></li>
<li>每个synchroniez方法都必须获得调用该方法的对象的锁才能执行，否则线程会阻塞</li>
<li>方法一旦执行，就会独占这个锁，直到该方法返回才会释放锁，后面被阻塞的线程才能获得这个锁</li>
</ul>
<h4 id="7-2-1-同步方法"><a href="#7-2-1-同步方法" class="headerlink" title="7.2.1 同步方法"></a>7.2.1 同步方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 安全的买票</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeBuyTicket</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BuyTicket station = <span class="keyword">new</span> BuyTicket();</span><br><span class="line">        <span class="keyword">new</span> Thread(station,<span class="string">"陪跑"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(station,<span class="string">"可恶的黄牛党"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(station,<span class="string">"可恶的机器人"</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuyTicket</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="comment">//票</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticketNums = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;  <span class="comment">//外部停止方式</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//买票</span></span><br><span class="line">        <span class="keyword">while</span> (flag)&#123;</span><br><span class="line">            buy();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span></span>&#123; <span class="comment">//加入了synchronized关键字</span></span><br><span class="line">        <span class="comment">//判断是否有票</span></span><br><span class="line">        <span class="keyword">if</span>(ticketNums &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//模拟延时</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//买票</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"拿到"</span>+ticketNums--);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="7-2-2-同步块"><a href="#7-2-2-同步块" class="headerlink" title="7.2.2 同步块"></a>7.2.2 同步块</h4><p><strong>锁的对象要是增删改的对象</strong></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200302160222.png" alt=""></p>
<p><strong>安全的银行取钱</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 安全的取钱</span></span><br><span class="line"><span class="comment">// 两个人去银行取钱，账户</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeBank</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Account account = <span class="keyword">new</span> Account(<span class="number">100</span>,<span class="string">"结婚基金"</span>);</span><br><span class="line">        Drawing you = <span class="keyword">new</span> Drawing(account,<span class="number">50</span>,<span class="string">"你"</span>);</span><br><span class="line">        Drawing wife = <span class="keyword">new</span> Drawing(account,<span class="number">100</span>,<span class="string">"你老婆"</span>);</span><br><span class="line"></span><br><span class="line">        you.start();</span><br><span class="line">        wife.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//账户</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> money; <span class="comment">// 余额</span></span><br><span class="line">    String name; <span class="comment">// 卡名</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(<span class="keyword">int</span> money,String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//synchronized默认的锁是this,对象本身</span></span><br><span class="line"><span class="comment">//银行 : 模拟取款</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Drawing</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    Account account; <span class="comment">//账户</span></span><br><span class="line">    <span class="keyword">int</span> drawingMoney; <span class="comment">//取了多少钱</span></span><br><span class="line">    <span class="keyword">int</span> nowMoney; <span class="comment">//现在手里有多少钱</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Drawing</span><span class="params">(Account account,<span class="keyword">int</span> drawingMoney,String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.account = account;</span><br><span class="line">        <span class="keyword">this</span>.drawingMoney = drawingMoney;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取钱</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (account)&#123; <span class="comment">//改变锁的对象是account，方法丢入同步方法块</span></span><br><span class="line">            <span class="keyword">if</span>(account.money - drawingMoney &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">"钱不够了，取不了"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(account.money);</span><br><span class="line">            System.out.println(<span class="keyword">this</span>.getName()+nowMoney);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Arraylist安全的情况：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//线程安全的集合</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (list)&#123; <span class="comment">//锁的对象是list</span></span><br><span class="line">                    list.add(Thread.currentThread().getName());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="7-2-3-JUC包"><a href="#7-2-3-JUC包" class="headerlink" title="7.2.3 JUC包"></a>7.2.3 JUC包</h4><ul>
<li>java.util.concurrent （java的并发包</li>
<li>CopyOnWriteArrayList是一个线程安全的集合</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> TestJUC;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CopyOnWriteArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//java.util.concurrent （java的并发包）</span></span><br><span class="line"><span class="comment">//测试JUC安全类型的集合</span></span><br><span class="line"><span class="comment">//CopyOnWriteArrayList是一个线程安全的集合</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJUC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CopyOnWriteArrayList&lt;String&gt; list = <span class="keyword">new</span> CopyOnWriteArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                list.add(Thread.currentThread().getName());</span><br><span class="line">            &#125;).start();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">10</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="8-锁"><a href="#8-锁" class="headerlink" title="8. 锁"></a>8. 锁</h2><h3 id="8-1-死锁"><a href="#8-1-死锁" class="headerlink" title="8.1 死锁"></a>8.1 死锁</h3><p><strong>死锁：多个线程互相抱着对象需要的资源，然后形成僵持</strong></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200302161940.png" alt=""></p>
<p>死锁的示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//死锁：多个线程互相抱着对象需要的资源，然后形成僵持</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLock</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MakeUp g1 = <span class="keyword">new</span> MakeUp(<span class="number">0</span>,<span class="string">"灰姑凉"</span>);</span><br><span class="line">        MakeUp g2 = <span class="keyword">new</span> MakeUp(<span class="number">1</span>,<span class="string">"白雪公主"</span>);</span><br><span class="line"></span><br><span class="line">        g1.start();</span><br><span class="line">        g2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//口红</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LipsStick</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//镜子</span></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Mirror</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//化妆</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MakeUp</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//需要的资源只有一份，用static保证只有一份</span></span><br><span class="line">    <span class="keyword">static</span> LipsStick lipsStick = <span class="keyword">new</span> LipsStick();</span><br><span class="line">    <span class="keyword">static</span> Mirror mirror = <span class="keyword">new</span> Mirror();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> choice;<span class="comment">//定义选择</span></span><br><span class="line">    String girlname; <span class="comment">// 使用化妆品的人</span></span><br><span class="line"></span><br><span class="line">    MakeUp(<span class="keyword">int</span> choice, String girlname) &#123;</span><br><span class="line">        <span class="keyword">this</span>.choice = choice;</span><br><span class="line">        <span class="keyword">this</span>.girlname = girlname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//化妆</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            makeup();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//化妆：互相持有对方的锁，就是需要拿到对方的资源</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">makeup</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (choice == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lipsStick) &#123; <span class="comment">//拿到口红的锁</span></span><br><span class="line">                <span class="comment">//获得口红的锁</span></span><br><span class="line">                System.out.println(<span class="keyword">this</span>.girlname + <span class="string">"获得口红的锁"</span>);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">synchronized</span> (mirror) &#123; <span class="comment">//1秒钟后想获得镜子</span></span><br><span class="line">                    System.out.println(<span class="keyword">this</span>.girlname + <span class="string">"获得镜子的锁"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">//拿到镜子的锁</span></span><br><span class="line">            <span class="keyword">synchronized</span> (mirror) &#123;</span><br><span class="line">                <span class="comment">//获得口红的锁</span></span><br><span class="line">                System.out.println(<span class="keyword">this</span>.girlname + <span class="string">"获得镜子的锁"</span>);</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">synchronized</span> (mirror) &#123; <span class="comment">//2秒钟后想拿到口红</span></span><br><span class="line">                    System.out.println(<span class="keyword">this</span>.girlname + <span class="string">"获得口红的锁"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>避免死锁：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">makeup</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (choice == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lipsStick) &#123; <span class="comment">//拿到口红的锁</span></span><br><span class="line">            <span class="comment">//获得口红的锁</span></span><br><span class="line">            System.out.println(<span class="keyword">this</span>.girlname + <span class="string">"获得口红的锁"</span>);</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">synchronized</span> (mirror) &#123; <span class="comment">//1秒钟后想获得镜子</span></span><br><span class="line">            System.out.println(<span class="keyword">this</span>.girlname + <span class="string">"获得镜子的锁"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">//拿到镜子的锁</span></span><br><span class="line">        <span class="keyword">synchronized</span> (mirror) &#123;</span><br><span class="line">            <span class="comment">//获得口红的锁</span></span><br><span class="line">            System.out.println(<span class="keyword">this</span>.girlname + <span class="string">"获得镜子的锁"</span>);</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">synchronized</span> (mirror) &#123; <span class="comment">//2秒钟后想拿到口红</span></span><br><span class="line">            System.out.println(<span class="keyword">this</span>.girlname + <span class="string">"获得口红的锁"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="8-2-死锁避免的方法"><a href="#8-2-死锁避免的方法" class="headerlink" title="8.2 死锁避免的方法"></a>8.2 死锁避免的方法</h3><p>产生死锁的四个必要条件：</p>
<ol>
<li>互斥条件：一个资源每次只能被一个进程使用</li>
<li>请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放。</li>
<li>不剥夺条件：进程已获得的资源，在未使用完之前，不能强行剥夺</li>
<li>循环等待条件：若干进程之间形成一种头尾相接的循环等待资源</li>
</ol>
<p>解决方法：就是解决上面的四个条件</p>
<h3 id="8-3-Lock-锁"><a href="#8-3-Lock-锁" class="headerlink" title="8.3 Lock(锁)"></a>8.3 Lock(锁)</h3><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200302170322.png" alt=""></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200302171144.png" alt=""></p>
<p>之前不安全的案例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试lock锁</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLock</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TestLock2 testLock2 = <span class="keyword">new</span> TestLock2();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">new</span> Thread(testLock2).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(testLock2).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(testLock2).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestLock2</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tickNums = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (tickNums &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>定义lock锁：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义lock锁(可重入锁)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br></pre></td></tr></table></figure>



<p>使用lock锁：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLock</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TestLock2 testLock2 = <span class="keyword">new</span> TestLock2();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(testLock2).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(testLock2).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(testLock2).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestLock2</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tickNums = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义lock锁</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                lock.lock();<span class="comment">// 加锁</span></span><br><span class="line">                <span class="keyword">if</span> (tickNums &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">// 解锁</span></span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8-4-Synchronized和Lock的对比"><a href="#8-4-Synchronized和Lock的对比" class="headerlink" title="8.4 Synchronized和Lock的对比"></a>8.4 Synchronized和Lock的对比</h3><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200302171319.png" alt=""></p>
<h2 id="9-线程协作-线程通信"><a href="#9-线程协作-线程通信" class="headerlink" title="9. 线程协作/线程通信"></a>9. 线程协作/线程通信</h2><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200302171713.png" alt=""></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200302171808.png" alt=""></p>
<p><strong>解决线程之间通信的方法：</strong></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200302171927.png" alt=""></p>
<p><strong>解决方法 1:找个第三者缓冲区</strong></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200302172033.png" alt=""></p>
<p><strong>解决方法 2：信号灯法（设置标志位）</strong><br><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200302172151.png" alt=""></p>
<h3 id="9-1-管程法"><a href="#9-1-管程法" class="headerlink" title="9.1 管程法"></a>9.1 管程法</h3><p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试：生产者消费者模型 （利用缓冲区）：管程法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPc</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Container container = <span class="keyword">new</span> Container();</span><br><span class="line">        <span class="keyword">new</span> Producter(container).start();</span><br><span class="line">        <span class="keyword">new</span> consumer(container).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//生产者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Producter</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    Container container;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Producter</span><span class="params">(Container container)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.container = container;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生产</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            container.push(<span class="keyword">new</span> Chicken(i));</span><br><span class="line">            System.out.println(<span class="string">"生产了第"</span> + i + <span class="string">"只鸡"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//消费者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">consumer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    Container container;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">consumer</span><span class="params">(Container container)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.container = container;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//消费</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"消费了--》"</span>+container.pop().id + <span class="string">"只鸡"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//产品</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chicken</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> id;<span class="comment">//产品编号</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Chicken</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//缓冲区</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Container</span></span>&#123;</span><br><span class="line">    <span class="comment">//需要一个容器大小</span></span><br><span class="line">    Chicken[] chickens = <span class="keyword">new</span> Chicken[<span class="number">10</span>];</span><br><span class="line">    <span class="comment">//容器计数器</span></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//生产者放入产品</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Chicken chicken)</span></span>&#123;</span><br><span class="line">        <span class="comment">//如果容器满了，就需要等待消费者消费</span></span><br><span class="line">        <span class="keyword">if</span> (count == chickens.length)&#123;</span><br><span class="line">            <span class="comment">//通知消费者消费，生产者等待</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果没有满，就需要丢入产品</span></span><br><span class="line">        chickens[count] = chicken;</span><br><span class="line">        count ++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//可以通知消费者消费了</span></span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//消费者消费产品</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Chicken <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断能否消费</span></span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//等待生产者生产，消费者等待</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果可以消费</span></span><br><span class="line">        count--;</span><br><span class="line">        Chicken chicken = chickens[count];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//吃完了，通知生产者生产</span></span><br><span class="line">        <span class="keyword">this</span>.notifyAll(); <span class="comment">//通知生产者生产</span></span><br><span class="line">        <span class="keyword">return</span> chicken;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="9-2-信号灯法"><a href="#9-2-信号灯法" class="headerlink" title="9.2 信号灯法"></a>9.2 信号灯法</h3><ul>
<li>利用标志位</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试声称这消费者问题2 ： 信号灯法（标志位解决）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPc2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TV tv = <span class="keyword">new</span> TV();</span><br><span class="line">        <span class="keyword">new</span> actor(tv).start();</span><br><span class="line">        <span class="keyword">new</span> watcher(tv).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//生产者：演员</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">actor</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    TV tv;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">actor</span><span class="params">(TV tv)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tv = tv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">this</span>.tv.play(<span class="string">"电视节目播放中"</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.tv.play(<span class="string">"纪录片播放中"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//消费者：观众</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">watcher</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    TV tv;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">watcher</span><span class="params">(TV tv)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tv = tv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            tv.watch();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//产品：节目</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TV</span> </span>&#123;  <span class="comment">// T:（演员表演，观众等待） F:（观众观看，演员等待）</span></span><br><span class="line">    <span class="comment">//演员表演</span></span><br><span class="line">    String voice; <span class="comment">// 表演的节目</span></span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(String voice)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!flag)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"演员表演了:"</span> + voice);</span><br><span class="line">        <span class="comment">//通知观众观看</span></span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">        <span class="keyword">this</span>.voice = voice;</span><br><span class="line">        <span class="keyword">this</span>.flag = !<span class="keyword">this</span>.flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//观众看</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">watch</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"观众观看"</span>+ voice);</span><br><span class="line">        <span class="comment">//通知演员表演</span></span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">        <span class="keyword">this</span>.flag = !<span class="keyword">this</span>.flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="10-线程池"><a href="#10-线程池" class="headerlink" title="10. 线程池"></a>10. 线程池</h2><p><strong>ExecutorService：线程池的接口</strong></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200302175344.png" alt=""></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200302180056.png" alt=""></p>
<p>线程池示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试线程池</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPool</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建线程池</span></span><br><span class="line">        <span class="comment">// newFixedThreadPool参数为池子大小</span></span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行</span></span><br><span class="line">        service.execute(<span class="keyword">new</span> Mythread());</span><br><span class="line">        service.execute(<span class="keyword">new</span> Mythread());</span><br><span class="line">        service.execute(<span class="keyword">new</span> Mythread());</span><br><span class="line">        service.execute(<span class="keyword">new</span> Mythread());</span><br><span class="line">        service.execute(<span class="keyword">new</span> Mythread());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 关闭连接</span></span><br><span class="line">        service.shutdownNow();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mythread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">pool-1-thread-1</span><br><span class="line">pool-1-thread-2</span><br><span class="line">pool-1-thread-3</span><br><span class="line">pool-1-thread-4</span><br><span class="line">pool-1-thread-5</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>多线程</tag>
        <tag>lambda表达式</tag>
        <tag>锁</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解并发Synchronized</title>
    <url>/2020/02/21/JavaInterview/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%B9%B6%E5%8F%91Synchronized/</url>
    <content><![CDATA[<h1 id="Synchronized的使用"><a href="#Synchronized的使用" class="headerlink" title="Synchronized的使用"></a>Synchronized的使用</h1><h2 id="1-为什么要使用synchronized"><a href="#1-为什么要使用synchronized" class="headerlink" title="1. 为什么要使用synchronized?"></a>1. 为什么要使用synchronized?</h2><p><strong>原因：在并发编程中存在线程安全问题，</strong></p>
<p><strong>主要原因有：</strong></p>
<ol>
<li>存在共享的数据</li>
<li>多线程共同操作共享数据</li>
<li>关键字synchronized可以保证在同一时刻，只有一个线程可以执行某个方法或者某个代码块</li>
<li>同时synchronized可以保证一个线程的变化可见（可见性），即可以代替volatile。</li>
</ol>
<a id="more"></a>



<h2 id="2-实现原理"><a href="#2-实现原理" class="headerlink" title="2. 实现原理"></a>2. 实现原理</h2><p>synchronized可以保证方法或者代码块在运行的时候，同一时刻只有一个方法可以进入临界区，同时它还可以保证共享变量的内存可见性</p>
<h2 id="3-Synchronized的三种应用方式"><a href="#3-Synchronized的三种应用方式" class="headerlink" title="3. Synchronized的三种应用方式"></a>3. Synchronized的三种应用方式</h2><p><strong>Java中每一个对象都对可以作为锁，这是synchronized实现同步的基础</strong></p>
<ol>
<li>普通同步方法（实例方法）：锁是当前实例对象，进入同步代码前要获得当前实例的锁</li>
<li>静态同步方法：锁是当前类的class对象，进入同步代码前要获得当前类对象的锁</li>
<li>同步方法块：锁是括号里面的对象，对给定对象加锁，进入同步代码库前要获得给定对象的锁</li>
</ol>
<h2 id="4-Synchronized的作用"><a href="#4-Synchronized的作用" class="headerlink" title="4. Synchronized的作用"></a>4. Synchronized的作用</h2><p><strong>Synchronized是Java中解决并发问题的一种最常用最简单的方法，他可以确保线程互斥的访问同步代码</strong></p>
<h2 id="5-使用举例"><a href="#5-使用举例" class="headerlink" title="5. 使用举例"></a>5. 使用举例</h2><h3 id="5-1-synchronized作用于实例方法"><a href="#5-1-synchronized作用于实例方法" class="headerlink" title="5.1 synchronized作用于实例方法"></a>5.1 synchronized作用于实例方法</h3><h4 id="5-1-1-多个线程访问同一个对象的同一个方法"><a href="#5-1-1-多个线程访问同一个对象的同一个方法" class="headerlink" title="5.1.1 多个线程访问同一个对象的同一个方法"></a>5.1.1 多个线程访问同一个对象的同一个方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">synchronizedTest</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//共享资源</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> i =<span class="number">0</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * synchronized 修饰实例方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">increase</span><span class="params">()</span></span>&#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j =<span class="number">0</span> ; j&lt;<span class="number">10000</span>;j++)&#123;</span><br><span class="line">            increase();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        synchronizedTest test = <span class="keyword">new</span> synchronizedTest();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(test);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(test);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>结果如下：</p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200222215735.png" alt=""></p>
<p>分析：当两个线程同时对一个对象的一个方法进行操作，只有一个线程能够抢到锁。因为一个对象只有一把锁，一个线程获取了该对象的锁之后，其他线程无法获取该对象的锁，就不能访问该对象的其他synchronized实例方法，但是可以访问非synchronized修饰的方法</p>
<h4 id="5-1-2-一个线程获取了该对象的锁之后，其他线程来访问其他synchronized实例方法现象"><a href="#5-1-2-一个线程获取了该对象的锁之后，其他线程来访问其他synchronized实例方法现象" class="headerlink" title="5.1.2 一个线程获取了该对象的锁之后，其他线程来访问其他synchronized实例方法现象"></a>5.1.2 一个线程获取了该对象的锁之后，其他线程来访问其他synchronized实例方法现象</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"Method 1 start"</span>);</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           System.out.println(<span class="string">"Method 1 execute"</span>);</span><br><span class="line">           Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println(<span class="string">"Method 1 end"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"Method 2 start"</span>);</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           System.out.println(<span class="string">"Method 2 execute"</span>);</span><br><span class="line">           Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println(<span class="string">"Method 2 end"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">final</span> syncTest test = <span class="keyword">new</span> syncTest();</span><br><span class="line"></span><br><span class="line">           <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">               <span class="meta">@Override</span></span><br><span class="line">               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                   test.method1();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;).start();</span><br><span class="line"></span><br><span class="line">           <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">               <span class="meta">@Override</span></span><br><span class="line">               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                   test.method2();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;).start();</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>



<p>结果如下：</p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200222220131.png" alt=""></p>
<p>分析：可以看出其他线程来访问synchronized修饰的其他方法时需要等待线程1先把锁释放</p>
<h4 id="5-1-3-一个线程获取了该对象的锁之后，其他线程来访问其他非synchronized实例方法现象"><a href="#5-1-3-一个线程获取了该对象的锁之后，其他线程来访问其他非synchronized实例方法现象" class="headerlink" title="5.1.3 一个线程获取了该对象的锁之后，其他线程来访问其他非synchronized实例方法现象"></a>5.1.3 一个线程获取了该对象的锁之后，其他线程来访问其他非synchronized实例方法现象</h4><p>举例：去掉5.1.2中方法二的synchronized</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Method 1 start"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"Method 1 execute"</span>);</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"Method 1 end"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Method 2 start"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"Method 2 execute"</span>);</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"Method 2 end"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> syncTest test = <span class="keyword">new</span> syncTest();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    test.method1();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    test.method2();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>



<p>结果如下：</p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200222220422.png" alt=""></p>
<p>分析：当线程1还在执行时，线程2也执行了，所以当其他线程来访问非synchronized修饰的方法时是可以访问的</p>
<h4 id="5-1-4-当多个线程作用于不同的对象"><a href="#5-1-4-当多个线程作用于不同的对象" class="headerlink" title="5.1.4  当多个线程作用于不同的对象"></a>5.1.4  当多个线程作用于不同的对象</h4><p>示例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuuu.lesson3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">synchronizedTest</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span>  <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">increase</span><span class="params">()</span></span>&#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j =<span class="number">0</span> ; j&lt;<span class="number">10000</span>;j++)&#123;</span><br><span class="line">            increase();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> synchronizedTest());</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> synchronizedTest());</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            t1.join();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            t2.join();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200222221111.png" alt=""></p>
<p>分析：因为两个线程作用于不同的对象，获得的是不同的锁，所以互相并不影响</p>
<h3 id="5-2-Synchronized作用于静态方法"><a href="#5-2-Synchronized作用于静态方法" class="headerlink" title="5.2 Synchronized作用于静态方法"></a>5.2 Synchronized作用于静态方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuuu.lesson3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">synchronizedTest</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//共享资源</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * synchronized 修饰实例方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">increase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10000</span>; j++) &#123;</span><br><span class="line">            increase();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> synchronizedTest());</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> synchronizedTest());</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200222221306.png" alt=""></p>
<p>分析：由例子可知，两个线程实例化两个不同的对象，但是访问的方法是静态的，两个线程发生了互斥（即一个线程访问，另一个线程只能等着），因为静态方法是依附于类而不是对象的，当synchronized修饰静态方法时，锁是class对象。</p>
<h3 id="5-3-Synchronized作用于同步代码块"><a href="#5-3-Synchronized作用于同步代码块" class="headerlink" title="5.3 Synchronized作用于同步代码块"></a>5.3 Synchronized作用于同步代码块</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">synchronizedTest</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> synchronizedTest instance=<span class="keyword">new</span> synchronizedTest();</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//省略其他耗时操作....</span></span><br><span class="line">        <span class="comment">//使用同步代码块对变量i进行同步操作,锁对象为instance</span></span><br><span class="line">        <span class="keyword">synchronized</span>(instance)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">10000</span>;j++)&#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread t1=<span class="keyword">new</span> Thread(instance);</span><br><span class="line">        Thread t2=<span class="keyword">new</span> Thread(instance);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>结果如下：</p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200222221436.png" alt=""></p>
<p>分析：将synchronized作用于一个给定的实例对象instance，即当前实例对象就是锁对象，每次当线程进入synchronized包裹的代码块时就会要求当前线程持有instance实例对象锁，如果当前有其他线程正持有该对象锁，那么新到的线程就必须等待，这样也就保证了每次只有一个线程执行i++;操作。当然除了instance作为对象外。我们还可以使用this对象(代表当前实例)或者当前类的class对象作为锁，如下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//this,当前实例对象锁</span></span><br><span class="line"><span class="keyword">synchronized</span>(<span class="keyword">this</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1000000</span>;j++)&#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//class对象锁</span></span><br><span class="line"><span class="keyword">synchronized</span>(AccountingSync<span class="class">.<span class="keyword">class</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1000000</span>;j++)&#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>多线程</tag>
        <tag>Synchronized</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub+hexo搭建个人博客</title>
    <url>/2020/02/08/personal_server/GitHub-hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="GitHub-hexo搭建个人博客详细教程"><a href="#GitHub-hexo搭建个人博客详细教程" class="headerlink" title="GitHub+hexo搭建个人博客详细教程"></a>GitHub+hexo搭建个人博客详细教程</h1><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200208160405.png" alt=""></p>
<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>​        随着互联网浪潮的翻腾，国内外涌现出越来越多优秀的社交信息分享者，随之优秀的信息分享平台也越来越多，最常见的就是个人博客。GitHub + hexo 是比较受欢迎的一种方式，为什么呢？省钱、简单、快速。如果你也是一个不甘寂寞、喜欢折腾的程序猿（媛），如果你也有过这种想要搭建一个所以自己的博客网站的想法，可以跟着我这篇教程博客一起，它可以让你快速搭建起一个属于自己的个人博客，享受这种从0到1的过程。</p>
<p>朱酱酱的博客 ： <a href="http://zhuuu.work/">链接</a></p>
<a id="more"></a>



<h2 id="2-概念介绍"><a href="#2-概念介绍" class="headerlink" title="2. 概念介绍"></a>2. 概念介绍</h2><h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。<br>Hexo是一个基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Heroku上，是搭建博客的首选框架。我这里选的是GitHub。Hexo的作者是台湾的，对中文支持很友好，可以到 Hexo官网 了解更多细节。</p>
<h3 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h3><p>GitHub是一个代码托管网站和社交编程网站。这里聚集了世界上各路技术牛叉的大牛，和最优秀的代码库。是全球程序员的天堂。因为是国外的，所以界面全是英文。</p>
<h3 id="GitHub-Pages"><a href="#GitHub-Pages" class="headerlink" title="GitHub Pages"></a>GitHub Pages</h3><p>GitHub Pages是用来托管 GitHub 上静态网页的免费站点。</p>
<h2 id="3-搭建步骤"><a href="#3-搭建步骤" class="headerlink" title="3. 搭建步骤"></a>3. 搭建步骤</h2><ul>
<li>环境搭建<ul>
<li>安装git</li>
<li>安装node.js</li>
<li>安装Hexo</li>
</ul>
</li>
<li>获取个人网站域名</li>
<li>GitHub创建个人仓库</li>
<li>推送网站</li>
<li>绑定域名</li>
<li>主题及个性化设置</li>
<li>发布文章</li>
<li>图床选择</li>
<li>其他</li>
</ul>
<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><h4 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h4><p><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">git下载</a></p>
<p>对应下载自己的电脑系统即可</p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200208161128.png" alt=""></p>
<h4 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h4><p>Hexo基于Node.js，我们需要在本机安装Node.js</p>
<p><a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">nodejs下载</a></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200208161252.png" alt=""></p>
<p>安装完成后需要检查是否正确安装：以下都需要检查</p>
<p>检查Node.js是否安装成功，打开命令窗口，输入 <code>node -v</code></p>
<p>检查npm是否安装成功，在命令窗口输入 <code>npm -v</code></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200208161424.png" alt=""></p>
<h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><p>​    hexo就是我们用于搭建个人博客的框架，这个时候我们需要在我们本地文件夹中创建一个用于博客管理的文件夹，我命名为Blog。hexo框架与以后写作发布的网页等都会保存在这个文件夹中，创建好之后进入文件夹，按住shift，然后鼠标右键-在此处打开命令行</p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200208161519.png" alt=""></p>
<p>使用npm命令安装Hexo，输入：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>耐心等待安装完成，完成之后，初始化我们的博客，输入：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">hexo init bolg</span><br></pre></td></tr></table></figure>

<p>注意，这些命令都作用于我们刚刚新建的Blog文件夹中。</p>
<p>此时我们检测一下我们网站的雏形，按顺序输入以下三条命令：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">hexo new hello Hexo    //新建一篇名为"hello Hexo"的博客</span><br><span class="line">hexo g                 //生成静态文件</span><br><span class="line">hexo s                 //本地部署预览</span><br></pre></td></tr></table></figure>

<p>此时，我们的网站已经初步成型，可以输入 <code>localhost:4000</code> 访问。</p>
<p>我的blog修改过配置，和你们新搭建的略有区别。</p>
<h4 id="Hexo-常用命令"><a href="#Hexo-常用命令" class="headerlink" title="Hexo 常用命令"></a>Hexo 常用命令</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">npm install hexo -g //安装Hexo</span><br><span class="line">npm update hexo -g //升级 </span><br><span class="line">hexo init //初始化博客</span><br></pre></td></tr></table></figure>

<p><strong>命令缩写</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">hexo n "我的博客" = hexo new "我的博客" //新建文章</span><br><span class="line">hexo g = hexo generate //生成</span><br><span class="line">hexo s = hexo server //启动服务预览</span><br><span class="line">hexo d = hexo deploy //部署</span><br></pre></td></tr></table></figure>

<h3 id="推送网站"><a href="#推送网站" class="headerlink" title="推送网站"></a>推送网站</h3><p>​    上面我们只是在本地预览，接下来要做的就是推送网站，也就是发布网站，让我们的网站在互联网上能被访问到。在设置之前，我们先来看看blog根目录里的<strong>_config.yml文件</strong>，是我们的<strong>站点配置文件</strong>，如下图：</p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200208161947.png" alt=""></p>
<p>进入根目录的themes文件夹的任意主题目录，也有一个_config.yml文件，这个是主题配置文件，如下图：</p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200208162032.png" alt=""></p>
<h4 id="将hexo与gitHub关联"><a href="#将hexo与gitHub关联" class="headerlink" title="将hexo与gitHub关联"></a>将hexo与gitHub关联</h4><p>打开blog根目录下的站点配置配置文件_config.yml，修改成下面的样子并保存</p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200208162127.png" alt=""></p>
<p>这一步其实就是给 <code>hexo d</code> 这个部署命令做相应的配置</p>
<p>让hexo知道你要把blog部署到哪，很显然我们是部署到github仓库里。</p>
<p>然后我们要安装git部署插件，输入以下命令：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">hexo clean //清理静态文件</span><br><span class="line">hexo g //生成静态文件</span><br><span class="line">hexo d //部署</span><br></pre></td></tr></table></figure>

<p>​    完成后打开浏览器，在地址栏输入你的放置个人网站的仓库路径，即xxxx.github.io，其中xxxx表示我们的用户名。当然这里有个前提，你是按照<strong>用户名</strong>.github.io的形式来命名你的仓库。你就会发现你的博客已经上线了，可以在网络上被访问了。</p>
<h3 id="绑定域名（可选）"><a href="#绑定域名（可选）" class="headerlink" title="绑定域名（可选）"></a>绑定域名（可选）</h3><p>​        虽然在Internet上可以访问我们的网站，但是网址是GitHub提供的:xxxx.github.io， 而我们想使用我们自己的个性化域名，这就需要绑定我们自己的域名。</p>
<p>​        这里演示的是在阿里云万网的域名绑定，在国内主流的域名代理厂商也就阿里云和腾讯云。登录到阿里云，进入管理控制台的域名列表，找到你的个性化域名，进入解析</p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200208162443.png" alt=""></p>
<p>  然后添加解析：如图选择解析就好</p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200208162610.png" alt=""></p>
<p>​    包括添加三条解析记录，ip是你的GitHub的地址，你也可以ping你的 xxxx.github.io 的ip地址，填入进去。第三个记录类型是CNAME，CNAME的记录值是：你的用户名.github.io这里千万别弄错了。</p>
<p>第二步：登陆你的github，在对应仓库的settings中把你在阿里云买的域名写上</p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200208162845.png" alt=""></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200208162912.png" alt=""></p>
<p>点击save保存。</p>
<p>第三步：</p>
<p>​        第三步，进入本地博客文件夹 ，进入blog/source目录下，创建一个记事本文件，输入你的域名，对，只要写进你自己的域名即可。如果带有www，那么以后访问的时候必须带有www完整的域名才可以访问，但如果不带有www，以后访问的时候带不带www都可以访问。所以建议，不要带有www：</p>
<p>​    <img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200208163015.png" alt=""></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200208163036.png" alt=""></p>
<p>​    完成这三步，进入blog目录中，按住shift键右击打开命令行，依次输入：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>​    这时候打开浏览器在地址栏输入你的个性化域名将会直接进入你自己搭建的网站。</p>
<h3 id="主题和个性化设置"><a href="#主题和个性化设置" class="headerlink" title="主题和个性化设置"></a>主题和个性化设置</h3><h4 id="更换题主"><a href="#更换题主" class="headerlink" title="更换题主"></a>更换题主</h4><p>​    如果你不喜欢Hexo默认的主题，可以更换不同的主题，</p>
<p>​    主题传送门：<a href="https://link.zhihu.com/?target=https%3A//hexo.io/themes/">Themes</a> </p>
<p>​    个人使用的主题:<a href="https://github.com/Shen-Yu/hexo-theme-ayer" target="_blank" rel="noopener">传送门</a></p>
<p>​    附送一款热度最高的主题next:<a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">传送门</a></p>
<p>​    我自己使用的是ayer主题，可以在blog目录中的themes文件夹中查看你自己主题是什么。现在把默认主题更改成ayer主题，在blog目录中（就是命令行的位置处于blog目录）打开命令行输入：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">$ git clone https://github.com/Shen-Yu/hexo-theme-ayer.git themes/ayer</span><br></pre></td></tr></table></figure>

<p>​    打开<strong>站点</strong>的_config.yml配置文件，修改主题为ayer:</p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200208163433.png" alt=""></p>
<h3 id="图床选择"><a href="#图床选择" class="headerlink" title="图床选择"></a>图床选择</h3><p>​    我使用的markdown编辑器是Typora，这款编辑器插入图片需要绝对路径或者相对路径</p>
<p>​    因为图片放在github上会加载不出来，所以使用了阿里云OSS和PicGO配合使用</p>
<h4 id="PicGo"><a href="#PicGo" class="headerlink" title="PicGo"></a>PicGo</h4><p>​    这款软件是国人做的，非常好用的一款上传图片到云端的软件</p>
<p>​    <a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">PicGo下载链接</a></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200208163804.png" alt=""></p>
<p>配置如下图：</p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200208163841.png" alt=""></p>
<p>上图的key和secret是阿里云oss的配置；接下来将进行介绍</p>
<h4 id="阿里云OSS"><a href="#阿里云OSS" class="headerlink" title="阿里云OSS"></a>阿里云OSS</h4><p>​    关于图床，免费的图床有很多，但是免费的图床总会有很多问题，例如图片链接经常会失效等。</p>
<p>建议还是花点钱弄个付费的，也不贵。我选择的是 阿里云OSS ，很便宜，九块钱一年，超出按留流量收费。</p>
<p>另外还有一款超级好用的图床上传工具：PicGo ，真的是十分好用了。</p>
<p>当然还有很多其他好用的图床，阿里云和腾讯云都差不多，SM.MS 等也还可以，总之我觉得收费的省心一些，当然你也可以说：“我不要你觉得，我要我觉得”，哈哈。</p>
<p><a href="https://oss.console.aliyun.com/overview" target="_blank" rel="noopener">阿里云OSS</a></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200208164117.png" alt=""></p>
<p>首先去购买 <a href="https://oss.console.aliyun.com/overview" target="_blank" rel="noopener">阿里云OSS</a></p>
<p>然后按照下图创建bucket:</p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200208164319.png" alt=""></p>
<p>如果上述情况有不懂的地方，可以参照下面这个链接，很详细的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.csdn.net&#x2F;qq_40241957&#x2F;article&#x2F;details&#x2F;89490282</span><br></pre></td></tr></table></figure>



<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>其他</p>
<p>我踩过的坑</p>
<p>​    1、域名买.top的就可以，土豪请随意</p>
<p>​    2、修改配置文件，很容易搞错路径，因为这个站点内同名的文件在很多路径下都有，例如_config.yml</p>
<p>​    3、如果安装hexo过程中或者之前有报错，建议你重装。一旦出错了，基本就是你的操作问题了，而且很难发现、解决，解决错误的时间可以重装很多次了</p>
<p>​    4、域名的绑定，关于添加解析，很容易出错！！有的博主说是三条，有的博主说是只需要一条，就是不要A记录的解析，保留一个CNAME的解析，我是添加了三条的，如果你遇到什么问题，可以试试只保留CNAME，百度一下解决方案</p>
<h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><ol>
<li>个性固然好，但是在设置的时候一定要细心，这些都是要打开代码文件去修改的，如果本机装有IDEA，最好用它来编辑，没装的话IDEA的话，VSCODE也行</li>
<li>图床选择要谨慎，建议选择知名图床，有很小的图床经常会失效，另外图片文件一定要在本地留有备份<br>个性化可以让你的博客看起来高大上许多，但最重要的还是我们持续的价值输出，坚持写博客才是真理，不要忘记我们搭建博客的初心（当我知道很多小伙伴和我一样，就是喜欢折腾，哈哈）</li>
<li>博客的源文件，也可以托管到github上，特别是博文对应得md文件，一定别弄丢了，整个站点文件都托管的话，可以多台电脑去管理你的博客</li>
<li>国内访问GitHub得速度不理想，可以将博客同时部署到GitHub和coding，提高国内访问速度</li>
</ol>
<h2 id="到这里恭喜你成功的搭建好了自己的博客！！！"><a href="#到这里恭喜你成功的搭建好了自己的博客！！！" class="headerlink" title="到这里恭喜你成功的搭建好了自己的博客！！！"></a>到这里恭喜你成功的搭建好了自己的博客！！！</h2>]]></content>
      <tags>
        <tag>Git</tag>
        <tag>nodejs</tag>
        <tag>hexo</tag>
        <tag>aliyun</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA:配置优化</title>
    <url>/2020/02/08/config/IDEA-%E9%85%8D%E7%BD%AE%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h1 id="IDEA-配置优化"><a href="#IDEA-配置优化" class="headerlink" title="IDEA:配置优化"></a>IDEA:配置优化</h1><p>​        工欲善其事必先利其器，我平时比较喜欢使用IDEA，这个软件可以很大程度上提高工作效率。IDEA全称IntelliJ IDEA，是用于java语言开发的集成环境（也可用于其他语言），IntelliJ在业界被公认为最好的java开发工具之一，尤其在智能代码助手、代码自动提示、重构、J2EE支持、Ant、JUnit、CVS整合、代码审查、 创新的GUI设计等方面的功能可以说是超常的。IDEA是JetBrains公司的产品，这家公司总部位于捷克共和国的首都布拉格，开发人员以严谨著称的东欧程序员为主。<br>​        一直都有想过写一篇关于IDEA的设置优化的博文，因为确实网上的不是很适合我的风格。且网上的优化教程不是很多，自己摸索出来一下，希望能够帮到大家。</p>
<a id="more"></a>



<h2 id="1-工具栏优化"><a href="#1-工具栏优化" class="headerlink" title="1.工具栏优化"></a>1.工具栏优化</h2><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200208154440.png" alt=""></p>
<h2 id="2-设置说明"><a href="#2-设置说明" class="headerlink" title="2.设置说明"></a>2.设置说明</h2><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200208154601.png" alt=""></p>
<h2 id="3-主题修改"><a href="#3-主题修改" class="headerlink" title="3.主题修改"></a>3.主题修改</h2><p>安装IDEA的时候选过主题，后期假如要换的话</p>
<p><strong>Appearance&amp;Behavior -&gt; Appearance</strong></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200208154943.png" alt=""></p>
<h2 id="4-字体修改"><a href="#4-字体修改" class="headerlink" title="4.字体修改"></a>4.字体修改</h2><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200208155026.png" alt=""></p>
<h2 id="5-开启IDEA不自动打开项目"><a href="#5-开启IDEA不自动打开项目" class="headerlink" title="5.开启IDEA不自动打开项目"></a>5.开启IDEA不自动打开项目</h2><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200208155129.png" alt=""></p>
<h2 id="6-字体滚轮调整字体大小"><a href="#6-字体滚轮调整字体大小" class="headerlink" title="6.字体滚轮调整字体大小"></a>6.字体滚轮调整字体大小</h2><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200208155221.png" alt=""></p>
<h2 id="7-鼠标悬浮提醒"><a href="#7-鼠标悬浮提醒" class="headerlink" title="7.鼠标悬浮提醒"></a>7.鼠标悬浮提醒</h2><p>​    鼠标移动到一个类上，会提示这个类的文档解释信息；IDEA里默认不会这样，我们需要设置下；这里的话 我们要勾选下，后面设置的是延迟时间 默认半秒；</p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200208155305.png" alt=""></p>
<h2 id="8-忽略大小写提示"><a href="#8-忽略大小写提示" class="headerlink" title="8.忽略大小写提示"></a>8.忽略大小写提示</h2><p>​    <strong>IDEA默认提示是区分大小写的，比如输入string，不会提示String类；这里设置下</strong></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200208155401.png" alt=""></p>
<h2 id="9-自动导包"><a href="#9-自动导包" class="headerlink" title="9.自动导包"></a>9.自动导包</h2><p>​    IDEA提供了自动导包设置；</p>
<p>​    下拉选All， 然后下面两个勾选下即可；不仅能自动导包，自己试下会知道，还能自动去包；</p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200208155448.png" alt=""></p>
<h2 id="10-统一文件编码"><a href="#10-统一文件编码" class="headerlink" title="10.统一文件编码"></a>10.统一文件编码</h2><p>​    *<em>所有地方都设置成UTF-8 *</em></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200208155601.png" alt=""></p>
<h2 id="11-水平或者垂直显示代码"><a href="#11-水平或者垂直显示代码" class="headerlink" title="11.水平或者垂直显示代码"></a>11.水平或者垂直显示代码</h2><p>​    <strong>有时候为了比对或者参数代码，需要让代码水平或者垂直显示，IDEA里，我们右键文件Tab，显示如下</strong></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200208155710.png" alt=""></p>
<h2 id="12-包折叠"><a href="#12-包折叠" class="headerlink" title="12.包折叠"></a>12.包折叠</h2><p>  <strong>把包折叠起来，这样会更加美观</strong></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200208155804.png" alt=""></p>
<hr>
<p><strong>这些配置编辑完成后，就可以愉快的开始编写代码了~*</strong></p>
]]></content>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解Java虚拟机</title>
    <url>/2020/01/24/JavaInterview/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>JVM</tag>
        <tag>JMM</tag>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>云服务器JDK配置</title>
    <url>/2019/12/25/personal_server/%E6%9C%8D%E5%8A%A1%E5%99%A8JDK%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="云服务器JDK配置"><a href="#云服务器JDK配置" class="headerlink" title="云服务器JDK配置"></a>云服务器JDK配置</h1><h2 id="1-JDK下载"><a href="#1-JDK下载" class="headerlink" title="1. JDK下载"></a>1. JDK下载</h2><ul>
<li>进入java下载页(<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a> )</li>
<li>下载java的JDK,选择”jdk-8u161-linux-i586.tar.gz”文件,下载到本地.</li>
</ul>
<h2 id="2-JDK的安装"><a href="#2-JDK的安装" class="headerlink" title="2. JDK的安装"></a>2. JDK的安装</h2><p>因为usr/lib目录下的操作是需要管理员权限的所以要在命令前加sudo</p>
<ul>
<li>确认 /usr/lib/目录下有jvm文件夹，如果没有用 sudo 权限创建 jvm文件夹(进入到该目录下,sudo mkdir jvm)</li>
<li>将下载的文件解压到该目录下(命令:sudo tar zxvf ./jdk-8u161-linux-i586.tar.gz  -C /usr/lib/jvm)</li>
</ul>
<h2 id="3-配置环境变量"><a href="#3-配置环境变量" class="headerlink" title="3. 配置环境变量"></a>3. 配置环境变量</h2><p>打开环境路径文件:sudo vi ~/.profile</p>
<p>添加如下的语句到文末:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME&#x3D;&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;jdk1.8.0_161</span><br><span class="line">export JRE_HOME&#x3D;$&#123;JAVA_HOME&#125;&#x2F;jre</span><br><span class="line">export CLASSPATH&#x3D;.:$&#123;JAVA_HOME&#125;&#x2F;lib:$&#123;JRE_HOME&#125;&#x2F;lib</span><br><span class="line">export PATH&#x3D;$&#123;JAVA_HOME&#125;&#x2F;bin:$PATH</span><br></pre></td></tr></table></figure>

<p><strong>source ~/.profile， 更新环境变量</strong></p>
<h2 id="4-结果测试"><a href="#4-结果测试" class="headerlink" title="4. 结果测试"></a>4. 结果测试</h2><p>输入 java -version,如果提示对应的java版本信息则安装成功</p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200226204947.png" alt=""></p>
<h2 id="5-命令总结"><a href="#5-命令总结" class="headerlink" title="5.命令总结"></a>5.命令总结</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sudo mkdir jvm</span><br><span class="line">sudo tar zxvf ./jdk-<span class="number">8</span>u161-linux-i586.tar.gz   -C /usr/lib/jvm</span><br><span class="line">sudo vi ~/.profile</span><br><span class="line">export JAVA_HOME=/usr/lib/jvm/jdk1<span class="number">.8</span><span class="number">.0_161</span></span><br><span class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</span><br><span class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib</span><br><span class="line">export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</span><br><span class="line">source ~/.profile</span><br><span class="line">java -version</span><br></pre></td></tr></table></figure>

<h2 id="6-可能出现的问题"><a href="#6-可能出现的问题" class="headerlink" title="6.可能出现的问题"></a>6.可能出现的问题</h2><ol>
<li>程序 ‘java’ 已包含在下列软件包中：<ul>
<li>default-jre</li>
<li>gcj-4.9-jre-headless</li>
<li>gcj-5-jre-headless</li>
<li>openjdk-8-jre-headless</li>
<li>gcj-4.8-jre-headless</li>
<li>openjdk-9-jre-headless<br>请尝试：sudo apt install &lt;选定的软件包&gt;</li>
</ul>
</li>
</ol>
<p>** 解决方法:手动设置系统默认JDK**</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sudo update-alternatives --install  /usr/bin/java   java  /usr/lib/jvm/jdk1<span class="number">.8</span><span class="number">.0_161</span>/bin/java <span class="number">300</span></span><br><span class="line">    </span><br><span class="line">sudo update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/jdk1<span class="number">.8</span><span class="number">.0_161</span>/bin/javac <span class="number">300</span></span><br><span class="line">    </span><br><span class="line">sudo update-alternatives --config java</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>JDK</tag>
        <tag>云服务器开发环境</tag>
      </tags>
  </entry>
  <entry>
    <title>云服务器Tomcat配置</title>
    <url>/2019/12/25/personal_server/%E6%9C%8D%E5%8A%A1%E5%99%A8Tomcat%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="云服务器Tomcat配置"><a href="#云服务器Tomcat配置" class="headerlink" title="云服务器Tomcat配置"></a>云服务器Tomcat配置</h1><h2 id="1-Tomcat的下载"><a href="#1-Tomcat的下载" class="headerlink" title="1.Tomcat的下载"></a>1.Tomcat的下载</h2><p>下载地址:<a href="https://tomcat.apache.org/download-80.cgi" target="_blank" rel="noopener">https://tomcat.apache.org/download-80.cgi</a></p>
<h2 id="2-Tomcat的启动"><a href="#2-Tomcat的启动" class="headerlink" title="2.Tomcat的启动"></a>2.Tomcat的启动</h2><ul>
<li><p>如果你的Tomcat的JDK配置好的话,理论上这一步可以直接把Tomcat启动</p>
</li>
<li><p>如果JDK已经配置好,</p>
<ul>
<li>可以直接进入tomcat服务器的bin目录，然后执行”./startup.sh”命令启动Tomcat服务器.</li>
</ul>
</li>
</ul>
<a id="more"></a>

<h2 id="3-测试验证"><a href="#3-测试验证" class="headerlink" title="3.测试验证"></a>3.测试验证</h2><p>在浏览器地址栏输入:</p>
<p><a href="http://127.0.0.1:8080/" target="_blank" rel="noopener">http://127.0.0.1:8080/</a></p>
<p>如果出现Tomcat的主页,即安装成功,</p>
<h2 id="4-其他"><a href="#4-其他" class="headerlink" title="4.其他"></a>4.其他</h2><p><strong>问题1：如何修改8080端口为80？</strong></p>
<p><strong>回答：</strong></p>
<p>基于Linux内核的操作系统1024以内的端口为系统保留端口，所以我们即使修改了配置文件中的port=“80”也是没有用的。其实想要在Linux环境中配置80端口也是非常方便的。</p>
<p>使用下面的命令即可</p>
<p><code>sudo iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 8080</code></p>
<p><strong>问题2:如何查看Tomcat的控制台输出？</strong></p>
<p><strong>回答：</strong></p>
<p>在Tomcat/logs 目录下有一个catalina.out文件。我们使用tail 命令打开这个文件即可</p>
<p>tail -f catalina.out</p>
]]></content>
      <tags>
        <tag>云服务器开发环境</tag>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>云服务器Mysql配置</title>
    <url>/2019/12/25/personal_server/%E6%9C%8D%E5%8A%A1%E5%99%A8Mysql%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="云服务器Mysql配置"><a href="#云服务器Mysql配置" class="headerlink" title="云服务器Mysql配置"></a>云服务器Mysql配置</h1><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h2><p>（1）升级apt-get</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure>

<p>如果不是root用户，就要用下面的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>（2）安装mysql-client-core-5.7</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">apt-get install mysql-client-core-<span class="number">5.7</span></span><br></pre></td></tr></table></figure>

<p>如果不是root用户，则用下面的命令：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sudo apt-get install mysql-client-core-<span class="number">5.7</span></span><br></pre></td></tr></table></figure>

<p>（3）安装mysql-client-5.7</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">apt-get install mysql-client-<span class="number">5.7</span></span><br></pre></td></tr></table></figure>

<p>如果不是root用户，就执行下面命令：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sudo apt-get install mysql-client-<span class="number">5.7</span></span><br></pre></td></tr></table></figure>

<p>（4）安装mysql-server-5.7</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">apt-get install mysql-server-<span class="number">5.7</span></span><br></pre></td></tr></table></figure>

<p>如果不是root，就执行下面命令：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sudo apt-get install mysql-server-<span class="number">5.7</span></span><br></pre></td></tr></table></figure>

<p>（5）检查mysql是否启动</p>
<p>1.查看mysql进程是否运行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ps -ef | grep mysql</span><br></pre></td></tr></table></figure>

<p>2.查看msyql 监听端口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">netstat -tap | grep mysql</span><br></pre></td></tr></table></figure>

<p>（6）开启mysql</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">service mysql start</span><br></pre></td></tr></table></figure>

<p>（7）关闭mysql</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">service mysql stop</span><br></pre></td></tr></table></figure>

<p>（8）重启mysql</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">service mysql restart</span><br></pre></td></tr></table></figure>

<p>（9）当mysql服务，开启之后，进入mysql</p>
<p>执行命令：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure>

<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200226212752.png" alt=""></p>
<h2 id="2-解决：外网访问服务器的数据库问题"><a href="#2-解决：外网访问服务器的数据库问题" class="headerlink" title="2. 解决：外网访问服务器的数据库问题"></a>2. 解决：外网访问服务器的数据库问题</h2><p>（1）修改服务器中mysql的配置文件</p>
<p>使用命令：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure>

<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200226212849.png" alt=""></p>
<p>（2）修改阿里云的安全组端口控制问题</p>
<p><strong><em>\</em>具体的步骤，请查看，对于Tomcat安装的步骤**</strong></p>
<p><strong><em>\</em>只是需要将3306这个端口也加入到安全组里面去就可以了，请参考添加8080端口的步骤。。**</strong></p>
<p>（3）在mysql中设置运行外网访问权限</p>
<p>备注：这个代码是在进入mysql中执行的，也就是在通过mysql -u账号 -p密码之后执行的。。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">grant all privileges on *.* to root@<span class="string">"%"</span> identified by <span class="string">"xxxx"</span> with grant option;</span><br></pre></td></tr></table></figure>

<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200226213216.png" alt=""></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200226213424.png" alt=""></p>
<p>然后再执行下面的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>

<h2 id="3-解决：mysql无法插入中文，插入中文乱码的问题"><a href="#3-解决：mysql无法插入中文，插入中文乱码的问题" class="headerlink" title="3. 解决：mysql无法插入中文，插入中文乱码的问题"></a>3. 解决：mysql无法插入中文，插入中文乱码的问题</h2><p>方法：通过下面的命令：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure>

<p>然后，添加下面的标注的内容：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">character-set-server=utf8  </span><br><span class="line">collation-server = utf8_unicode_ci  </span><br><span class="line">init_connect = <span class="string">'set collation_connection = utf8_unicode_ci;'</span></span><br></pre></td></tr></table></figure>

<p>然后，再进入mysql中，执行命令:</p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200226212450.png" alt=""></p>
<p>就可以看到数据库的编码方式都变成了utf8，这样的话，插入中文就不会显示乱码问题。</p>
]]></content>
      <tags>
        <tag>Mysql</tag>
        <tag>云服务器开发环境</tag>
      </tags>
  </entry>
  <entry>
    <title>MarkDown语法</title>
    <url>/2019/12/12/personal_server/MarkDown%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="MarkDown-语法（快速上手）"><a href="#MarkDown-语法（快速上手）" class="headerlink" title="MarkDown 语法（快速上手）"></a>MarkDown 语法（快速上手）</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Markdown是一种纯文本格式的标记语言。通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p>
<p><strong>优点：</strong></p>
<p>1、因为是纯文本，所以只要支持Markdown的地方都能获得一样的编辑效果，可以让作者摆脱排版的困扰，专心写作。</p>
<p>2、操作简单。比如:WYSIWYG编辑时标记个标题，先选中内容，再点击导航栏的标题按钮，选择几级标题。要三个步骤。而Markdown只需要在标题内容前加#即可</p>
<a id="more"></a>



<h2 id="1-设置标题"><a href="#1-设置标题" class="headerlink" title="1. 设置标题"></a>1. 设置标题</h2><p>在想要设置为标题的文字前面加#来表示<br>一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。</p>
<p>注：标准语法一般在#后跟个空格再写文字，貌似简书不加空格也行。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">示例：</span><br><span class="line"><span class="section"># 这是一级标题</span></span><br><span class="line"><span class="section">## 这是二级标题</span></span><br><span class="line"><span class="section">### 这是三级标题</span></span><br><span class="line"><span class="section">#### 这是四级标题</span></span><br><span class="line"><span class="section">##### 这是五级标题</span></span><br><span class="line"><span class="section">###### 这是六级标题</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6><h2 id="2-字体"><a href="#2-字体" class="headerlink" title="2.字体"></a>2.字体</h2><ul>
<li><h5 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h5><p>要加粗的文字左右分别用两个*号包起来</p>
</li>
<li><h5 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h5><p>要倾斜的问子左右分别用一个*包起来</p>
</li>
<li><h5 id="斜体加粗"><a href="#斜体加粗" class="headerlink" title="斜体加粗"></a>斜体加粗</h5><p>要倾斜和加粗的文字左右分别用三个*号包起来</p>
</li>
<li><h5 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h5><p>要加删除线的文字左右分别用两个~~号包起来</p>
</li>
</ul>
<p>示例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="strong">**这是加粗的文字**</span></span><br><span class="line"><span class="emphasis">*这是倾斜的文字*</span>`</span><br><span class="line"><span class="strong">***这是斜体加粗的文字**</span>*</span><br><span class="line">~~这是加删除线的文字~~</span><br></pre></td></tr></table></figure>



<h2 id="3-引用"><a href="#3-引用" class="headerlink" title="3. 引用"></a>3. 引用</h2><p>在引用的文字前加&gt;即可。</p>
<p>引用也可以嵌套，如加两个&gt;&gt;</p>
<p>三个&gt;&gt;&gt;</p>
<p>n个…</p>
<p>貌似可以一直加下去，但没神马卵用</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&gt;这是引用的内容</span><br><span class="line">&gt;&gt;这是引用的内容</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容</span><br></pre></td></tr></table></figure>



<h2 id="4-分割线"><a href="#4-分割线" class="headerlink" title="4. 分割线"></a>4. 分割线</h2><p>三个或三个以上的- 或者*都可以</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">----</span><br><span class="line">---</span><br><span class="line"><span class="emphasis">***</span></span><br><span class="line"><span class="emphasis">***</span>*</span><br></pre></td></tr></table></figure>

<hr>
<hr>
<hr>
<hr>
<p>可以看到，显示效果是一样的。</p>
<h2 id="5-图片"><a href="#5-图片" class="headerlink" title="5. 图片"></a>5. 图片</h2><p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![图片alt](图片地址 &#39;&#39;图片title&#39;&#39;)</span><br><span class="line"></span><br><span class="line">图片alt就是显示在图片下面的文字，相当于对图片内容的解释。</span><br><span class="line">图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</span><br></pre></td></tr></table></figure>

<p> 示例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![blockchain](https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/</span><br><span class="line">u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg "区块链")</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p>![blockchain](<a href="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/" target="_blank" rel="noopener">https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/</a><br>u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg “区块链”)</p>
<h2 id="6-超链接"><a href="#6-超链接" class="headerlink" title="6. 超链接"></a>6. 超链接</h2><p>语法：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">超链接名</span>](<span class="link">超链接地址 "超链接title"</span>)</span><br><span class="line">title可加可不加</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[简书](http:&#x2F;&#x2F;jianshu.com)</span><br><span class="line">[百度](http:&#x2F;&#x2F;baidu.com)</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><a href="http://jianshu.com" target="_blank" rel="noopener">简书</a><br><a href="http://baidu.com" target="_blank" rel="noopener">百度</a></p>
<p><strong>注：Markdown本身语法不支持链接在新页面中打开，貌似简书做了处理，</strong></p>
<p><strong>如果想要在新页面中打开的话可以用html语言的a标签代替。</strong></p>
<p>语法：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"超链接地址"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span></span>超链接名<span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<h2 id="7-列表"><a href="#7-列表" class="headerlink" title="7. 列表"></a>7. 列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>语法：无序列表用 - + * 任何一种都可以</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 列表内容</span><br><span class="line">+ 列表内容</span><br><span class="line">* 列表内容</span><br><span class="line"></span><br><span class="line">注意：- + * 跟内容之间都要有一个空格</span><br></pre></td></tr></table></figure>



<p>效果如下：</p>
<ul>
<li><p>列表内容</p>
</li>
<li><p>列表内容</p>
</li>
<li><p>列表内容</p>
</li>
</ul>
<h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>语法：数字加点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.列表内容</span><br><span class="line">2.列表内容</span><br><span class="line">3.列表内容</span><br><span class="line"></span><br><span class="line">注意：序号跟内容之间要有空格</span><br></pre></td></tr></table></figure>



<p>效果如下：</p>
<p>1.列表内容<br>2.列表内容<br>3.列表内容</p>
<h3 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h3><p><strong><em>上一级和下一级之间敲三个空格即可</em></strong></p>
<h2 id="8-表格"><a href="#8-表格" class="headerlink" title="8.表格"></a>8.表格</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">---|:--:|---:</span><br><span class="line">内容|内容|内容</span><br><span class="line">内容|内容|内容</span><br><span class="line"></span><br><span class="line">第二行分割表头和内容。</span><br><span class="line">- 有一个就行，为了对齐，多加了几个</span><br><span class="line">文字默认居左</span><br><span class="line">-两边加：表示文字居中</span><br><span class="line">-右边加：表示文字居右</span><br><span class="line">注：原生的语法两边都要用 | 包起来。此处省略</span><br></pre></td></tr></table></figure>



<h2 id="9-代码"><a href="#9-代码" class="headerlink" title="9. 代码"></a>9. 代码</h2><p>语法：<br>单行代码：代码之间分别用一个反引号包起来</p>
<p>多行代码：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</p>
<h2 id="10-流程图"><a href="#10-流程图" class="headerlink" title="10.流程图"></a>10.流程图</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">```flow</span></span><br><span class="line"><span class="code">st=&gt;start: 开始</span></span><br><span class="line"><span class="code">op=&gt;operation: My Operation</span></span><br><span class="line"><span class="code">cond=&gt;condition: Yes or No?</span></span><br><span class="line"><span class="code">e=&gt;end</span></span><br><span class="line"><span class="code">st-&gt;op-&gt;cond</span></span><br><span class="line"><span class="code">cond(yes)-&gt;e</span></span><br><span class="line"><span class="code">cond(no)-&gt;op</span></span><br><span class="line"><span class="code">&amp;```</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">效果如下：</span><br><span class="line">​&#96;&#96;&#96;flow</span><br><span class="line">st&#x3D;&gt;start: 开始</span><br><span class="line">op&#x3D;&gt;operation: My Operation</span><br><span class="line">cond&#x3D;&gt;condition: Yes or No?</span><br><span class="line">e&#x3D;&gt;end</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br><span class="line">&amp;</span><br></pre></td></tr></table></figure>
<pre><code></code></pre>]]></content>
      <tags>
        <tag>MarkDown</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC-整合SSM</title>
    <url>/2019/11/05/SpringMVC/SpringMVC-%E6%95%B4%E5%90%88SSM/</url>
    <content><![CDATA[<h1 id="整合SSM：书籍管理系统"><a href="#整合SSM：书籍管理系统" class="headerlink" title="整合SSM：书籍管理系统"></a>整合SSM：书籍管理系统</h1><h2 id="1-环境要求"><a href="#1-环境要求" class="headerlink" title="1. 环境要求"></a>1. 环境要求</h2><p>环境：</p>
<ul>
<li>IDEA</li>
<li>MySQL 5.7.19</li>
<li>Tomcat 9</li>
<li>Maven 3.6</li>
</ul>
<p>要求：</p>
<ul>
<li>需要熟练掌握MySQL数据库，Spring，JavaWeb及MyBatis知识，简单的前端知识；</li>
</ul>
<h3 id="1-1-数据库环境"><a href="#1-1-数据库环境" class="headerlink" title="1.1 数据库环境"></a>1.1 数据库环境</h3><p>创建一个存放书籍数据的数据库表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE &#96;ssmbuild&#96;;</span><br><span class="line"></span><br><span class="line">USE &#96;ssmbuild&#96;;</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS &#96;books&#96;;</span><br><span class="line"></span><br><span class="line">CREATE TABLE &#96;books&#96; (</span><br><span class="line">  &#96;bookID&#96; INT(10) NOT NULL AUTO_INCREMENT COMMENT &#39;书id&#39;,</span><br><span class="line">  &#96;bookName&#96; VARCHAR(100) NOT NULL COMMENT &#39;书名&#39;,</span><br><span class="line">  &#96;bookCounts&#96; INT(11) NOT NULL COMMENT &#39;数量&#39;,</span><br><span class="line">  &#96;detail&#96; VARCHAR(200) NOT NULL COMMENT &#39;描述&#39;,</span><br><span class="line">  KEY &#96;bookID&#96; (&#96;bookID&#96;)</span><br><span class="line">) ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8</span><br><span class="line"></span><br><span class="line">INSERT  INTO &#96;books&#96;(&#96;bookID&#96;,&#96;bookName&#96;,&#96;bookCounts&#96;,&#96;detail&#96;)VALUES </span><br><span class="line">(1,&#39;Java&#39;,1,&#39;从入门到放弃&#39;),</span><br><span class="line">(2,&#39;MySQL&#39;,10,&#39;从删库到跑路&#39;),</span><br><span class="line">(3,&#39;Linux&#39;,5,&#39;从进门到进牢&#39;);</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="1-2-基本环境搭建"><a href="#1-2-基本环境搭建" class="headerlink" title="1.2 基本环境搭建"></a>1.2 基本环境搭建</h3><ol>
<li>新建一Maven项目！ ssmbuild ， 添加web的支持</li>
<li>导入相关的pom依赖</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Junit--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数据库驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Servlet - JSP --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Mybatis--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Spring--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>资源过滤问题</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--静态资源导出问题--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>建立基本结构和配置框架！</li>
</ol>
<ul>
<li>com.kuang.pojo</li>
<li>com.kuang.dao</li>
<li>com.kuang.service</li>
<li>com.kuang.controller</li>
<li>mybatis-config.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>applicationContext.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-MyBatis层的编写"><a href="#2-MyBatis层的编写" class="headerlink" title="2. MyBatis层的编写"></a>2. MyBatis层的编写</h2><ol>
<li>数据库配置文件 <strong>database.properties</strong></li>
</ol>
<p>(这里url可能要配置时区的问题)</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssmbuild?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>IDEA关联数据库</p>
</li>
<li><p>编写MyBatis的核心配置文件（Mybatis-config.xml）</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.zhuuu.pojo"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--绑定mapper--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"com.zhuuu.dao.BookMapper"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>编写对应的实体类com.zhuuu.pojo.Books</li>
</ol>
<p>使用lombok插件！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuuu.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Books</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> bookID;</span><br><span class="line">    <span class="keyword">private</span> String bookName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> bookCounts;</span><br><span class="line">    <span class="keyword">private</span> String detail;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>编写Dao层的Mapper接口！</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuuu.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhuuu.pojo.Books;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//增加一个Book</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addBook</span><span class="params">(Books book)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据id删除一个Book</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteBookById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新Book</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateBook</span><span class="params">(Books books)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据id查询,返回一个Book</span></span><br><span class="line">    <span class="function">Books <span class="title">queryBookById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询全部Book,返回list集合</span></span><br><span class="line">    <span class="function">List&lt;Books&gt; <span class="title">queryAllBook</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.zhuuu.dao.BookMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--增加一个Book--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addBook"</span> <span class="attr">parameterType</span>=<span class="string">"Books"</span>&gt;</span></span><br><span class="line">        insert into ssmbuild.books(bookName,bookCounts,detail)</span><br><span class="line">        values (#&#123;bookName&#125;, #&#123;bookCounts&#125;, #&#123;detail&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--根据id删除一个Book--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteBookById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">        delete from ssmbuild.books where bookID=#&#123;bookID&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--更新Book--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateBook"</span> <span class="attr">parameterType</span>=<span class="string">"Books"</span>&gt;</span></span><br><span class="line">        update ssmbuild.books</span><br><span class="line">        set bookName = #&#123;bookName&#125;,bookCounts = #&#123;bookCounts&#125;,detail = #&#123;detail&#125;</span><br><span class="line">        where bookID = #&#123;bookID&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--根据id查询,返回一个Book--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryBookById"</span> <span class="attr">resultType</span>=<span class="string">"Books"</span>&gt;</span></span><br><span class="line">        select * from ssmbuild.books</span><br><span class="line">        where bookID = #&#123;bookID&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--查询全部Book--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryAllBook"</span> <span class="attr">resultType</span>=<span class="string">"Books"</span>&gt;</span></span><br><span class="line">        SELECT * from ssmbuild.books</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="7">
<li>编写Service层的接口和实现类</li>
</ol>
<p>接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuuu.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhuuu.pojo.Books;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">//BookService:底下需要去实现,调用dao层</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//增加一个Book</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addBook</span><span class="params">(Books book)</span></span>;</span><br><span class="line">    <span class="comment">//根据id删除一个Book</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteBookById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="comment">//更新Book</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateBook</span><span class="params">(Books books)</span></span>;</span><br><span class="line">    <span class="comment">//根据id查询,返回一个Book</span></span><br><span class="line">    <span class="function">Books <span class="title">queryBookById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="comment">//查询全部Book,返回list集合</span></span><br><span class="line">    <span class="function">List&lt;Books&gt; <span class="title">queryAllBook</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuuu.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhuuu.dao.BookMapper;</span><br><span class="line"><span class="keyword">import</span> com.zhuuu.pojo.Books;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//Service 调 dao层 组合dao</span></span><br><span class="line">    <span class="keyword">private</span> BookMapper bookMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBookMapper</span><span class="params">(BookMapper bookMapper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bookMapper = bookMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addBook</span><span class="params">(Books books)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.addBook(books);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteBookById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.deleteBookById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateBook</span><span class="params">(Books books)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.updateBook(books);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Books <span class="title">queryBookById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.queryBookById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Books&gt; <span class="title">queryAllBook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.queryAllBook();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>OK，到此，底层需求操作编写完毕！</strong></p>
<h2 id="3-Spring层"><a href="#3-Spring层" class="headerlink" title="3. Spring层"></a>3. Spring层</h2><ol>
<li>配置<strong>Spring整合MyBatis</strong>，我们这里数据源使用c3p0连接池；</li>
<li>我们去编写Spring整合Mybatis的相关的配置文件； spring-dao.xml</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">    https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置整合mybatis --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.关联数据库文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:database.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2.数据库连接池 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数据库连接池</span></span><br><span class="line"><span class="comment">    dbcp  半自动化操作  不能自动连接</span></span><br><span class="line"><span class="comment">    c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置连接池属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- c3p0连接池的私有属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span> <span class="attr">value</span>=<span class="string">"30"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span> <span class="attr">value</span>=<span class="string">"10"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 关闭连接后不自动commit --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"autoCommitOnClose"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 获取连接超时时间 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"checkoutTimeout"</span> <span class="attr">value</span>=<span class="string">"10000"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 当获取连接失败重试次数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"acquireRetryAttempts"</span> <span class="attr">value</span>=<span class="string">"2"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3.配置SqlSessionFactory对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置MyBaties全局配置文件:mybatis-config.xml --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--解释 ： https://www.cnblogs.com/jpfss/p/7799806.html--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入sqlSessionFactory --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 给出需要扫描Dao接口包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.zhuuu.dao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>Spring整合service层</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--1.扫描service相关的bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.zhuuu.service"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--2.BookServiceImpl注入到IOC容器中--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"BookServiceImpl"</span> <span class="attr">class</span>=<span class="string">"com.zhuuu.service.BookServiceImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"bookMapper"</span> <span class="attr">ref</span>=<span class="string">"bookMapper"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--3.配置事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！</p>
<h2 id="4-SpringMVC层"><a href="#4-SpringMVC层" class="headerlink" title="4. SpringMVC层"></a>4. SpringMVC层</h2><ol>
<li>配置web.xml</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--DispatcherServlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--乱码过滤--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodeingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodeingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置会话过期时间--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>10<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>Spring-mvc.xml</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">    https://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置SpringMVC --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.开启SpringMVC注解驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2.静态资源默认servlet配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3.配置jsp 显示ViewResolver视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"viewClass"</span> <span class="attr">value</span>=<span class="string">"org.springframework.web.servlet.view.JstlView"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 4.扫描web相关的bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.zhuuu.controller"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="5-Spring整合配置文件"><a href="#5-Spring整合配置文件" class="headerlink" title="5. Spring整合配置文件"></a>5. Spring整合配置文件</h2><p><strong>applicationContext.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath:spring-dao.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath:spring-service.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath:spring-mvc.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>配置文件，暂时结束！</strong></p>
]]></content>
      <tags>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC-结果跳转方式</title>
    <url>/2019/11/04/SpringMVC/SpringMVC-%E7%BB%93%E6%9E%9C%E8%B7%B3%E8%BD%AC%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="SpringMVC-结果跳转方式"><a href="#SpringMVC-结果跳转方式" class="headerlink" title="SpringMVC-结果跳转方式"></a>SpringMVC-结果跳转方式</h1><h2 id="1-ModelAndView"><a href="#1-ModelAndView" class="headerlink" title="1. ModelAndView"></a>1. ModelAndView</h2><p>设置ModelAndView对象 , 根据view的名称 , 和视图解析器跳到指定的页面 .</p>
<p>页面 : {视图解析器前缀} + viewName +{视图解析器后缀}</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">id</span>=<span class="string">"internalResourceViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>对应的Controller类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ControllerTest1</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//返回一个模型视图对象</span></span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mv.addObject(<span class="string">"msg"</span>,<span class="string">"ControllerTest1"</span>);</span><br><span class="line">        mv.setViewName(<span class="string">"test"</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="2-Servlet-API"><a href="#2-Servlet-API" class="headerlink" title="2. Servlet API"></a>2. Servlet API</h2><p>通过设置ServletAPI , 不需要视图解析器 .</p>
<ol>
<li>通过HttpServletResponse进行输出</li>
<li>通过HttpServletResponse实现重定向</li>
<li>通过HttpServletResponse实现转发</li>
</ol>
<p>测试前，需要将视图解析器注释掉</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultGo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/result/t1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        rsp.getWriter().println(<span class="string">"Hello,Spring BY servlet API"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/result/t2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        rsp.sendRedirect(<span class="string">"/index.jsp"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/result/t3"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//转发</span></span><br><span class="line">        req.setAttribute(<span class="string">"msg"</span>,<span class="string">"/result/t3"</span>);</span><br><span class="line">        req.getRequestDispatcher(<span class="string">"/WEB-INF/jsp/test.jsp"</span>).forward(req,rsp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-SpringMVC"><a href="#3-SpringMVC" class="headerlink" title="3. SpringMVC"></a>3. SpringMVC</h2><p><strong>通过SpringMVC来实现转发和重定向 - 无需视图解析器；</strong></p>
<p>测试前，需要将视图解析器注释掉</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultSpringMVC</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/rsm/t1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//转发</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/index.jsp"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/rsm/t2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//转发二</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"forward:/index.jsp"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/rsm/t3"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//重定向</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/index.jsp"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>通过SpringMVC来实现转发和重定向 - 有视图解析器；</strong></p>
<p>重定向 , 不需要视图解析器 , 本质就是重新请求一个新地方嘛 , 所以注意路径问题.</p>
<p>可以重定向到另外一个请求实现 .</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultSpringMVC2</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/rsm2/t1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//转发</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"test"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/rsm2/t2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//重定向</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/index.jsp"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC-Restful风格</title>
    <url>/2019/11/03/SpringMVC/SpringMVC-Restful%E9%A3%8E%E6%A0%BC/</url>
    <content><![CDATA[<h1 id="Restful风格"><a href="#Restful风格" class="headerlink" title="Restful风格"></a>Restful风格</h1><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h2><p>​    Restful就是一个资源定位及资源操作的风格。不是标准也不是协议，只是一种风格。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p>
<h2 id="2-功能"><a href="#2-功能" class="headerlink" title="2. 功能"></a>2. 功能</h2><ul>
<li>资源：互联网所有的事物都可以被抽象为资源</li>
<li>资源操作：使用POST、DELETE、PUT、GET，使用不同方法对资源进行操作。</li>
<li>分别对应 添加、 删除、修改、查询。</li>
</ul>
<a id="more"></a>

<h3 id="2-1-传统方式操作资源"><a href="#2-1-传统方式操作资源" class="headerlink" title="2.1. 传统方式操作资源"></a>2.1. 传统方式操作资源</h3><p>通过不同的参数来实现不同的效果！方法单一，post 和 get</p>
<ul>
<li><a href="http://127.0.0.1/item/queryItem.action?id=1" target="_blank" rel="noopener">http://127.0.0.1/item/queryItem.action?id=1</a> 查询,GET</li>
<li><a href="http://127.0.0.1/item/saveItem.action" target="_blank" rel="noopener">http://127.0.0.1/item/saveItem.action</a> 新增,POST</li>
<li><a href="http://127.0.0.1/item/updateItem.action" target="_blank" rel="noopener">http://127.0.0.1/item/updateItem.action</a> 更新,POST</li>
<li><a href="http://127.0.0.1/item/deleteItem.action?id=1" target="_blank" rel="noopener">http://127.0.0.1/item/deleteItem.action?id=1</a> 删除,GET或POST</li>
</ul>
<h3 id="2-2-使用RESTful操作资源"><a href="#2-2-使用RESTful操作资源" class="headerlink" title="2.2 使用RESTful操作资源"></a>2.2 使用RESTful操作资源</h3><p>可以通过不同的请求方式来实现不同的效果！如下：请求地址一样，但是功能可以不同！</p>
<ul>
<li><a href="http://127.0.0.1/item/1" target="_blank" rel="noopener">http://127.0.0.1/item/1</a> 查询,GET</li>
<li><a href="http://127.0.0.1/item" target="_blank" rel="noopener">http://127.0.0.1/item</a> 新增,POST</li>
<li><a href="http://127.0.0.1/item" target="_blank" rel="noopener">http://127.0.0.1/item</a> 更新,PUT</li>
<li><a href="http://127.0.0.1/item/1" target="_blank" rel="noopener">http://127.0.0.1/item/1</a> 删除,DELETE</li>
</ul>
<p><strong>学习测试</strong></p>
<ol>
<li>在新建一个类 RestFulController</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestFulController</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在Spring MVC中可以使用 @PathVariable 注解，让方法参数的值对应绑定到一个URI模板变量上。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestFulController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//映射访问路径</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/commit/&#123;p1&#125;/&#123;p2&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(@PathVariable <span class="keyword">int</span> p1, @PathVariable <span class="keyword">int</span> p2, Model model)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> result = p1+p2;</span><br><span class="line">        <span class="comment">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span></span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>, <span class="string">"结果："</span>+result);</span><br><span class="line">        <span class="comment">//返回视图位置</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"test"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>测试请求查看下</li>
</ol>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200309085328.png" alt=""></p>
<p>思考：使用路径变量的好处？</p>
<ul>
<li>使得路径变得更加简洁</li>
<li>获得参数更加方便，框架会自动进行类型转换</li>
<li>通过路径变量可以约束访问参数，如果类型不一样，则访问不到对应的请求方法，如这里访问是的路径是/commit/1/a，则路径与方法不匹配，而不会是参数转换失败。</li>
</ul>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200309085449.png" alt=""></p>
<ol start="4">
<li>我们来修改下对应的参数类型，再次测试</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//映射访问路径</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/commit/&#123;p1&#125;/&#123;p2&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(@PathVariable <span class="keyword">int</span> p1, @PathVariable String p2, Model model)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    String result = p1+p2;</span><br><span class="line">    <span class="comment">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span></span><br><span class="line">    model.addAttribute(<span class="string">"msg"</span>, <span class="string">"结果："</span>+result);</span><br><span class="line">    <span class="comment">//返回视图位置</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"test"</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200309085520.png" alt=""></p>
<h4 id="2-2-1-使用method属性指定请求类型"><a href="#2-2-1-使用method属性指定请求类型" class="headerlink" title="2.2.1 使用method属性指定请求类型"></a>2.2.1 使用method属性指定请求类型</h4><p>用于约束请求的类型，可以收窄请求范围。指定请求谓词的类型如GET, POST, HEAD, OPTIONS, PUT, PATCH, DELETE, TRACE等</p>
<p>Spring MVC 的 @RequestMapping 注解能够处理 HTTP 请求的方法, 比如 GET, PUT, POST, DELETE 以及 PATCH。</p>
<p><strong>所有的地址栏请求默认都会是 HTTP GET 类型的。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="meta">@PatchMapping</span></span><br></pre></td></tr></table></figure>

<p>@GetMapping 是一个组合注解</p>
<p>它所扮演的是 @RequestMapping(method =RequestMethod.GET) 的一个快捷方式。</p>
<p>平时使用的会比较多！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestfulController</span>  </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/commit/&#123;p1&#125;/&#123;p2&#125;"</span>,method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(@PathVariable <span class="keyword">int</span> p1 , @PathVariable <span class="keyword">int</span> p2, Model model)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = p1+p2;</span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>,<span class="string">"结果"</span>+result);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"test"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-小黄鸭调试法"><a href="#3-小黄鸭调试法" class="headerlink" title="3. 小黄鸭调试法"></a>3. 小黄鸭调试法</h2><p>场景一：<em>我们都有过向别人（甚至可能向完全不会编程的人）提问及解释编程问题的经历，但是很多时候就在我们解释的过程中自己却想到了问题的解决方案，然后对方却一脸茫然。</em></p>
<p>场景二：你的同行跑来问你一个问题，但是当他自己把问题说完，或说到一半的时候就想出答案走了，留下一脸茫然的你。</p>
<p>其实上面两种场景现象就是所谓的小黄鸭调试法（Rubber Duck Debuging），又称橡皮鸭调试法，它是我们软件工程中最常使用调试方法之一。</p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200309085913.png" alt=""></p>
<p>此概念据说来自《程序员修炼之道》书中的一个故事，传说程序大师随身携带一只小黄鸭，在调试代码的时候会在桌上放上这只小黄鸭，然后详细地向鸭子解释每行代码，然后很快就将问题定位修复了。</p>
]]></content>
      <tags>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>HelloSpringMVC</title>
    <url>/2019/11/02/SpringMVC/SpringMVC-HelloSpringMVC/</url>
    <content><![CDATA[<h1 id="SpringMVC-HelloSpringMVC"><a href="#SpringMVC-HelloSpringMVC" class="headerlink" title="SpringMVC:HelloSpringMVC"></a>SpringMVC:HelloSpringMVC</h1><h2 id="1-配置版实现"><a href="#1-配置版实现" class="headerlink" title="1. 配置版实现"></a>1. 配置版实现</h2><ol>
<li>新建一个Moudle ， 添加web的支持！</li>
<li>确定导入了SpringMVC 的依赖！</li>
<li>配置web.xml ， 注册DispatcherServlet</li>
</ol>
<a id="more"></a>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--配置DispatchServlet:这个是SpringMVC的核心，请求分发器，前端控制器--&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--DispatcherServlet要绑定Spring的配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--启动级别：初始化启动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--在Springmvc中 / 和 /*的区别</span></span><br><span class="line"><span class="comment">/: 只匹配所有的请求，不会匹配JSP页面</span></span><br><span class="line"><span class="comment">/*:匹配所有的请求，包括jsp页面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li><p>编写SpringMVC 的 配置文件！</p>
<p>名称：springmvc-servlet.xml : [servletname]-servlet.xml说明，这里的名称要求是按照官方来的</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>添加处理器映射</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--处理器映射器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li>添加处理器适配器</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--处理器适配器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="7">
<li>添加视图解析器</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--视图解析器 以后模板引擎会使用：Thymeleaf Freemarker--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span> <span class="attr">id</span>=<span class="string">"internalResourceViewResolver"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 前缀和后缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/JSP/"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="8">
<li>编写我们要操作业务的Controller，要么实现Controller接口，要么增加注解；（需要返回一个ModelandView，封装数据，转发视图）</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuuu.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        </span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//业务代码：封装数据</span></span><br><span class="line">        String result = <span class="string">"HelloSpringMVC"</span>;</span><br><span class="line">        mv.addObject(<span class="string">"msg"</span>,result);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//视图跳转</span></span><br><span class="line">        mv.setViewName(<span class="string">"test"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回model and view</span></span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="9">
<li>将自己的类交给SpringIOC容器，注册bean</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--BeanNameUrlHandlerMapping:bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"/hello"</span> <span class="attr">class</span>=<span class="string">"com.zhuuu.Controller.HelloController"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="10">
<li>编写需要跳转的页面</li>
</ol>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">$&#123;msg&#125;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<ol start="11">
<li>配置Tomcat 启动测试！</li>
</ol>
<h3 id="1-1-404error的问题"><a href="#1-1-404error的问题" class="headerlink" title="1.1 404error的问题"></a>1.1 404error的问题</h3><p><strong>可能遇到的问题：访问出现404，排查步骤：</strong></p>
<ol>
<li>查看控制台输出，看一下是不是缺少了什么jar包。</li>
<li>如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！</li>
<li>重启Tomcat 即可解决！</li>
</ol>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200308145607.png" alt=""></p>
<h2 id="2-注解版实现"><a href="#2-注解版实现" class="headerlink" title="2. 注解版实现"></a>2. 注解版实现</h2><p><strong>第一步:新建一个Moudle , 添加web支持！</strong></p>
<p><strong>第二步:由于Maven可能存在资源过滤的问题，我们将配置完善</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>第三步:在pom.xml文件引入相关的依赖</strong>：<br>主要有Spring框架核心库、Spring MVC、servlet , JSTL等。我们在父依赖中已经引入了！</p>
<p><strong>第四步:配置web.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--1.注册servlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--通过初始化参数指定SpringMVC配置文件的位置，进行关联--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 启动顺序，数字越小，启动越早 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--所有请求都会被springmvc拦截 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>第五步:添加Spring MVC配置文件</strong></p>
<ul>
<li>让IOC的注解生效</li>
<li>静态资源过滤 ：HTML . JS . CSS . 图片 ， 视频 …..</li>
<li>MVC的注解驱动</li>
<li>配置视图解析器</li>
</ul>
<p>在resource目录下添加springmvc-servlet.xml配置文件，配置的形式与Spring容器配置基本类似，为了支持基于注解的IOC，设置了自动扫描包的功能，具体配置信息如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描包，让指定包下的注解生效,由IOC容器统一管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.zhuuu.controller"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 让Spring MVC不处理静态资源 .css .js .html .mp3 .mp4--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    支持mvc注解驱动</span></span><br><span class="line"><span class="comment">        在spring中一般采用@RequestMapping注解来完成映射关系</span></span><br><span class="line"><span class="comment">        要想使@RequestMapping注解生效</span></span><br><span class="line"><span class="comment">        必须向上下文中注册DefaultAnnotationHandlerMapping</span></span><br><span class="line"><span class="comment">        和一个AnnotationMethodHandlerAdapter实例</span></span><br><span class="line"><span class="comment">        这两个实例分别在类级别和方法级别处理。</span></span><br><span class="line"><span class="comment">        而annotation-driven配置帮助我们自动完成上述两个实例的注入。</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">id</span>=<span class="string">"internalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>在视图解析器中我们把所有的视图都存放在/WEB-INF/目录下，这样可以保证视图安全，因为这个目录下的文件，客户端不能直接访问。</strong></p>
<p><strong>第六步:创建Controller</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuuu.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span></span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//封装数据</span></span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>,<span class="string">"hello,Spring MVC annatation"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>; <span class="comment">// 会被视图解析器处理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>@Controller是为了让Spring IOC容器初始化时达到自动扫描的目的</strong></p>
<p><strong>@RequestMapping是为了映射请求路径</strong></p>
<p><strong>第七步:创建视图层</strong></p>
<p>在WEB-INF/ jsp目录中创建hello.jsp ， 视图可以直接取出并展示从Controller带回的信息；</p>
<p>可以通过EL表示取出Model中存放的值，或者对象；</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">$&#123;msg&#125;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<p><strong>第八步:配置Tomcat运行</strong></p>
<p><strong>OK，运行成功！</strong></p>
<h3 id="2-1-注意事项"><a href="#2-1-注意事项" class="headerlink" title="2.1 注意事项"></a>2.1 注意事项</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">**/ 和 /\* 的区别：**</span><br><span class="line"><span class="tag">&lt; <span class="attr">url-pattern</span> &gt;</span> / <span class="tag">&lt;/ <span class="attr">url-pattern</span> &gt;</span> 不会匹配到.jsp， 只针对我们编写的请求；</span><br><span class="line">即：.jsp 不会进入spring的 DispatcherServlet类 。</span><br><span class="line"><span class="tag">&lt; <span class="attr">url-pattern</span> &gt;</span> /* <span class="tag">&lt;/ <span class="attr">url-pattern</span> &gt;</span> 会匹配 *.jsp，</span><br><span class="line">会出现返回 jsp视图 时再次进入spring的DispatcherServlet 类，导致找不到对应的controller所以报404错。</span><br></pre></td></tr></table></figure>



<h2 id="3-小结"><a href="#3-小结" class="headerlink" title="3. 小结"></a>3. 小结</h2><p>实现步骤其实非常简单：</p>
<ol>
<li>新建一个web项目</li>
<li>导入相关jar包</li>
<li>编写web.xml，注册DispatchterServlet</li>
<li>编写SpringMVC配置文件</li>
<li>接下来就要使去创建对应的控制类，controller</li>
<li>最后完善前端试图和controller之间的对应</li>
<li>测试运行调试</li>
</ol>
<p><strong>使用springMVC必须配置的三大件：</strong></p>
<p><strong>处理器映射器、处理器适配器、视图解析器</strong></p>
<p>通常，我们只需要<strong>手动配置视图解析器</strong>，而<strong>处理器映射器</strong>和<strong>处理器适配器</strong>只需要开启<strong>注解驱动</strong>即可，而省去了大段的xml配置</p>
]]></content>
      <tags>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>MVC</title>
    <url>/2019/11/01/SpringMVC/SpringMVC-MVC%E6%9E%B6%E6%9E%84/</url>
    <content><![CDATA[<h1 id="回顾MVC"><a href="#回顾MVC" class="headerlink" title="回顾MVC"></a>回顾MVC</h1><h2 id="1-什么是MVC"><a href="#1-什么是MVC" class="headerlink" title="1. 什么是MVC?"></a>1. 什么是MVC?</h2><ul>
<li>MVC是模型（model）,视图（view）,控制器(controller)的简写，是一种软件设计规范</li>
<li>是将业务逻辑代码，数据，显示分离的方法来组织代码</li>
<li>MVC主要的作用是<strong>降低了视图与业务逻辑之间的双向耦合</strong></li>
<li>MVC不是一种设置模式，MVC是一种架构模式，当然不同的MVC存在差异。</li>
</ul>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200308143812.png" alt=""></p>
<a id="more"></a>

<p><strong>Model（模型）：</strong>数据模型，提供要展示的数据，因此包含数据和行为，可以认为是领域模型或JavaBean组件（包含数据和行为），不过现在一般都分离开来：Value Object（数据Dao） 和 服务层（行为Service）。也就是模型提供了模型数据查询和模型数据的状态更新等功能，包括数据和业务。</p>
<p><strong>View（视图）：</strong>负责进行模型的展示，一般就是我们见到的用户界面，客户想看到的东西。</p>
<p><strong>Controller（控制器）：</strong>接收用户请求，委托给模型进行处理（状态改变），处理完毕后把返回的模型数据返回给视图，由视图负责展示。 也就是说控制器做了个调度员的工作。</p>
<p> <strong>最经典的MVC就是：JSP+Servlet+javabean的模式</strong></p>
<h2 id="2-时代划分"><a href="#2-时代划分" class="headerlink" title="2. 时代划分"></a>2. 时代划分</h2><p><strong>Model1时代</strong></p>
<ul>
<li>在web早期的开发中，通常采用的都是Model1。</li>
<li>Model1中，主要分为两层，视图层和模型层。</li>
</ul>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200307090615.png" alt=""></p>
<p><strong>Model2时代</strong></p>
<p>Model2把一个项目分成三部分，包括<strong>视图、控制、模型</strong></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200307090720.png" alt=""></p>
<ol>
<li>用户发送请求</li>
<li>Servlet接受请求数据，并调用对应的业务逻辑方法</li>
<li>业务处理完毕，返回更新后的Servlet</li>
<li>servlet转向JSP,由JSP来渲染页面</li>
<li>响应给前端更新后的页面</li>
</ol>
<p><strong>职业分析</strong></p>
<p><strong>Controller：控制器</strong>（Servlet）</p>
<ol>
<li>取得表单数据</li>
<li>调用业务逻辑</li>
<li>转向指定的页面</li>
</ol>
<p><strong>Model：模型</strong></p>
<ol>
<li>业务逻辑</li>
<li>保存数据的状态</li>
</ol>
<p><strong>View：视图</strong></p>
<h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><ul>
<li><p>Model2这样不仅提高的代码的复用率与项目的扩展性，且大大降低了项目的维护成本。</p>
</li>
<li><p>Model 1模式的实现比较简单，适用于快速开发小规模项目，Model1中JSP页面身兼View和Controller两种角色，将控制逻辑和表现逻辑混杂在一起，从而导致代码的重用性非常低，增加了应用的扩展性和维护的难度。Model2消除了Model1的缺点</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>SpringMVC</tag>
        <tag>MVC</tag>
      </tags>
  </entry>
  <entry>
    <title>注解和反射</title>
    <url>/2019/10/12/JavaInterview/%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<h1 id="注解和反射"><a href="#注解和反射" class="headerlink" title="注解和反射"></a>注解和反射</h1><h2 id="1-注解"><a href="#1-注解" class="headerlink" title="1. 注解"></a>1. 注解</h2><h3 id="1-1-注解的简介"><a href="#1-1-注解的简介" class="headerlink" title="1.1 注解的简介"></a>1.1 注解的简介</h3><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200310171835.png" alt=""></p>
<h3 id="1-2-常见内置注解"><a href="#1-2-常见内置注解" class="headerlink" title="1.2 常见内置注解"></a>1.2 常见内置注解</h3><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200310172715.png" alt=""></p>
<a id="more"></a>

<h3 id="1-3-元注解"><a href="#1-3-元注解" class="headerlink" title="1.3 元注解"></a>1.3 元注解</h3><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200310173327.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuuu.Annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试元注解</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MetaAnnotation</span> </span>&#123;</span><br><span class="line">    <span class="meta">@MyAnnotaion</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个注解</span></span><br><span class="line"><span class="comment">//定义在类上和方法上</span></span><br><span class="line"><span class="comment">//@Target：表示可以注解可以放在哪些上</span></span><br><span class="line"><span class="comment">//@Retention：表示我们的注解在什么时候有效 （runtime&gt;class&gt;source）</span></span><br><span class="line"><span class="comment">//@Documented:表示是否把注解声称在Javadoc中</span></span><br><span class="line"><span class="comment">//@Inherited :表示时候继承父类的注解</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD,ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@interface</span> MyAnnotaion&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1-4-自定义注解"><a href="#1-4-自定义注解" class="headerlink" title="1.4 自定义注解"></a>1.4 自定义注解</h3><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200310174442.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MetaAnnotation</span> </span>&#123;</span><br><span class="line">    <span class="comment">//注解可以显示赋值，如果没有默认值，我们就必须给注解赋值</span></span><br><span class="line">    <span class="meta">@MyAnnotaion</span>(name = <span class="string">"Zhuuu"</span>,schools = <span class="string">"Njput"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD,ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@interface</span> MyAnnotaion&#123;</span><br><span class="line">    <span class="comment">//注解的参数：参数类型 + 参数名()+ 【default 值】;</span></span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">age</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">id</span><span class="params">()</span> <span class="keyword">default</span> -1</span>; <span class="comment">//如果默认值为-1,代表不存在</span></span><br><span class="line">    </span><br><span class="line">    String[] schools(); <span class="comment">// 定义了一个数组</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//默认值是value,可以不用显示传参数</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD,ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@interface</span> Myannation3&#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="2-反射"><a href="#2-反射" class="headerlink" title="2. 反射"></a>2. 反射</h2><h3 id="2-1-静态语言和动态语言"><a href="#2-1-静态语言和动态语言" class="headerlink" title="2.1 静态语言和动态语言"></a>2.1 静态语言和动态语言</h3><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200310175609.png" alt=""></p>
<h3 id="2-2-反射概述"><a href="#2-2-反射概述" class="headerlink" title="2.2 反射概述"></a>2.2 反射概述</h3><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200310175730.png" alt=""></p>
<img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200311162117.png" style="zoom:67%;" />



<p><strong>通过反射来获得类的对象</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Reflection</span> </span>&#123;</span><br><span class="line">    <span class="comment">//通过反射获取类的class对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        Class c1 = Class.forName(<span class="string">"com.zhuuu.Reflection.User"</span>);</span><br><span class="line">        System.out.println(c1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//一个类在内存中只有一个class对象</span></span><br><span class="line">        <span class="comment">//一个类被加载后，类的整个结构都会被封装在class对象中</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//实体类：</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String Address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-3-Class类"><a href="#2-3-Class类" class="headerlink" title="2.3 Class类"></a>2.3 Class类</h3><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200311175238.png" alt=""></p>
<p><strong>Class类的常用方法</strong></p>
<p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200311175515307.png" alt="image-20200311175515307"></p>
<h3 id="2-4-所有类型的Class对象"><a href="#2-4-所有类型的Class对象" class="headerlink" title="2.4 所有类型的Class对象"></a>2.4 所有类型的Class对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Reflection02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Class&lt;Object&gt;     c1 = Object<span class="class">.<span class="keyword">class</span></span>;    <span class="comment">//类</span></span><br><span class="line">        Class&lt;Comparable&gt; c2 = Comparable<span class="class">.<span class="keyword">class</span></span>;  <span class="comment">//接口</span></span><br><span class="line">        Class&lt;String[]&gt;   c3 = String[]<span class="class">.<span class="keyword">class</span></span>;  <span class="comment">//一维数组</span></span><br><span class="line">        Class&lt;String&gt;     c4 = String<span class="class">.<span class="keyword">class</span></span>;      <span class="comment">//类</span></span><br><span class="line">        Class&lt;<span class="keyword">int</span>[][]&gt;    c5 = <span class="keyword">int</span>[][]<span class="class">.<span class="keyword">class</span></span>;    <span class="comment">//二维数组</span></span><br><span class="line">        Class&lt;Override&gt;   c6 = Override<span class="class">.<span class="keyword">class</span></span>;   <span class="comment">//注解</span></span><br><span class="line">        Class&lt;ElementType&gt;c7 = ElementType<span class="class">.<span class="keyword">class</span></span>;  <span class="comment">//枚举</span></span><br><span class="line">        Class&lt;Integer&gt;    c8 = Integer<span class="class">.<span class="keyword">class</span></span>; <span class="comment">//基本数据类型</span></span><br><span class="line">        Class&lt;Void&gt;       c9 = <span class="keyword">void</span><span class="class">.<span class="keyword">class</span></span>;    <span class="comment">//void</span></span><br><span class="line">        Class&lt;Class&gt;      c10 = Class<span class="class">.<span class="keyword">class</span></span>;  <span class="comment">//class</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(c1 );</span><br><span class="line">        System.out.println(c2 );</span><br><span class="line">        System.out.println(c3 );</span><br><span class="line">        System.out.println(c4 );</span><br><span class="line">        System.out.println(c5 );</span><br><span class="line">        System.out.println(c6 );</span><br><span class="line">        System.out.println(c7 );</span><br><span class="line">        System.out.println(c8 );</span><br><span class="line">        System.out.println(c9 );</span><br><span class="line">        System.out.println(c10);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>只要元素类型和维度一样，就是同一个class</strong></p>
<h2 id="3-类加载"><a href="#3-类加载" class="headerlink" title="3. 类加载"></a>3. 类加载</h2><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200313094522.png" alt=""></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200312085458.png" alt=""></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200312090031.png" alt=""></p>
<ol>
<li>加载</li>
<li>链接</li>
<li>初始化（cinit&lt;&gt;{}）</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuuu.ClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClassLoader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        A a = <span class="keyword">new</span> A();</span><br><span class="line">        System.out.println(A.m);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 1. 加载到内存，会在堆中产生一个对应的Class对象</span></span><br><span class="line"><span class="comment">* 2. 链接，链接结束后m=0</span></span><br><span class="line"><span class="comment">* 3. 初始化&lt;cinit&gt;()&#123;</span></span><br><span class="line"><span class="comment">*       System.out.println("A类静态代码块初始化");</span></span><br><span class="line"><span class="comment">        m = 300;</span></span><br><span class="line"><span class="comment">        int m = 100;</span></span><br><span class="line"><span class="comment">         &#125;*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"A类静态代码块初始化"</span>);</span><br><span class="line">        m = <span class="number">300</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>  <span class="keyword">int</span> m = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"A类的无参构造初始化"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200312091312.png" alt=""></p>
<h3 id="3-1-类的初始化时机"><a href="#3-1-类的初始化时机" class="headerlink" title="3.1 类的初始化时机"></a>3.1 类的初始化时机</h3><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200312091836.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuuu.ClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestWhenClassLoader</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"main类被加载"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line"><span class="comment">//        //1.主动引用会产生类的初始化</span></span><br><span class="line"><span class="comment">//        Son son = new Son();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        //2.反射也会产生主动引用</span></span><br><span class="line"><span class="comment">//        Class.forName("com.zhuuu.ClassLoader.Son");</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//不会产生类的引用的方法</span></span><br><span class="line"><span class="comment">//        System.out.println(Son.b); //并不会加载子类</span></span><br><span class="line"><span class="comment">//        Son[] array = new Son[5];  //数组也不会引起类初始化</span></span><br><span class="line">        System.out.println(Son.M);   <span class="comment">//常量也不会引起父类和子类的初始化</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"父类被加载"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"子类被加载"</span>);</span><br><span class="line">            m = <span class="number">300</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> m = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> M = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-2-类加载器作用"><a href="#3-2-类加载器作用" class="headerlink" title="3.2 类加载器作用"></a>3.2 类加载器作用</h3><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200312092918.png" alt=""></p>
<ul>
<li>类加载的作用<ul>
<li>将<strong>class文件字节码内容加载到内存</strong>中，并将这些<strong>静态数据转换成方法区运行时数据结构</strong>，然后在队中生成一个代表这个类的java,lang,Class对象，作为方法去中类数据的访问入口。</li>
<li><strong>类缓存</strong>：标准的JavaSE类加载器可以按要求查找类，但一旦某个类被加载到其中，它将维持加载（缓存）一段时间，不过JVM垃圾回收机制可以回收这些Class对象。</li>
</ul>
</li>
</ul>
<h3 id="3-3-类加载器的分类"><a href="#3-3-类加载器的分类" class="headerlink" title="3.3 类加载器的分类"></a>3.3 类加载器的分类</h3><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200312093319.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestGetClassLoader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//获取系统类的加载器</span></span><br><span class="line">        ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();</span><br><span class="line">        System.out.println(systemClassLoader);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取系统类加载器的父类加载器--&gt;扩展类加载器</span></span><br><span class="line">        ClassLoader parent = systemClassLoader.getParent();</span><br><span class="line">        System.out.println(parent);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取扩展类加载器的父类加载器--&gt;(根加载器)</span></span><br><span class="line">        ClassLoader parent1 = parent.getParent();</span><br><span class="line">        System.out.println(parent1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取当前类加载器</span></span><br><span class="line">        ClassLoader classLoader = Class.forName(<span class="string">"com.zhuuu.ClassLoader.TestGetClassLoader"</span>).getClassLoader();</span><br><span class="line">        System.out.println(classLoader);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试JDK内置的类是谁加载的</span></span><br><span class="line">        classLoader = Class.forName(<span class="string">"java.lang.Object"</span>).getClassLoader();</span><br><span class="line">        System.out.println(classLoader);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//如何获得系统类加载器可以加载的路径</span></span><br><span class="line">        System.out.println(System.getProperty(<span class="string">"java.class.path"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sun.misc.Launcher$AppClassLoader@<span class="number">18</span>b4aac2</span><br><span class="line">sun.misc.Launcher$ExtClassLoader@<span class="number">4554617</span>c</span><br><span class="line"><span class="keyword">null</span></span><br><span class="line">sun.misc.Launcher$AppClassLoader@<span class="number">18</span>b4aac2</span><br><span class="line"><span class="keyword">null</span></span><br><span class="line">E:\jdk1<span class="number">.8</span>\jre\lib\charsets.jar;</span><br><span class="line">E:\jdk1<span class="number">.8</span>\jre\lib\deploy.jar;E:\jdk1<span class="number">.8</span>\jre\lib\ext\access-bridge-<span class="number">64</span>.jar;</span><br><span class="line">E:\jdk1<span class="number">.8</span>\jre\lib\ext\cldrdata.jar;</span><br><span class="line">E:\jdk1<span class="number">.8</span>\jre\lib\ext\dnsns.jar;</span><br><span class="line">E:\jdk1<span class="number">.8</span>\jre\lib\ext\jaccess.jar;</span><br><span class="line">E:\jdk1<span class="number">.8</span>\jre\lib\ext\jfxrt.jar;</span><br><span class="line">E:\jdk1<span class="number">.8</span>\jre\lib\ext\localedata.jar;</span><br><span class="line">E:\jdk1<span class="number">.8</span>\jre\lib\ext\nashorn.jar;</span><br><span class="line">E:\jdk1<span class="number">.8</span>\jre\lib\ext\sunec.jar;</span><br><span class="line">E:\jdk1<span class="number">.8</span>\jre\lib\ext\sunjce_provider.jar;</span><br><span class="line">E:\jdk1<span class="number">.8</span>\jre\lib\ext\sunmscapi.jar;</span><br><span class="line">E:\jdk1<span class="number">.8</span>\jre\lib\ext\sunpkcs11.jar;</span><br><span class="line">E:\jdk1<span class="number">.8</span>\jre\lib\ext\zipfs.jar;</span><br><span class="line">E:\jdk1<span class="number">.8</span>\jre\lib\javaws.jar;</span><br><span class="line">E:\jdk1<span class="number">.8</span>\jre\lib\jce.jar;</span><br><span class="line">E:\jdk1<span class="number">.8</span>\jre\lib\jfr.jar;</span><br><span class="line">E:\jdk1<span class="number">.8</span>\jre\lib\jfxswt.jar;</span><br><span class="line">E:\jdk1<span class="number">.8</span>\jre\lib\jsse.jar;</span><br><span class="line">E:\jdk1<span class="number">.8</span>\jre\lib\managementagent.jar;</span><br><span class="line">E:\jdk1<span class="number">.8</span>\jre\lib\plugin.jar;</span><br><span class="line">E:\jdk1<span class="number">.8</span>\jre\lib\resources.jar;</span><br><span class="line">E:\jdk1<span class="number">.8</span>\jre\lib\rt.jar;</span><br><span class="line">E:\学习源码\AnnotationReflection\target\classes;</span><br><span class="line">E:\IntelliJ IDEA <span class="number">2019.1</span>\lib\idea_rt.jar</span><br></pre></td></tr></table></figure>



<h3 id="3-4-双亲委派机制"><a href="#3-4-双亲委派机制" class="headerlink" title="3.4 双亲委派机制"></a>3.4 双亲委派机制</h3><ul>
<li>保证安全性</li>
<li>一步一步向上委托加载</li>
<li><strong>（具体内容见JVM笔记）</strong></li>
</ul>
<h3 id="3-5-获取类的信息"><a href="#3-5-获取类的信息" class="headerlink" title="3.5 获取类的信息"></a>3.5 获取类的信息</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClassInfo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException, NoSuchMethodException </span>&#123;</span><br><span class="line">        Class&lt;?&gt; c1 = Class.forName(<span class="string">"com.zhuuu.Reflection.User"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得类的名字</span></span><br><span class="line">        System.out.println(c1.getName()); <span class="comment">// 获得包名+类名</span></span><br><span class="line">        System.out.println(c1.getSimpleName()); <span class="comment">//获得类名</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得类的属性</span></span><br><span class="line">        Field[] fields = c1.getFields(); <span class="comment">//只能找到public属性</span></span><br><span class="line">        System.out.println(<span class="string">"=================="</span>);</span><br><span class="line">        fields = c1.getDeclaredFields();  <span class="comment">//找到全部的属性</span></span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Field name = c1.getDeclaredField((<span class="string">"name"</span>));  <span class="comment">//获取指定的属性</span></span><br><span class="line">        System.out.println(name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得类的方法</span></span><br><span class="line">        Method[] methods = c1.getMethods(); <span class="comment">//获取得本类及父类的所有方法</span></span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            System.out.println(<span class="string">"正常的："</span>+method);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        methods = c1.getDeclaredMethods();  <span class="comment">//只能获取本类的方法</span></span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            System.out.println(<span class="string">"getDeclaredMethods"</span> + method);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Method getName = c1.getMethod(<span class="string">"getName"</span>,<span class="keyword">null</span>);        <span class="comment">//获得指定的方法</span></span><br><span class="line">        Method setName = c1.getMethod(<span class="string">"setName"</span>, String<span class="class">.<span class="keyword">class</span>)</span>; <span class="comment">//参数的作用是因为有方法的重载</span></span><br><span class="line">        System.out.println(getName);</span><br><span class="line">        System.out.println(setName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得类的构造器</span></span><br><span class="line">        Constructor&lt;?&gt;[] constructors = c1.getConstructors(); <span class="comment">//获取public构造器</span></span><br><span class="line">        <span class="keyword">for</span> (Constructor&lt;?&gt; constructor : constructors) &#123;</span><br><span class="line">            System.out.println(<span class="string">"正常的"</span>+constructor);</span><br><span class="line">        &#125;</span><br><span class="line">        constructors = c1.getDeclaredConstructors(); <span class="comment">//获取全部的构造器</span></span><br><span class="line">        <span class="keyword">for</span> (Constructor&lt;?&gt; constructor : constructors) &#123;</span><br><span class="line">            System.out.println(<span class="string">"#"</span> + constructor);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        Constructor&lt;?&gt; declaredConstructor = c1.getDeclaredConstructor(String<span class="class">.<span class="keyword">class</span>, <span class="title">int</span>.<span class="title">class</span>, <span class="title">String</span>.<span class="title">class</span>)</span>;        <span class="comment">//获得指定的构造器</span></span><br><span class="line">        System.out.println(<span class="string">"指定构造器"</span>+declaredConstructor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="4-反射高级操作"><a href="#4-反射高级操作" class="headerlink" title="4. 反射高级操作"></a>4. 反射高级操作</h2><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200312112658.png" alt=""></p>
<h3 id="4-1-调用指定的方法"><a href="#4-1-调用指定的方法" class="headerlink" title="4.1 调用指定的方法"></a>4.1 调用指定的方法</h3><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200312112841.png" alt=""></p>
<p><strong>invoke方法</strong></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200312112948.png" alt=""></p>
<p><strong>setAccessible方法</strong></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200312113049.png" alt=""></p>
<h3 id="4-2-动态的创建对象"><a href="#4-2-动态的创建对象" class="headerlink" title="4.2 动态的创建对象"></a>4.2 动态的创建对象</h3><p><strong>反射创建对象的方法：newInstance</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//动态的创建对象，通过反射</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Reflection03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException, NoSuchFieldException </span>&#123;</span><br><span class="line">        <span class="comment">//获得class对象</span></span><br><span class="line">        Class&lt;?&gt; c1 = Class.forName(<span class="string">"com.zhuuu.Reflection.User"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造一个对象</span></span><br><span class="line"><span class="comment">//        User user = (User) c1.newInstance(); //本质上是调用了无参构造器</span></span><br><span class="line"><span class="comment">//        System.out.println(user);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过构造器创建对象</span></span><br><span class="line"><span class="comment">//        Constructor&lt;?&gt; constructor = c1.getDeclaredConstructor(String.class, int.class, int.class);</span></span><br><span class="line"><span class="comment">//        User user1 = (User) constructor.newInstance("zhuuu", 001, 19);</span></span><br><span class="line"><span class="comment">//        System.out.println(user1);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过反射调用方法</span></span><br><span class="line"><span class="comment">//        User user2 = (User) c1.newInstance();</span></span><br><span class="line"><span class="comment">//        //通过反射获取一个方法</span></span><br><span class="line"><span class="comment">//        Method setName = c1.getDeclaredMethod("setName", String.class);</span></span><br><span class="line"><span class="comment">//        setName.invoke(user2,"朱酱酱"); //invoke(对象，"方法的值")</span></span><br><span class="line"><span class="comment">//        System.out.println(user2.getName());</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过反射操作属性</span></span><br><span class="line">        User user3 = (User) c1.newInstance();</span><br><span class="line">        Field name = c1.getDeclaredField(<span class="string">"name"</span>);</span><br><span class="line"></span><br><span class="line">        name.setAccessible(<span class="keyword">true</span>); <span class="comment">//private权限报错,不能直接操作私有属性，关掉权限检查</span></span><br><span class="line">        name.set(user3,<span class="string">"朱酱酱2"</span>);</span><br><span class="line">        System.out.println(user3.getName());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-3-反射性能分析"><a href="#4-3-反射性能分析" class="headerlink" title="4.3 反射性能分析"></a>4.3 反射性能分析</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分析性能问题</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Reflection04</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//普通方式调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000000</span>; i++) &#123;</span><br><span class="line">            user.getName();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> endTime   = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"普通方式执行10亿次时间"</span> + (endTime-startTime)+<span class="string">"ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//反射方式调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        Class&lt;? extends User&gt; c1 = user.getClass();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过反射操作</span></span><br><span class="line">        Method getName = c1.getMethod(<span class="string">"getName"</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000000</span>; i++) &#123;</span><br><span class="line">            getName.invoke(user,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> endTime   = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"反射方式执行10亿次时间"</span> + (endTime-startTime)+<span class="string">"ms"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//反射调用（关闭权限检测）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        Class&lt;? extends User&gt; c1 = user.getClass();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过反射操作</span></span><br><span class="line">        Method getName = c1.getMethod(<span class="string">"getName"</span>, <span class="keyword">null</span>);</span><br><span class="line">        getName.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000000</span>; i++) &#123;</span><br><span class="line">            getName.invoke(user,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> endTime   = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"关闭检测执行10亿次时间"</span> + (endTime-startTime)+<span class="string">"ms"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//主方法调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException </span>&#123;</span><br><span class="line">        test01();</span><br><span class="line">        test02();</span><br><span class="line">        test03();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果如下：</p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200312114233.png" alt=""></p>
<h3 id="4-4-反射操作泛型"><a href="#4-4-反射操作泛型" class="headerlink" title="4.4 反射操作泛型"></a>4.4 反射操作泛型</h3><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200313091110.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过反射获取泛型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Reflection05</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">(Map&lt;String,User&gt; map, List&lt;User&gt; list)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,User&gt; <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"test02"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException </span>&#123;</span><br><span class="line">        <span class="comment">//test01</span></span><br><span class="line">        Method method = Reflection05.class.getMethod("test01", Map.class, List.class);</span><br><span class="line">        Type[] genericParameterTypes = method.getGenericParameterTypes(); <span class="comment">//获得泛型的参数信息</span></span><br><span class="line">        <span class="keyword">for</span> (Type genericParameterType : genericParameterTypes) &#123;</span><br><span class="line">            System.out.println(<span class="string">"#"</span> + genericParameterType); <span class="comment">//打印泛型参数类型</span></span><br><span class="line">            <span class="keyword">if</span>(genericParameterType <span class="keyword">instanceof</span> ParameterizedType)&#123; <span class="comment">//判断泛型里面的是不是一个参数化类型</span></span><br><span class="line">                Type[] actualTypeArguments = ((ParameterizedType) genericParameterType).getActualTypeArguments(); <span class="comment">//是的话强转出来，并且获得真实参数信息</span></span><br><span class="line">                <span class="keyword">for</span> (Type actualTypeArgument : actualTypeArguments) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"~"</span>+actualTypeArgument);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//test 02</span></span><br><span class="line">        method = Reflection05.class.getMethod("test02",null);</span><br><span class="line">        Type genericReturnType = method.getGenericReturnType(); <span class="comment">//获得返回值类型</span></span><br><span class="line">        <span class="keyword">if</span>(genericReturnType <span class="keyword">instanceof</span> ParameterizedType)&#123;</span><br><span class="line">            Type[] actualTypeArguments = ((ParameterizedType) genericReturnType).getActualTypeArguments(); <span class="comment">//是的话强转出来，并且获得真实参数信息</span></span><br><span class="line">            <span class="keyword">for</span> (Type actualTypeArgument : actualTypeArguments) &#123;</span><br><span class="line">                System.out.println(actualTypeArgument);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-5-反射操作注解"><a href="#4-5-反射操作注解" class="headerlink" title="4.5 反射操作注解"></a>4.5 反射操作注解</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//反射操作注解</span></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Reflection06</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException </span>&#123;</span><br><span class="line">        Class&lt;?&gt; c1 = Class.forName(<span class="string">"com.zhuuu.Reflection.Reflection06.Student2"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过反射获得注解</span></span><br><span class="line">        Annotation[] annotations = c1.getAnnotations();</span><br><span class="line">        <span class="keyword">for</span> (Annotation annotation : annotations) &#123;</span><br><span class="line">            System.out.println(annotation); <span class="comment">//@table("db_student")</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得注解value的值</span></span><br><span class="line">        table annotation = c1.getAnnotation(table<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        String value = annotation.value();   <span class="comment">//"db_student"</span></span><br><span class="line">        System.out.println(value);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得类指定的注解</span></span><br><span class="line">        Field name = c1.getField(<span class="string">"name"</span>);</span><br><span class="line">        field annotation1 = name.getAnnotation(field<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(annotation1.columnNName()); <span class="comment">//"db_name"</span></span><br><span class="line">        System.out.println(annotation1.length());     <span class="comment">//"varchar"</span></span><br><span class="line">        System.out.println(annotation1.type());       <span class="comment">//3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@table</span>(<span class="string">"db_student"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student2</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@field</span>(columnNName = <span class="string">"db_id"</span>,type = <span class="string">"int"</span>,length = <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="meta">@field</span>(columnNName = <span class="string">"db_age"</span>,type = <span class="string">"int"</span>,length = <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="meta">@field</span>(columnNName = <span class="string">"db_name"</span>,type = <span class="string">"varchar"</span>,length = <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Studeng2&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student2</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> age, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//类名的注解</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@interface</span> table&#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//属性的注解</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.FIELD)</span><br><span class="line"><span class="meta">@interface</span> field&#123;</span><br><span class="line">    <span class="function">String <span class="title">columnNName</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">type</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200313094454.png" alt=""></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200313094522.png" alt=""></p>
]]></content>
      <tags>
        <tag>JVM</tag>
        <tag>注解</tag>
        <tag>反射</tag>
      </tags>
  </entry>
  <entry>
    <title>JDBC</title>
    <url>/2019/09/27/Mysql/JDBC/</url>
    <content><![CDATA[<h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200228170325.png" alt=""></p>
<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>Sun公司为了简化开发人员的（对数据库统一）的操作，提供了一个（java操作数据库的）规范，俗称JDBC。</p>
<p>这些规范的实现由具体的厂商去做。</p>
<p>对于开发人员来说，只需要掌握JDBC接口即可</p>
<a id="more"></a>



<h2 id="2-第一个JDBC程序"><a href="#2-第一个JDBC程序" class="headerlink" title="2. 第一个JDBC程序"></a>2. 第一个JDBC程序</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuuu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstJDBC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//1.加载驱动</span></span><br><span class="line">        Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.用户信息和url</span></span><br><span class="line">        String url = <span class="string">"jdbc:mysql://localhost:3306/mybatis?userUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true"</span>;</span><br><span class="line">        String username = <span class="string">"root"</span>;</span><br><span class="line">        String password = <span class="string">"123456"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.连接成功，数据库对象</span></span><br><span class="line">        Connection connection = DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.执行SQL对象 执行SQL的对象</span></span><br><span class="line">        Statement statement = connection.createStatement();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.执行SQL的对象，去执行SQL,可能存在结果，查看返回结果</span></span><br><span class="line">        String sql = <span class="string">"select * from student"</span>;</span><br><span class="line"></span><br><span class="line">        ResultSet resultSet = statement.executeQuery(sql); <span class="comment">// 结果集中封装了所有查询的结果</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (resultSet.next())&#123;</span><br><span class="line">            System.out.println(<span class="string">"id="</span> + resultSet.getObject(<span class="string">"id"</span>));</span><br><span class="line">            <span class="comment">//System.out.println("id=" + resultSet.getObject("id"));</span></span><br><span class="line">            <span class="comment">//System.out.println("id=" + resultSet.getObject("id"));</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.释放连接</span></span><br><span class="line">        resultSet.close();</span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>步骤总结：</p>
<ol>
<li>加载驱动</li>
<li>连接数据库DriverManger</li>
<li>获取执行sql的对象 statement</li>
<li>获得返回的结果集</li>
<li>释放连接</li>
</ol>
<blockquote>
<p>DriverManger</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>); <span class="comment">//固定写法，加载驱动</span></span><br><span class="line"></span><br><span class="line">Connection connection = DriverManager.getConnection(url, username, password); <span class="comment">// connection代表数据库</span></span><br><span class="line"><span class="comment">//数据库设置自动提交</span></span><br><span class="line"><span class="comment">//事务提交</span></span><br><span class="line"><span class="comment">//事务回滚</span></span><br><span class="line">connetion.rollback();</span><br></pre></td></tr></table></figure>



<blockquote>
<p>url</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String url = <span class="string">"jdbc:mysql://localhost:3306/mybatisuserUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true"</span>;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>Statement 执行SQL对象 </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String sql = <span class="string">"需要的sql语句"</span>;</span><br><span class="line"></span><br><span class="line">statement.executeQuery(sql); <span class="comment">//查询操作返回ResultSet</span></span><br><span class="line">statement.execute(sql); <span class="comment">// 执行任何sql</span></span><br><span class="line">statement.executeUpdate(sql);<span class="comment">// 更新，插入，删除，都是用这个，返回一个受影响的行数</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>ResultSet 查询的结果集：封装了所有的查询结果</p>
<p>resultSet.getObject();</p>
</blockquote>
<blockquote>
<p>释放资源必须做：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">resultSet.close();</span><br><span class="line">statement.close();</span><br><span class="line">connection.close();</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="2-1-编写统一工具类"><a href="#2-1-编写统一工具类" class="headerlink" title="2.1 编写统一工具类"></a>2.1 编写统一工具类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuuu.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driver = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String username = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InputStream in = JdbcUtils.class.getClassLoader().getResourceAsStream("db.properties");</span><br><span class="line">            Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">            properties.load(in);</span><br><span class="line"></span><br><span class="line">            driver = properties.getProperty(<span class="string">"driver"</span>);</span><br><span class="line">            url = properties.getProperty(<span class="string">"url"</span>);</span><br><span class="line">            username = properties.getProperty(<span class="string">"username"</span>);</span><br><span class="line">            password = properties.getProperty(<span class="string">"password"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//1.驱动只要加载一次</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取链接</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(url, username, password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(Connection conn, Statement st, ResultSet rs)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(rs != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (st != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                st.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-2-编写db-properties"><a href="#2-2-编写db-properties" class="headerlink" title="2.2 编写db.properties"></a>2.2 编写db.properties</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">driver=com.mysql.jdbc.Driver</span><br><span class="line">url = jdbc:mysql://localhost:3306/?useUnicode=true&amp;characterEncoding=UTF-8&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC</span><br><span class="line">username=root</span><br><span class="line">password=123456</span><br></pre></td></tr></table></figure>



<h3 id="2-3-测试增删改查"><a href="#2-3-测试增删改查" class="headerlink" title="2.3 测试增删改查"></a>2.3 测试增删改查</h3><ol>
<li>测试插入(insert)</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuuu.JdbcTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhuuu.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInsert</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement  st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet  rs = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取数据库连接</span></span><br><span class="line">            Connection connection = JdbcUtils.getConnection();</span><br><span class="line">            <span class="comment">//获取SQL执行对象</span></span><br><span class="line">            st = conn.createStatement();</span><br><span class="line"></span><br><span class="line">            String sql = <span class="string">"insert into school.teacher(id,`name`) values('2','徐老师')"</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> i = st.executeUpdate(sql);</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span>) System.out.println(<span class="string">"插入表成功！"</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(conn,st,rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>测试删除（delete）</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuuu.JdbcTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhuuu.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDelete</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取数据库连接</span></span><br><span class="line">            Connection connection = JdbcUtils.getConnection();</span><br><span class="line">            <span class="comment">//获取SQL执行对象</span></span><br><span class="line">            st = conn.createStatement();</span><br><span class="line"></span><br><span class="line">            String sql = <span class="string">"需要删除的内容"</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> i = st.executeUpdate(sql);</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span>) System.out.println(<span class="string">"插入表成功！"</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(conn,st,rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>测试更新（update）</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuuu.JdbcTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhuuu.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUpdate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取数据库连接</span></span><br><span class="line">            Connection connection = JdbcUtils.getConnection();</span><br><span class="line">            <span class="comment">//获取SQL执行对象</span></span><br><span class="line">            st = conn.createStatement();</span><br><span class="line"></span><br><span class="line">            String sql = <span class="string">"需要更新的的内容"</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> i = st.executeUpdate(sql);</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span>) System.out.println(<span class="string">"插入表成功！"</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(conn,st,rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>执行查询（Query）</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuuu.JdbcTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhuuu.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestQuery</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement  st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet  rs = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Connection connection = JdbcUtils.getConnection();</span><br><span class="line">            st = conn.createStatement();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//SQL</span></span><br><span class="line">            String sql = <span class="string">"select * from school.teacher where id=1"</span>;</span><br><span class="line">            rs = st.executeQuery(sql);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (rs.next())&#123;</span><br><span class="line">                System.out.println(rs.getString(<span class="string">"name"</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(conn,st,rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="3-SQL注入的问题"><a href="#3-SQL注入的问题" class="headerlink" title="3. SQL注入的问题"></a>3. SQL注入的问题</h2><ol>
<li>前期准备工作:首先，创建一张试验用的数据表：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE &#96;users&#96; (</span><br><span class="line">&#96;id&#96; int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">&#96;username&#96; varchar(64) NOT NULL,</span><br><span class="line">&#96;password&#96; varchar(64) NOT NULL,</span><br><span class="line">&#96;email&#96; varchar(64) NOT NULL,</span><br><span class="line">PRIMARY KEY (&#96;id&#96;),</span><br><span class="line">UNIQUE KEY &#96;username&#96; (&#96;username&#96;)</span><br><span class="line">) ENGINE&#x3D;MyISAM AUTO_INCREMENT&#x3D;3 DEFAULT CHARSET&#x3D;latin1;</span><br></pre></td></tr></table></figure>

<p>添加一条测试记录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO users (username,password,email)</span><br><span class="line">VALUES(&#39;MarcoFly&#39;,md5(&#39;test&#39;),&#39;marcofly@test.com&#39;);</span><br></pre></td></tr></table></figure>

<p>创建前台登录页面：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Sql注入演示<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"validate.php"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fieldset</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">legend</span>&gt;</span>Sql注入演示<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>密  码：<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span> <span class="attr">value</span>=<span class="string">"重置"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>附上效果图：</p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200229203556.png" alt=""></p>
<p>当用户点击提交按钮的时候，将会把表单数据提交给validate.php页面，validate.php页面用来判断用户输入的用户名和密码有没有都符合要求（这一步至关重要，也往往是SQL漏洞所在）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">!                                         <span class="comment">&lt;!--前台和后台对接--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>登录验证<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">$conn=@mysql_connect(<span class="string">"localhost"</span>,<span class="string">'root'</span>,<span class="string">''</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"数据库连接失败！"</span>);;</span></span><br><span class="line"><span class="php">mysql_select_db(<span class="string">"injection"</span>,$conn) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"您要选择的数据库不存在"</span>);</span></span><br><span class="line"><span class="php">$name=$_POST[<span class="string">'username'</span>];</span></span><br><span class="line"><span class="php">$pwd=$_POST[<span class="string">'password'</span>];</span></span><br><span class="line"><span class="php">$sql=<span class="string">"select * from users where username='$name' and password='$pwd'"</span>;</span></span><br><span class="line"><span class="php">$query=mysql_query($sql);</span></span><br><span class="line"><span class="php">$arr=mysql_fetch_array($query);</span></span><br><span class="line"><span class="php"><span class="keyword">if</span>(is_array($arr))&#123;</span></span><br><span class="line"><span class="php">header(<span class="string">"Location:manager.php"</span>);</span></span><br><span class="line"><span class="php">&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> <span class="string">"您的用户名或密码输入有误，&lt;a href=\"Login.php\"&gt;请重新登录！&lt;/a&gt;"</span>;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意到了没有，我们直接将用户提交过来的数据(用户名和密码)直接拿去执行，并没有实现进行特殊字符过滤，待会你们将明白，这是致命的。<br>代码分析：如果，用户名和密码都匹配成功的话，将跳转到管理员操作界面(manager.php)，不成功，则给出友好提示信息。<br>登录成功的界面：</p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200229203656.png" alt=""></p>
<p> 登录失败的提示：</p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200229203707.png" alt=""></p>
<p>到这里，前期工作已经做好了，接下来将展开我们的重头戏：SQL注入</p>
<ol start="2">
<li>构造SQL语句</li>
</ol>
<p>填好正确的用户名(marcofly)和密码(test)后，点击提交，将会返回给我们“欢迎管理员”的界面。<br>因为根据我们提交的用户名和密码被合成到SQL查询语句当中之后是这样的：<br>select * from users where username=’marcofly’ and password=md5(‘test’)<br>很明显，用户名和密码都和我们之前给出的一样，肯定能够成功登陆。但是，如果我们输入一个错误的用户名或密码呢？很明显，肯定登入不了吧。恩，正常情况下是如此，但是对于有SQL注入漏洞的网站来说，<strong>只要构造个特殊的“字符串”，照样能够成功登录。</strong></p>
<p>比如：在用户名输入框中输入:’ or 1=1#,密码随便输入，这时候的合成后的SQL查询语句为：<br>select * from users where username=’’ or 1=1#’ and password=md5(‘’)<br>语义分析：“#”在mysql中是注释符，这样井号后面的内容将被mysql视为注释内容，这样就不会去执行了，换句话说，以下的两句sql语句等价：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from users where username&#x3D;&#39;&#39; or 1&#x3D;1#&#39; and password&#x3D;md5(&#39;&#39;)</span><br></pre></td></tr></table></figure>

<p>等价于</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select* from users where usrername&#x3D;&#39;&#39; or 1&#x3D;1</span><br></pre></td></tr></table></figure>

<p>因为1=1永远是都是成立的，即where子句总是为真，将该sql进一步简化之后，等价于如下select语句：</p>
<p>select * from users<br>没错，该sql语句的作用是检索users表中的所有字段 </p>
<p>再次构造语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from users where username&#x3D;&#39;admin&#39;#&#39; and password&#x3D;md5(&#39;&#39;)</span><br></pre></td></tr></table></figure>

<p>等价于</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from users where username&#x3D;&#39;admin&#39;</span><br></pre></td></tr></table></figure>

<p>这样即可不能输入密码登入上去的。</p>
<p>数据库就会错认为不用用户名既可以登入，绕过后台的验证，已到达注入的目的。</p>
<p>同样利用了SQL语法的漏洞。</p>
<h2 id="4-ParpareStatement"><a href="#4-ParpareStatement" class="headerlink" title="4. ParpareStatement"></a>4. ParpareStatement</h2><p>作用：ParpareStatement 可以防止SQL注入，效率更高</p>
<ol>
<li>测试插入</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuuu.prepareState;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhuuu.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInsert</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement st = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            JdbcUtils.getConnection();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//和之前的区别</span></span><br><span class="line">            String sql = <span class="string">"insert into school.teacher(id,`name`) values(?,?)"</span>;</span><br><span class="line"></span><br><span class="line">            st= conn.prepareStatement(sql); <span class="comment">// 预编译sql 但不执行</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//手动给参数赋值</span></span><br><span class="line">            st.setInt(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line">            st.setString(<span class="number">2</span>,<span class="string">"朱酱酱"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//执行</span></span><br><span class="line">            <span class="keyword">int</span> i = st.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span> (i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"插入成功"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(conn,st,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ol start="2">
<li>测试删除</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuuu.prepareState;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhuuu.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDelete</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement st = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            JdbcUtils.getConnection();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//区别</span></span><br><span class="line">            String sql = <span class="string">"delete from school.teacher where id = ?"</span>;</span><br><span class="line"></span><br><span class="line">            st= conn.prepareStatement(sql); <span class="comment">// 预编译sql 但不执行</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//手动给参数赋值</span></span><br><span class="line">            st.setInt(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//执行</span></span><br><span class="line">            <span class="keyword">int</span> i = st.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span> (i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"插入成功"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(conn,st,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>测试更新</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuuu.prepareState;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhuuu.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUpdate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement st = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            JdbcUtils.getConnection();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//区别</span></span><br><span class="line">            String sql = <span class="string">"update ....."</span>;</span><br><span class="line"></span><br><span class="line">            st= conn.prepareStatement(sql); <span class="comment">// 预编译sql 但不执行</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//手动给参数赋值</span></span><br><span class="line">            st.setInt(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//执行</span></span><br><span class="line">            <span class="keyword">int</span> i = st.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span> (i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"插入成功"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(conn,st,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>测试查询(完美防止sql注入)</li>
</ol>
<p><strong>本质：防止sql注入的本质，把传递进来的参数当做字符，加入存在转义字符，比如’’会被直接转义</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuuu.prepareState;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhuuu.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestQuery</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement st = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            JdbcUtils.getConnection();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//区别</span></span><br><span class="line">            String sql = <span class="string">"select * from school.result where id = ? and password = ?"</span>;</span><br><span class="line"></span><br><span class="line">            st= conn.prepareStatement(sql); <span class="comment">// 预编译sql 但不执行</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//手动给参数赋值</span></span><br><span class="line">            st.setInt(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//执行</span></span><br><span class="line">            ResultSet rs = st.executeQuery();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (rs.next())&#123;</span><br><span class="line">                System.out.println(rs.getString(<span class="string">"name"</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(conn,st,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="5-事务"><a href="#5-事务" class="headerlink" title="5. 事务"></a>5. 事务</h2><p><strong>一句话：要么都成功，要么都失败</strong></p>
<ol>
<li>原子性：要么都成功，要么都失败</li>
<li>一致性：总数不变</li>
<li>隔离性：多个进程互不干扰</li>
<li>持久性：一旦提交就不可逆，持久化到数据库</li>
</ol>
<p>隔离性的问题：</p>
<p>脏读：一个事务读取了另一个没有提交的事务</p>
<p>不可重复读：在同一个事务内，重复读取表中的数据，数据发生了改变</p>
<p>虚读（幻读）：在一个事务内，插入了新的数据</p>
<p><strong>JDBC模拟银行转账失败</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhuuu.prepareState;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhuuu.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTransction</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement st = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JdbcUtils.getConnection();</span><br><span class="line"></span><br><span class="line">            conn.setAutoCommit(<span class="keyword">false</span>);<span class="comment">//开启事务，关闭自动提交</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            String sql1 = <span class="string">"update account set money = money + 100 where name ='A'"</span>;</span><br><span class="line">            st = conn.prepareStatement(sql1);</span><br><span class="line">            st.executeUpdate();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> x = <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">            System.out.println(<span class="string">"==============="</span>);</span><br><span class="line"></span><br><span class="line">            String sql2 = <span class="string">"update account set money = money - 100 where name ='B'"</span>;</span><br><span class="line">            st = conn.prepareStatement(sql2);</span><br><span class="line">            st.executeUpdate();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            conn.rollback(); <span class="comment">//失败就回滚</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(conn,st,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-数据库连接池"><a href="#6-数据库连接池" class="headerlink" title="6. 数据库连接池"></a>6. 数据库连接池</h2><p><strong>池化技术</strong></p>
<h4 id="Java三种连接池（druid、c3p0、dbcp）"><a href="#Java三种连接池（druid、c3p0、dbcp）" class="headerlink" title="Java三种连接池（druid、c3p0、dbcp）"></a>Java三种连接池（druid、c3p0、dbcp）</h4><p>以下参考链接：<a href="https://blog.csdn.net/qq_42982169/article/details/82181631?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">https://blog.csdn.net/qq_42982169/article/details/82181631?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task</a></p>
<h3 id="6-1-DPCP"><a href="#6-1-DPCP" class="headerlink" title="6.1 DPCP"></a>6.1 DPCP</h3><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200304213844.png" alt=""></p>
<h3 id="6-2-C3P0"><a href="#6-2-C3P0" class="headerlink" title="6.2 C3P0"></a>6.2 C3P0</h3><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200304213827.png" alt=""></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200304213732.png" alt=""></p>
<h3 id="6-3-Druid"><a href="#6-3-Druid" class="headerlink" title="6.3 Druid"></a>6.3 Druid</h3><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200304213756.png" alt=""></p>
]]></content>
      <tags>
        <tag>JDBC</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode-088</title>
    <url>/2019/08/17/Leetcode/Leetcode-088/</url>
    <content><![CDATA[<h1 id="Leecode-088-Merge-Sorted-Array"><a href="#Leecode-088-Merge-Sorted-Array" class="headerlink" title="Leecode-088 Merge Sorted Array"></a>Leecode-088 <a href="https://leetcode-cn.com/problems/merge-sorted-array/" target="_blank" rel="noopener">Merge Sorted Array</a></h1><h2 id="思路：双指针"><a href="#思路：双指针" class="headerlink" title="思路：双指针"></a>思路：双指针</h2><p><strong>题目描述</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">nums1 &#x3D; [1,2,3,0,0,0], m &#x3D; 3</span><br><span class="line">nums2 &#x3D; [2,5,6],       n &#x3D; 3</span><br><span class="line"></span><br><span class="line">Output: [1,2,2,3,5,6]</span><br></pre></td></tr></table></figure>

<p><strong>把归并结果存到第一个数组上。</strong></p>
<p><strong>Solution：</strong></p>
<ul>
<li>需要从尾开始遍历，否则在nums1上归并得到的值会覆盖还未进行归并比较的值。</li>
</ul>
<a id="more"></a>



<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p><strong>Solution :</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span> m, <span class="keyword">int</span>[] nums2, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> index1 = m - <span class="number">1</span>, index2 = n - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> indexMerge = m + n - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (index1 &gt;= <span class="number">0</span> || index2 &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (index1 &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            nums1[indexMerge--] = nums2[index2--];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index2 &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            nums1[indexMerge--] = nums1[index1--];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums1[index1] &gt; nums2[index2]) &#123;</span><br><span class="line">            nums1[indexMerge--] = nums1[index1--];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            nums1[indexMerge--] = nums2[index2--];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200310194017.png" alt=""></p>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p><strong>Solution :</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(self, nums1: List[int], m: int, nums2: List[int], n: int)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Do not return anything, modify nums1 in-place instead.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        mergeIndex = m + n - <span class="number">1</span></span><br><span class="line">        index1,index2 = m - <span class="number">1</span>, n  - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> index1 &gt;= <span class="number">0</span> <span class="keyword">or</span> index2 &gt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> index1 &lt; <span class="number">0</span>:</span><br><span class="line">                nums1[mergeIndex] = nums2[index2]</span><br><span class="line">                mergeIndex -= <span class="number">1</span></span><br><span class="line">                index2 -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> index2 &lt; <span class="number">0</span>:</span><br><span class="line">                nums1[mergeIndex] = nums1[index1]</span><br><span class="line">                mergeIndex -= <span class="number">1</span></span><br><span class="line">                index1 -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> nums1[index1] &gt; nums2[index2]:</span><br><span class="line">                nums1[mergeIndex] = nums1[index1]</span><br><span class="line">                mergeIndex -= <span class="number">1</span></span><br><span class="line">                index1 -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                nums1[mergeIndex] = nums2[index2]</span><br><span class="line">                mergeIndex -= <span class="number">1</span></span><br><span class="line">                index2 -= <span class="number">1</span></span><br></pre></td></tr></table></figure>



<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200310193948.png" alt=""></p>
]]></content>
      <tags>
        <tag>Leetcode</tag>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode-083</title>
    <url>/2019/08/15/Leetcode/Leetcode-083/</url>
    <content><![CDATA[<h1 id="Leecode-083-Remove-Duplicates-from-Sorted-List"><a href="#Leecode-083-Remove-Duplicates-from-Sorted-List" class="headerlink" title="Leecode-083 Remove Duplicates from Sorted List"></a>Leecode-083 <a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/" target="_blank" rel="noopener">Remove Duplicates from Sorted List</a></h1><h2 id="思路：一次遍历"><a href="#思路：一次遍历" class="headerlink" title="思路：一次遍历"></a>思路：一次遍历</h2><p><strong>题目描述</strong></p>
<p>给出一个链表，如果有重复的数只记录一次</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 1-&gt;1-&gt;2</span><br><span class="line">Output: 1-&gt;2</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 1-&gt;1-&gt;2-&gt;3-&gt;3</span><br><span class="line">Output: 1-&gt;2-&gt;3</span><br></pre></td></tr></table></figure>



<p><strong>Solution：</strong></p>
<ul>
<li>遍历一次 （直到为null）<ul>
<li>如果当前节点和下一个节点相同就跳过该节点</li>
<li>如果当前节点和下一个节点不同就记录一次</li>
</ul>
</li>
</ul>
<a id="more"></a>



<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p><strong>Solution :</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplicates</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode curr = head;</span><br><span class="line">        <span class="keyword">while</span> (curr != <span class="keyword">null</span> &amp;&amp; curr.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(curr.val == curr.next.val)&#123;</span><br><span class="line">                curr.next = curr.next.next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                curr = curr.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p><strong>Solution :</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deleteDuplicates</span><span class="params">(self, head: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        curr = head</span><br><span class="line">        <span class="keyword">while</span> curr != <span class="literal">None</span> <span class="keyword">and</span> curr.next != <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> curr.val == curr.next.val: curr.next = curr.next.next</span><br><span class="line">            <span class="keyword">else</span>: curr = curr.next</span><br><span class="line">        <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode-345</title>
    <url>/2019/08/12/Leetcode/Leetcode-345/</url>
    <content><![CDATA[<h1 id="Leecode-345-Reverse-Vowels-of-a-String"><a href="#Leecode-345-Reverse-Vowels-of-a-String" class="headerlink" title="Leecode-345 Reverse Vowels of a String"></a>Leecode-345 <a href="https://leetcode-cn.com/problems/reverse-vowels-of-a-string/" target="_blank" rel="noopener">Reverse Vowels of a String</a></h1><h2 id="思路：双指针"><a href="#思路：双指针" class="headerlink" title="思路：双指针"></a>思路：双指针</h2><p><strong>题目描述：</strong></p>
<p>将元音字母进行交换</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given s &#x3D; &quot;leetcode&quot;, return &quot;leotcede&quot;.</span><br></pre></td></tr></table></figure>

<img src='https://camo.githubusercontent.com/6e66ca91f2688beacd6f9dd3ef2774abb53dda73/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f65663235666637632d306636332d343230642d386233302d6561666265656133356431312e676966'>

<p><strong>Solution：双指针</strong></p>
<ul>
<li>使用双指针，一个指针从头向尾遍历，一个指针从尾向头遍历，当两个指针都遍历到元音字母时，交换这两个原因字符。</li>
<li>为了快速判断一个字符是不是元音字符没我们将全部原因字母添加到集合HashSet中，从而以O(1)的时间复杂度进行该操作</li>
</ul>
<ul>
<li>时间复杂度：O(N)只需要遍历所有元素一次</li>
<li>空间复杂度：O(1)只需要使用两个额外的变量</li>
</ul>
<a id="more"></a>



<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p><strong>Solution :</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> HashSet&lt;Character&gt; vowels = <span class="keyword">new</span> HashSet&lt;&gt;(</span><br><span class="line">        Arrays.asList(<span class="string">'a'</span>, <span class="string">'e'</span>, <span class="string">'i'</span>, <span class="string">'o'</span>, <span class="string">'u'</span>, <span class="string">'A'</span>, <span class="string">'E'</span>, <span class="string">'I'</span>, <span class="string">'O'</span>, <span class="string">'U'</span>));</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">reverseVowels</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = s.length() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span>[] result = <span class="keyword">new</span> <span class="keyword">char</span>[s.length()];</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= j) &#123;</span><br><span class="line">        <span class="keyword">char</span> ci = s.charAt(i);</span><br><span class="line">        <span class="keyword">char</span> cj = s.charAt(j);</span><br><span class="line">        <span class="keyword">if</span> (!vowels.contains(ci)) &#123;</span><br><span class="line">            result[i++] = ci;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!vowels.contains(cj)) &#123;</span><br><span class="line">            result[j--] = cj;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result[i++] = cj;</span><br><span class="line">            result[j--] = ci;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p><strong>Solution :</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseVowels</span><span class="params">(self, s: str)</span> -&gt; str:</span></span><br><span class="line">        vowels = [<span class="string">'a'</span>, <span class="string">'e'</span>, <span class="string">'i'</span>, <span class="string">'o'</span>, <span class="string">'u'</span>, <span class="string">'A'</span>, <span class="string">'E'</span>, <span class="string">'I'</span>, <span class="string">'O'</span>, <span class="string">'U'</span>]</span><br><span class="line">        string = list(s)</span><br><span class="line">        i,j = <span class="number">0</span>,len(s) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i &lt;= j:</span><br><span class="line">            <span class="keyword">if</span> s[i] <span class="keyword">not</span> <span class="keyword">in</span> vowels:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> s[j] <span class="keyword">not</span> <span class="keyword">in</span> vowels:</span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                string[i],string[j]= string[j],string[i]</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>.join(string)</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS详解</title>
    <url>/2019/08/01/Webfront/CSS/</url>
    <content><![CDATA[<h1 id="CSS详解"><a href="#CSS详解" class="headerlink" title="CSS详解"></a>CSS详解</h1><ul>
<li>如何学习CSS ?<ul>
<li>CSS是什么</li>
<li>CSS快速入门（怎么用）</li>
<li><strong>CSS选择器（重点+难点）</strong></li>
<li>美化网页（文字，阴影，超链接，列表，渐变….）</li>
<li>盒子模型</li>
<li>浮动</li>
<li>定位</li>
<li>网页动画</li>
</ul>
</li>
</ul>
<p>[网页学习教程][<a href="https://www.w3school.com.cn/css3/index.asp]" target="_blank" rel="noopener">https://www.w3school.com.cn/css3/index.asp]</a></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200311102049.png" alt=""></p>
<a id="more"></a>

<h2 id="1-CSS概念简介"><a href="#1-CSS概念简介" class="headerlink" title="1. CSS概念简介"></a>1. CSS概念简介</h2><img src = "https://bkimg.cdn.bcebos.com/pic/6f061d950a7b02081442a34d68d9f2d3562cc897?x-bce-process=image/resize,m_lfit,w_268,limit_1/format,f_jpg" style="zoom:67%;" >

<ul>
<li>Cascading Style Sheet 层叠样式表（表现层：美化网页）</li>
</ul>
<h3 id="1-1-CSS发展史"><a href="#1-1-CSS发展史" class="headerlink" title="1.1 CSS发展史"></a>1.1 CSS发展史</h3><p>CSS 1.0</p>
<p>CSS 2.0 :DIV(块) + CSS, HTML和CSS分离</p>
<p>CSS 2.1：浮动和定位</p>
<p><strong>CSS 3.0：阴影，圆角边框，动画（浏览器兼容性）</strong></p>
<h3 id="1-2-快速入门"><a href="#1-2-快速入门" class="headerlink" title="1.2 快速入门"></a>1.2 快速入门</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">--</span>规范：每一个声明最好使用分号结尾<span class="selector-tag">--</span>&gt;</span><br><span class="line">&lt;!<span class="selector-tag">--</span>语法：</span><br><span class="line">    选择器&#123;</span><br><span class="line">    声明1；</span><br><span class="line">    声明2；</span><br><span class="line">    声明3；</span><br><span class="line">    &#125;<span class="selector-tag">--</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">        <span class="selector-tag">h1</span>&#123;</span><br><span class="line">            <span class="attribute">color</span>: red;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200311103724.png" alt=""></p>
<p><strong>使用link标签实现内容和表现分离</strong></p>
<p><strong>CSS的优势</strong></p>
<ol>
<li>实现样式的复用</li>
<li>样式十分的丰富</li>
<li>内容和表现的分离、</li>
<li>建议使用独立于html的css文件</li>
<li>利于SEO,容易被搜索引擎收录！</li>
</ol>
<h3 id="1-3-CSS的导入方式"><a href="#1-3-CSS的导入方式" class="headerlink" title="1.3 CSS的导入方式"></a>1.3 CSS的导入方式</h3><p><strong>优先级：就近原则</strong></p>
<ol>
<li>行内样式</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--行内样式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">"color: red"</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>内部样式</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--规范：每一个声明最好使用分号结尾--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--语法：</span></span><br><span class="line"><span class="comment">    选择器&#123;</span></span><br><span class="line"><span class="comment">    声明1；</span></span><br><span class="line"><span class="comment">    声明2；</span></span><br><span class="line"><span class="comment">    声明3；</span></span><br><span class="line"><span class="comment">    &#125;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        h1&#123;</span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>外部样式</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//html</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/style.css"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*css*/</span></span><br><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="2-选择器"><a href="#2-选择器" class="headerlink" title="2. 选择器"></a>2. 选择器</h2><p><strong>作用：选择页面上的某一个或者某一类元素</strong></p>
<h3 id="2-1-基本选择器"><a href="#2-1-基本选择器" class="headerlink" title="2.1 基本选择器"></a>2.1 基本选择器</h3><ol>
<li><strong>标签选择器（选择一类标签  标签{}）</strong></li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        h1&#123;</span><br><span class="line"><span class="css">            <span class="comment">/*标签选择器会选用这个页面上所有这个标签的元素*/</span></span></span><br><span class="line">            color: aqua;</span><br><span class="line">        &#125;</span><br><span class="line">        p&#123;</span><br><span class="line">            font-size: 80px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>学CSS<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>CSS很简单<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>zhuuu<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<ol start="2">
<li><strong>类选择器(选择class属性一致的标签 .类名{})</strong></li>
</ol>
<p>作用：class可以归类</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="comment">/*类选择器格式 .class的名称&#123;&#125;,可以复用*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.zhuuu</span>&#123;</span></span><br><span class="line">            color: antiquewhite;</span><br><span class="line">        &#125;</span><br><span class="line">        .朱酱酱&#123;</span><br><span class="line">            color: aquamarine;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"zhuuu"</span>&gt;</span>标题1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"朱酱酱"</span>&gt;</span>标题2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"zhuuu"</span>&gt;</span>标题3<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"朱酱酱"</span>&gt;</span>P标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><strong>id选择器(全局唯一，不能重复  #id名{})</strong></li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        /*id选择器</span><br><span class="line">        #id名称&#123;&#125;*/</span><br><span class="line"><span class="css">        <span class="selector-id">#zhuuu</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#000</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">        .朱酱酱&#123;</span><br><span class="line">            color: antiquewhite;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--这里不遵循就近原则：id选择器&gt;类选择器&gt;标签选择器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"zhuuu"</span>&gt;</span>表题1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"朱酱酱"</span>&gt;</span>表题2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"朱酱酱"</span>&gt;</span>表题3<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> &gt;</span>表题4<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> &gt;</span>表题5<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> &gt;</span>表题6<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="2-2-层次选择器"><a href="#2-2-层次选择器" class="headerlink" title="2.2 层次选择器"></a>2.2 层次选择器</h3><ol>
<li>后代选择器：在某个元素的<strong>后面全部</strong>的标签</li>
</ol>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">    <span class="comment">/*p&#123;*/</span></span><br><span class="line">    <span class="comment">/*    color: aquamarine;*/</span></span><br><span class="line">    <span class="comment">/*&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*后代选择器*/</span></span><br><span class="line">    <span class="selector-tag">body</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line">        <span class="attribute">background</span>: aqua;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>



<ol start="2">
<li>子选择器:在某个元素后面的<strong>一代</strong>标签</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*子选择器*/</span></span><br><span class="line">    <span class="selector-tag">body</span> &gt; <span class="selector-tag">p</span>&#123;</span><br><span class="line">        <span class="attribute">background</span>: bisque;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<ol start="3">
<li>相邻兄弟选择器：<strong>同辈下面的一个</strong></li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*相邻兄弟选择器:只有一个会改变，对下延伸*/</span></span><br><span class="line">    <span class="selector-class">.active</span> + <span class="selector-tag">p</span>&#123;</span><br><span class="line">        <span class="attribute">background</span>: brown;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<ol start="4">
<li>通用(兄弟)选择器：<strong>同辈下面的所有</strong></li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*通用兄弟选择器:当前选中元素向下的所有兄弟元素*/</span></span><br><span class="line">    <span class="selector-class">.active</span> ~ <span class="selector-tag">p</span>&#123;</span><br><span class="line">        <span class="attribute">background</span>: chartreuse;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-3-结构伪类选择器"><a href="#2-3-结构伪类选择器" class="headerlink" title="2.3 结构伪类选择器"></a>2.3 结构伪类选择器</h3><p><strong>伪类：（带:的）</strong></p>
<p><strong>结构伪类：(带结构的:)</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">--</span>本次避免使用<span class="selector-tag">class</span>,<span class="selector-tag">id</span>选择器<span class="selector-tag">--</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">        <span class="comment">/*ul第一个子元素*/</span></span><br><span class="line">        <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:first-child</span>&#123;</span><br><span class="line">            <span class="attribute">background</span>: chartreuse;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*ul最后一个子元素*/</span></span><br><span class="line">        <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span>&#123;</span><br><span class="line">            <span class="attribute">background</span>: aqua;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*选择第一个p元素:定位到父元素，选择当前顺序的第一个元素*/</span></span><br><span class="line">        <span class="selector-tag">p</span><span class="selector-pseudo">:nth-child(1)</span>&#123;</span><br><span class="line">            <span class="attribute">background</span>: bisque;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*定位到父元素，选择这个类型的第一个*/</span></span><br><span class="line">        <span class="selector-tag">p</span><span class="selector-pseudo">:nth-of-type(1)</span>&#123;</span><br><span class="line">            <span class="attribute">background</span>: red;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br></pre></td></tr></table></figure>



<h3 id="2-4-属性选择器（常用）"><a href="#2-4-属性选择器（常用）" class="headerlink" title="2.4 属性选择器（常用）"></a>2.4 属性选择器（常用）</h3><p><strong>可以使用正则表达式</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*存在id属性的元素要选中</span></span><br><span class="line"><span class="comment">属性名=属性值（可以用正则表达式）</span></span><br><span class="line"><span class="comment">= 是绝对等于</span></span><br><span class="line"><span class="comment">*= 是包含就行</span></span><br><span class="line"><span class="comment">^= 是什么什么开头</span></span><br><span class="line"><span class="comment">$= 是以什么什么结尾*/</span></span><br></pre></td></tr></table></figure>


<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.demo</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line">        display: block;</span><br><span class="line">        height: 50px;</span><br><span class="line">        width: 50px;</span><br><span class="line">        border-radius: 10px;</span><br><span class="line">        background: aquamarine;</span><br><span class="line">        text-align: center;</span><br><span class="line">        color: grey;</span><br><span class="line">        text-decoration: none;</span><br><span class="line">        margin-right: 5px;</span><br><span class="line">        font: bold 20px/50px Arial;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /*存在id属性的元素要选中</span><br><span class="line">    属性名=属性值（可以用正则表达式）</span><br><span class="line">    = 是绝对等于</span><br><span class="line">    *= 是包含就行</span><br><span class="line">    ^= 是什么什么开头</span><br><span class="line">    $= 是以什么什么结尾*/</span><br><span class="line"><span class="css">    <span class="selector-tag">a</span><span class="selector-attr">[id=first]</span>&#123;</span></span><br><span class="line">        background: yellow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-tag">a</span><span class="selector-attr">[class*=<span class="string">"links"</span>]</span>&#123;</span></span><br><span class="line">        background: brown;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"first"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"links zhuuu"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"hyperlink"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>4<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>5<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>6<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span><span class="attr">class</span>=<span class="string">"links zhuuu"</span>&gt;</span>7<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>8<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>9<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>10<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200311140715.png" alt=""></p>
<h2 id="3-美化网页元素"><a href="#3-美化网页元素" class="headerlink" title="3. 美化网页元素"></a>3. 美化网页元素</h2><h3 id="3-1-span标签"><a href="#3-1-span标签" class="headerlink" title="3.1 span标签"></a>3.1 span标签</h3><p>作用：突出显示title</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#title1</span>&#123;</span></span><br><span class="line">        color: aqua;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">欢迎来到我的博客 <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"title1"</span>&gt;</span>博客<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="3-2-字体样式"><a href="#3-2-字体样式" class="headerlink" title="3.2 字体样式"></a>3.2 字体样式</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        /*</span><br><span class="line">        font-family:字体</span><br><span class="line">        font-size:字体大小</span><br><span class="line">        font-weight:字体的粗细</span><br><span class="line">        color:字体颜色</span><br><span class="line">        */</span><br><span class="line">        body&#123;</span><br><span class="line">            font-family: 楷体;</span><br><span class="line">        &#125;</span><br><span class="line">        h1&#123;</span><br><span class="line">            font-size: 50px;</span><br><span class="line">            color: aquamarine;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.p1</span>&#123;</span></span><br><span class="line">            font-weight: bold;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Java （计算机编程语言）<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>Java （计算机编程语言）</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Java是一门面向对象编程语言，不仅吸收了C++语言的各种优点，</span><br><span class="line">    还摒弃了C++里难以理解的多继承、指针等概念，</span><br><span class="line">    因此Java语言具有功能强大和简单易用两个特征。</span><br><span class="line">    Java语言作为静态面向对象编程语言的代表，极好地实现了面向对象理论，</span><br><span class="line">    允许程序员以优雅的思维方式进行复杂的编程 [1]  。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"p1"</span>&gt;</span>Java具有简单性、面向对象、分布式、健壮性、安全性、平台独立与可移植性、多线程、动态性等特点 [2]  。Java可以编写桌面应用程序、Web应用程序、分布式系统和嵌入式系统应用程序等 [3]  。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="3-3-文本样式"><a href="#3-3-文本样式" class="headerlink" title="3.3 文本样式"></a>3.3 文本样式</h3><ol>
<li>颜色</li>
<li>文本对齐的方式</li>
<li>首行缩进</li>
<li>行高</li>
<li>装饰</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    颜色：</span></span><br><span class="line"><span class="comment">    RGB:0~F</span></span><br><span class="line"><span class="comment">    RGBA:透明度：0-1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    text-align: center  //文本排版居中</span></span><br><span class="line"><span class="comment">    text-indent: 2em;   //段落首行缩进</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    height: 200px;</span></span><br><span class="line"><span class="comment">    line-height: 200px;  //高度和行高一致的话就可以上下居中</span></span><br><span class="line"><span class="comment">    text-decoration:underline.line-through.overline 下划线/中划线/上划线</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        h1&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-tag">rgba</span>(0,255,255,0<span class="selector-class">.9</span>);</span></span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.p1</span>&#123;</span></span><br><span class="line">            text-indent: 2em;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.p3</span>&#123;</span></span><br><span class="line">            background: brown;</span><br><span class="line">            height: 200px;</span><br><span class="line">            line-height: 200px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.l1</span>&#123;</span></span><br><span class="line">            text-decoration: underline;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.l2</span>&#123;</span></span><br><span class="line">            text-decoration: line-through;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.l3</span>&#123;</span></span><br><span class="line">            text-decoration: overline;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"l1"</span>&gt;</span>12312<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"l2"</span>&gt;</span>12312<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"l3"</span>&gt;</span>12321<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Java （计算机编程语言）<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>Java （计算机编程语言）</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Java是一门面向对象编程语言，不仅吸收了C++语言的各种优点，</span><br><span class="line">    还摒弃了C++里难以理解的多继承、指针等概念，</span><br><span class="line">    因此Java语言具有功能强大和简单易用两个特征。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"p3"</span>&gt;</span>Java语言作为静态面向对象编程语言的代表，极好地实现了面向对象理论，</span><br><span class="line">    允许程序员以优雅的思维方式进行复杂的编程<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"p1"</span>&gt;</span>Java具有简单性、面向对象、分布式、健壮性、安全性、平台独立与可移植性、多线程、动态性等特点 [2]  。Java可以编写桌面应用程序、Web应用程序、分布式系统和嵌入式系统应用程序等 [3]  。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="3-4-超链接伪类"><a href="#3-4-超链接伪类" class="headerlink" title="3.4 超链接伪类"></a>3.4 超链接伪类</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="comment">/*默认的颜色*/</span></span></span><br><span class="line">        a&#123;</span><br><span class="line">            text-decoration: none;</span><br><span class="line">            color: black;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="comment">/*鼠标悬浮的状态*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line">            color: orange;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="comment">/*鼠标按住未释放的状态*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-pseudo">:active</span>&#123;</span></span><br><span class="line">            color: aqua;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/证件照.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">width</span>=<span class="string">"150"</span> <span class="attr">height</span>=<span class="string">"300"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>人物：朱酱酱<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>人物：Zhuuu<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-5-背景"><a href="#3-5-背景" class="headerlink" title="3.5 背景"></a>3.5 背景</h3><p>背景图片</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div&#123;</span><br><span class="line">            width: 1000px;</span><br><span class="line">            height: 800px;</span><br><span class="line">            border: 1px solid aqua;</span><br><span class="line">            background-image: url("");</span><br><span class="line"><span class="css">        <span class="comment">/*默认是全部平铺的*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.div1</span>&#123;</span></span><br><span class="line">            background-repeat: repeat-x;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.div2</span>&#123;</span></span><br><span class="line">            background-repeat: repeat-y;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.div3</span>&#123;</span></span><br><span class="line">            background-repeat: no-repeat;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div3"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="3-6-渐变"><a href="#3-6-渐变" class="headerlink" title="3.6 渐变"></a>3.6 渐变</h3><p>[渐变效果网址][<a href="https://www.grabient.com/]" target="_blank" rel="noopener">https://www.grabient.com/]</a></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200314114734.png" alt=""></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">    <span class="selector-tag">body</span>&#123;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="number">#FFFFFF</span>;</span><br><span class="line">        <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(<span class="number">180deg</span>, #FFFFFF <span class="number">0%</span>, #<span class="number">6284</span>FF <span class="number">50%</span>, #FF0000 <span class="number">100%</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>浏览器效果如下：</p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200314115242.png" alt=""></p>
<h2 id="4-盒子模型"><a href="#4-盒子模型" class="headerlink" title="4. 盒子模型"></a>4. 盒子模型</h2><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200314115452.png" alt=""></p>
<p>margin:   外边距</p>
<p>padding: 内边距</p>
<p>border：边框</p>
<h3 id="4-1-边框"><a href="#4-1-边框" class="headerlink" title="4.1 边框"></a>4.1 边框</h3><p><strong>border</strong></p>
<ol>
<li>边框的粗细</li>
<li>边框的样式</li>
<li>边框的颜色</li>
</ol>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">    &lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">        <span class="selector-tag">body</span>,<span class="selector-tag">h1</span>,<span class="selector-tag">li</span>,<span class="selector-tag">a</span>,<span class="selector-tag">ul</span>&#123;</span><br><span class="line">            <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">            <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">            <span class="attribute">text-decoration</span>: none;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-id">#box</span>&#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">            <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-tag">h2</span>&#123;</span><br><span class="line">            <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: goldenrod;</span><br><span class="line">            <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-tag">form</span>&#123;</span><br><span class="line">            <span class="attribute">background</span>: aqua;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type(1)</span> <span class="selector-tag">input</span>&#123;</span><br><span class="line">            <span class="attribute">border</span>: <span class="number">3px</span> solid azure;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type(2)</span> <span class="selector-tag">input</span>&#123;</span><br><span class="line">            <span class="attribute">border</span>: <span class="number">3px</span> dashed salmon;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type(3)</span> <span class="selector-tag">input</span>&#123;</span><br><span class="line">            <span class="attribute">border</span>: <span class="number">3px</span> dashed darkmagenta;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id="box"&gt;</span><br><span class="line">    &lt;h2&gt;会员登录&lt;/h2&gt;</span><br><span class="line">    &lt;form action="#"&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span>&gt;</span><br><span class="line">            &lt;span&gt;用户名：&lt;/span&gt;</span><br><span class="line">            &lt;input type="text"&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span>&gt;</span><br><span class="line">            &lt;span&gt;密码：&lt;/span&gt;</span><br><span class="line">            &lt;input type="text"&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span>&gt;</span><br><span class="line">            &lt;span&gt;邮箱：&lt;/span&gt;</span><br><span class="line">            &lt;input type="text"&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>前端</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis-缓存机制</title>
    <url>/2019/07/17/Mybatis/MyBatis-%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h1 id="MyBatis-缓存机制"><a href="#MyBatis-缓存机制" class="headerlink" title="MyBatis 缓存机制"></a>MyBatis 缓存机制</h1><h2 id="缓存简介"><a href="#缓存简介" class="headerlink" title="缓存简介"></a>缓存简介</h2><ol>
<li>什么是缓存？</li>
</ol>
<ul>
<li>存在内存中的临时数据。</li>
<li>将用户经常查询的数据放在缓存（内存）中，用户去查询数据就不用从磁盘上(关系型数据库数据文件)查询，从缓存中查询，从而提高查询效率，解决了高并发系统的性能问题。</li>
</ul>
<ol start="2">
<li>为什么使用缓存？</li>
</ol>
<ul>
<li>减少和数据库的交互次数，减少系统开销，提高系统效率。</li>
</ul>
<ol start="3">
<li>什么样的数据能使用缓存？</li>
</ol>
<ul>
<li>经常查询并且不经常改变的数据。</li>
</ul>
<a id="more"></a>

<h2 id="Mybatis缓存"><a href="#Mybatis缓存" class="headerlink" title="Mybatis缓存"></a>Mybatis缓存</h2><ul>
<li>MyBatis包含一个非常强大的查询缓存特性，它可以非常方便地定制和配置缓存。缓存可以极大的提升查询效率。</li>
<li>MyBatis系统中默认定义了两级缓存：<strong>一级缓存</strong>和<strong>二级缓存</strong><ul>
<li>默认情况下，只有一级缓存开启（Sqlsession级别的缓存，也称为本地缓存）</li>
<li>二级缓存需要手动开启和配置，他是基于namespace级别的缓存</li>
<li>为了提高扩展性，MyBatis定义了缓存接口Cache，我们可以通过实现Cache借口来自定义二级缓存</li>
</ul>
</li>
</ul>
<h3 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h3><p>一级缓存也叫本地缓存：</p>
<ul>
<li>与数据库同一次会话期间查询到的数据会放在本地缓存中。</li>
<li>以后如果需要获取相同的数据，直接从缓存中拿，没必须再去查询数据库；</li>
</ul>
<ol>
<li>在mybatis中加入日志，方便测试结果</li>
<li>编写接口方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据id查询用户</span></span><br><span class="line"><span class="function">User <span class="title">queryUserById</span><span class="params">(@Param(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id)</span>;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>接口对应的Mapper文件</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryUserById"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    select * from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>测试</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryUserById</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession session = MybatisUtils.getSession();</span><br><span class="line">    UserMapper mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    User user = mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    User user2 = mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user2);</span><br><span class="line">    System.out.println(user==user2);</span><br><span class="line"></span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h3><ul>
<li>二级缓存也叫全局缓存，一级缓存作用域太低了，所以诞生了二级缓存</li>
<li>基于namespace级别的缓存，一个命名空间，对应一个二级缓存</li>
</ul>
<ul>
<li>工作机制<ul>
<li>一个会话查询一个数据，这个数据就会被放在当前会话的一级缓存中</li>
<li>如果当前会话关闭了，这个会话对应的一级缓存就没了；但我们想要的使，会话关闭了，一级缓存中的数据被保存到二级缓存中。</li>
<li>新的会话查询信息，就可以从二级缓存中获取内容</li>
<li>不同的mapper查出的数据会放在自己对应的缓存（本质是一个k-v的map）中</li>
</ul>
</li>
</ul>
<p><strong>使用步骤</strong></p>
<p>【官方文档:】<a href="http://www.mybatis.org/mybatis-3/zh/sqlmap-xml.html#cache" target="_blank" rel="noopener">官方文档</a></p>
<ol>
<li>开启全局缓存【mybatis-config.xml】</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>去每个mapper.xml中配置二级缓存【xxxMapper.xml】</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">官方示例=====&gt;查看官方文档</span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span></span></span><br><span class="line"><span class="tag">  <span class="attr">eviction</span>=<span class="string">"FIFO"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">flushInterval</span>=<span class="string">"60000"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">size</span>=<span class="string">"512"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">readOnly</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">这个更高级的配置创建了一个 FIFO 缓存，每隔 60 秒刷新，最多可以存储结果对象或列表的 512 个引用，而且返回的对象被认为是只读的，因此对它们进行修改可能会在不同线程中的调用者产生冲突。</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>代码测试</li>
</ol>
<p><strong>所有的实体类首先需要实现序列化接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryUserById</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession session = MybatisUtils.getSession();</span><br><span class="line">    SqlSession session2 = MybatisUtils.getSession();</span><br><span class="line"></span><br><span class="line">    UserMapper mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    UserMapper mapper2 = session2.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    User user = mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    session.close();</span><br><span class="line"></span><br><span class="line">    User user2 = mapper2.queryUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user2);</span><br><span class="line">    System.out.println(user==user2);</span><br><span class="line"></span><br><span class="line">    session2.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><ol>
<li>只要开启了二级缓存，在同一个mapper下查询，可以在二级缓存中拿到数据</li>
<li>查出的数据都被先被默认保存在一级缓存中</li>
<li>只有会话提交或者关闭后，一级缓存的数据才会转到二级缓存中</li>
</ol>
<h2 id="缓存的原理"><a href="#缓存的原理" class="headerlink" title="缓存的原理"></a>缓存的原理</h2><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200218115506.png" alt=""></p>
<p><strong>缓存的顺序： 二级缓存-&gt;一级缓存-&gt;查询数据库</strong></p>
<h2 id="自定义缓存"><a href="#自定义缓存" class="headerlink" title="自定义缓存"></a>自定义缓存</h2><p>第三方缓存实现–EhCache: 查看百度百科</p>
<ul>
<li>Ehcache是一种广泛使用的java分布式缓存，用于通用缓存；</li>
<li>要在应用程序中使用Ehcache，需要引入依赖的jar包</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.caches/mybatis-ehcache --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.caches<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在mapper.xml中使用对应的缓存即可</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span> = <span class="string">“org.acme.FooMapper”</span> &gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span> = <span class="string">“org.mybatis.caches.ehcache.EhcacheCache”</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>编写ehcache.xml文件，如果在<code>加载时</code>未找到<code>/ehcache.xml</code>资源或出现问题，则将使用默认配置。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">"http://ehcache.org/ehcache.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">updateCheck</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       diskStore：为缓存路径，ehcache分为内存和磁盘两级，此属性定义磁盘的缓存位置。参数解释如下：</span></span><br><span class="line"><span class="comment">       user.home – 用户主目录</span></span><br><span class="line"><span class="comment">       user.dir  – 用户当前工作目录</span></span><br><span class="line"><span class="comment">       java.io.tmpdir – 默认临时文件路径</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">"./tmpdir/Tmp_EhCache"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">defaultCache</span></span></span><br><span class="line"><span class="tag">            <span class="attr">eternal</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxElementsInMemory</span>=<span class="string">"10000"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">overflowToDisk</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">diskPersistent</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToIdleSeconds</span>=<span class="string">"1800"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToLiveSeconds</span>=<span class="string">"259200"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">"LRU"</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">"cloud_user"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">eternal</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxElementsInMemory</span>=<span class="string">"5000"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">overflowToDisk</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">diskPersistent</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToIdleSeconds</span>=<span class="string">"1800"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToLiveSeconds</span>=<span class="string">"1800"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">"LRU"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       defaultCache：默认缓存策略，当ehcache找不到定义的缓存时，则使用这个缓存策略。只能定义一个。</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      name:缓存名称。</span></span><br><span class="line"><span class="comment">      maxElementsInMemory:缓存最大数目</span></span><br><span class="line"><span class="comment">      maxElementsOnDisk：硬盘最大缓存个数。</span></span><br><span class="line"><span class="comment">      eternal:对象是否永久有效，一但设置了，timeout将不起作用。</span></span><br><span class="line"><span class="comment">      overflowToDisk:是否保存到磁盘，当系统当机时</span></span><br><span class="line"><span class="comment">      timeToIdleSeconds:设置对象在失效前的允许闲置时间（单位：秒）。仅当eternal=false对象不是永久有效时使用，可选属性，默认值是0，也就是可闲置时间无穷大。</span></span><br><span class="line"><span class="comment">      timeToLiveSeconds:设置对象在失效前允许存活时间（单位：秒）。最大时间介于创建时间和失效时间之间。仅当eternal=false对象不是永久有效时使用，默认是0.，也就是对象存活时间无穷大。</span></span><br><span class="line"><span class="comment">      diskPersistent：是否缓存虚拟机重启期数据 Whether the disk store persists between restarts of the Virtual Machine. The default value is false.</span></span><br><span class="line"><span class="comment">      diskSpoolBufferSizeMB：这个参数设置DiskStore（磁盘缓存）的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区。</span></span><br><span class="line"><span class="comment">      diskExpiryThreadIntervalSeconds：磁盘失效线程运行时间间隔，默认是120秒。</span></span><br><span class="line"><span class="comment">      memoryStoreEvictionPolicy：当达到maxElementsInMemory限制时，Ehcache将会根据指定的策略去清理内存。默认策略是LRU（最近最少使用）。你可以设置为FIFO（先进先出）或是LFU（较少使用）。</span></span><br><span class="line"><span class="comment">      clearOnFlush：内存数量最大时是否清除。</span></span><br><span class="line"><span class="comment">      memoryStoreEvictionPolicy:可选策略有：LRU（最近最少使用，默认策略）、FIFO（先进先出）、LFU（最少访问次数）。</span></span><br><span class="line"><span class="comment">      FIFO，first in first out，这个是大家最熟的，先进先出。</span></span><br><span class="line"><span class="comment">      LFU， Less Frequently Used，就是上面例子中使用的策略，直白一点就是讲一直以来最少被使用的。如上面所讲，缓存的元素有一个hit属性，hit值最小的将会被清出缓存。</span></span><br><span class="line"><span class="comment">      LRU，Least Recently Used，最近最少使用的，缓存的元素有一个时间戳，当缓存容量满了，而又需要腾出地方来缓存新的元素的时候，那么现有缓存元素中时间戳离当前时间最远的元素将被清出缓存。</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis-动态SQL</title>
    <url>/2019/07/17/Mybatis/MyBatis-%E5%8A%A8%E6%80%81SQL/</url>
    <content><![CDATA[<h1 id="MyBatis-动态SQL"><a href="#MyBatis-动态SQL" class="headerlink" title="MyBatis 动态SQL"></a>MyBatis 动态SQL</h1><p>动态SQL 官方文档：<a href="https://mybatis.org/mybatis-3/zh/dynamic-sql.html" target="_blank" rel="noopener">文档链接</a></p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>什么是动态SQL:就是根据不同的查询条件，自动生成不同的Sql语句</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">官网描述：</span><br><span class="line">    MyBatis 的强大特性之一便是它的动态 SQL。如果你有使用 JDBC 或其它类似框架的经验，你就能体会到根据不同条件拼接 SQL 语句的痛苦。例如拼接时要确保不能忘记添加必要的空格，还要注意去掉列表最后一个列名的逗号。利用动态 SQL 这一特性可以彻底摆脱这种痛苦。</span><br><span class="line">    虽然在以前使用动态 SQL 并非一件易事，但正是 MyBatis 提供了可以被用在任意 SQL 映射语句中的强大的动态 SQL 语言得以改进这种情形。</span><br><span class="line">    动态 SQL 元素和 JSTL 或基于类似 XML 的文本处理器相似。在 MyBatis 之前的版本中，有很多元素需要花时间了解。MyBatis 3 大大精简了元素种类，现在只需学习原来一半的元素便可。MyBatis 采用功能强大的基于 OGNL 的表达式来淘汰其它大部分元素。</span><br><span class="line">    </span><br><span class="line">    -------------------------------</span><br><span class="line">    - if</span><br><span class="line">    - choose (when, otherwise)</span><br><span class="line">    - trim (where, set)</span><br><span class="line">    - foreach</span><br><span class="line">    -------------------------------</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<ul>
<li>之前写的 SQL 语句都比较简单，如果有比较复杂的业务，我们需要写复杂的 SQL 语句，往往需要拼接，而拼接 SQL ，稍微不注意，由于引号，空格等缺失可能都会导致错误。</li>
<li>那么怎么去解决这个问题呢？这就要使用 mybatis 动态SQL，通过 if, choose, when, otherwise, trim, where, set, foreach等标签，可组合成非常灵活的SQL语句，从而在提高 SQL 语句的准确性的同时，也大大提高了开发人员的效率。</li>
</ul>
<h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><ol>
<li><p>新建一个数据库表</p>
<p>字段：id，title，author，create_time，views</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE &#96;blog&#96; (</span><br><span class="line">  &#96;id&#96; varchar(50) NOT NULL COMMENT &#39;博客id&#39;,</span><br><span class="line">  &#96;title&#96; varchar(100) NOT NULL COMMENT &#39;博客标题&#39;,</span><br><span class="line">  &#96;author&#96; varchar(30) NOT NULL COMMENT &#39;博客作者&#39;,</span><br><span class="line">  &#96;create_time&#96; datetime NOT NULL COMMENT &#39;创建时间&#39;,</span><br><span class="line">  &#96;views&#96; int(30) NOT NULL COMMENT &#39;浏览量&#39;</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>创建MyBatis工程</li>
</ol>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200217175227.png" alt=""></p>
<ol start="3">
<li>编写IDutil工具类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IDUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">genId</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> UUID.randomUUID().toString().replaceAll(<span class="string">"-"</span>,<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>实体类编写</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blog</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> views;</span><br><span class="line">    <span class="comment">//set，get....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>编写Mapper和Mapper.xml</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BlogMapper</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.zhuuu.dao.BlogMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li>在MyBatis核心配置文件中，下划线驼峰自动转换</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"db.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"STDOUT_LOGGING"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.zhuuu.pojo"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    每一个Mapper,XML都需要在mybatis核心配置文件中注册--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.zhuuu.dao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="7">
<li><p>插入初始的数据</p>
<p>编写一个接口</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//新增一个博客</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addBlog</span><span class="params">(Blog blog)</span></span>;</span><br></pre></td></tr></table></figure>

<p>  Mapper配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addBlog"</span> <span class="attr">parameterType</span>=<span class="string">"blog"</span>&gt;</span></span><br><span class="line">    insert into blog (id, title, author, create_time, views)</span><br><span class="line">    values (#&#123;id&#125;,#&#123;title&#125;,#&#123;author&#125;,#&#123;createTime&#125;,#&#123;views&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>初始化博客方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInitBlog</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession session = MybatisUtils.getSession();</span><br><span class="line">    BlogMapper mapper = session.getMapper(BlogMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    Blog blog = <span class="keyword">new</span> Blog();</span><br><span class="line">    blog.setId(IDUtil.genId());</span><br><span class="line">    blog.setTitle(<span class="string">"Mybatis如此简单"</span>);</span><br><span class="line">    blog.setAuthor(<span class="string">"Zhuuu"</span>);</span><br><span class="line">    blog.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line">    blog.setViews(<span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">    mapper.addBlog(blog);</span><br><span class="line"></span><br><span class="line">    blog.setId(IDUtil.genId());</span><br><span class="line">    blog.setTitle(<span class="string">"Java如此简单"</span>);</span><br><span class="line">    mapper.addBlog(blog);</span><br><span class="line"></span><br><span class="line">    blog.setId(IDUtil.genId());</span><br><span class="line">    blog.setTitle(<span class="string">"Spring如此简单"</span>);</span><br><span class="line">    mapper.addBlog(blog);</span><br><span class="line"></span><br><span class="line">    blog.setId(IDUtil.genId());</span><br><span class="line">    blog.setTitle(<span class="string">"微服务如此简单"</span>);</span><br><span class="line">    mapper.addBlog(blog);</span><br><span class="line"></span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="动态-if语句"><a href="#动态-if语句" class="headerlink" title="动态-if语句"></a>动态-if语句</h2><p><strong>需求：根据作者名字和博客名字来查询博客！如果作者名字为空，那么只根据博客名字查询，反之，则根据作者名来查询</strong></p>
<ol>
<li>编写接口类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//需求1</span></span><br><span class="line"><span class="function">List&lt;Blog&gt; <span class="title">queryBlogIf</span><span class="params">(Map map)</span></span>;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>编写sql语句</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--需求1：</span></span><br><span class="line"><span class="comment">根据作者名字和博客名字来查询博客！</span></span><br><span class="line"><span class="comment">如果作者名字为空，那么只根据博客名字查询，反之，则根据作者名来查询</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">select * from blog where title = #&#123;title&#125; and author = #&#123;author&#125;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryBlogIf"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultType</span>=<span class="string">"blog"</span>&gt;</span></span><br><span class="line">    select * from blog where</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">        title = #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author != null"</span>&gt;</span></span><br><span class="line">        and author = #&#123;author&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>测试</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryBlogIf</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession session = MybatisUtils.getSession();</span><br><span class="line">    BlogMapper mapper = session.getMapper(BlogMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    HashMap&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">    map.put(<span class="string">"title"</span>,<span class="string">"Mybatis如此简单"</span>);</span><br><span class="line">    map.put(<span class="string">"author"</span>,<span class="string">"狂神说"</span>);</span><br><span class="line">    List&lt;Blog&gt; blogs = mapper.queryBlogIf(map);</span><br><span class="line"></span><br><span class="line">    System.out.println(blogs);</span><br><span class="line"></span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>会遇到以下几种情况：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.author 为 null的情况  正常查出</span></span><br><span class="line">Checking to see if class com.zhuuu.dao.BlogMapper matches criteria [is assignable to Object]</span><br><span class="line">Opening JDBC Connection</span><br><span class="line">Created connection <span class="number">376416077</span>.</span><br><span class="line">==&gt;  Preparing: select * from blog where title = ? </span><br><span class="line">==&gt; Parameters: Mybatis如此简单(String)</span><br><span class="line">&lt;==    Columns: id, title, author, create_time, views</span><br><span class="line">&lt;==        Row: <span class="number">62</span>d300fbe0174864af4ebb089ff6952f, Mybatis如此简单, Zhuuu, <span class="number">2020</span>-<span class="number">02</span>-<span class="number">17</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">03.0</span>, <span class="number">9999</span></span><br><span class="line">&lt;==      Total: <span class="number">1</span></span><br><span class="line">[Blog(id=<span class="number">62</span>d300fbe0174864af4ebb089ff6952f, title=Mybatis如此简单, author=Zhuuu, createTime=Mon Feb <span class="number">17</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">03</span> CST <span class="number">2020</span>, views=<span class="number">9999</span>)]</span><br><span class="line">Closing JDBC Connection [com.mysql.jdbc.JDBC4Connection@<span class="number">166f</span>a74d]</span><br><span class="line">Returned connection <span class="number">376416077</span> to pool.</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.title 为 null的情况  and导致报错</span></span><br><span class="line">Opening JDBC Connection</span><br><span class="line">Created connection <span class="number">376416077</span>.</span><br><span class="line">==&gt;  Preparing: select * from blog where and author = ? </span><br><span class="line">==&gt; Parameters: Zhuuu(String)</span><br></pre></td></tr></table></figure>

<h2 id="动态-where语句"><a href="#动态-where语句" class="headerlink" title="动态-where语句"></a>动态-where语句</h2><p>修改上面的情况2：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryBlogIf"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultType</span>=<span class="string">"blog"</span>&gt;</span></span><br><span class="line">    select * from blog </span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">            title = #&#123;title&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author != null"</span>&gt;</span></span><br><span class="line">            and author = #&#123;author&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个”where”标签会知道如果它包含标签中返回值的话，它就会插入一个“where”。此外，如果标签返回的内容是AND或OR开头的，则它会剔除掉。</p>
<h2 id="动态-Set"><a href="#动态-Set" class="headerlink" title="动态-Set"></a>动态-Set</h2><ol>
<li>编写接口方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updateBlog</span><span class="params">(Map map)</span></span>;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>sql配置文件</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--注意set是用的逗号隔开--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateBlog"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">    update blog</span><br><span class="line">      <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">              title = #&#123;title&#125;,</span><br><span class="line">          <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author != null"</span>&gt;</span></span><br><span class="line">              author = #&#123;author&#125;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>测试</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//动态set测试</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession session = MybatisUtils.getSession();</span><br><span class="line">    BlogMapper mapper = session.getMapper(BlogMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    HashMap&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">    map.put(<span class="string">"title"</span>,<span class="string">"动态SQL"</span>);</span><br><span class="line">    map.put(<span class="string">"author"</span>,<span class="string">"Zhuuu"</span>);</span><br><span class="line">    map.put(<span class="string">"id"</span>,<span class="string">"f279c70cf48d4b55a62d663610d9d541"</span>);<span class="comment">//这里的uuid要根据自己的数据库id来取</span></span><br><span class="line"></span><br><span class="line">    mapper.updateBlog(map);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="动态-choose"><a href="#动态-choose" class="headerlink" title="动态-choose"></a>动态-choose</h2><ul>
<li>有时候，我们不想用到所有的查询条件，只想选择其中的一个，查询条件有一个满足即可，使用 choose 标签可以解决此类问题，类似于 Java 的 switch 语句</li>
</ul>
<ol>
<li>编写接口方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">List&lt;Blog&gt; <span class="title">queryBlogChoose</span><span class="params">(Map map)</span></span>;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>sql配置文件</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryBlogChoose"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultType</span>=<span class="string">"blog"</span>&gt;</span></span><br><span class="line">    select * from blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">                 title = #&#123;title&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"author != null"</span>&gt;</span></span><br><span class="line">                and author = #&#123;author&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">                and views = #&#123;views&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>测试类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryBlogChoose</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession session = MybatisUtils.getSession();</span><br><span class="line">    BlogMapper mapper = session.getMapper(BlogMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">    map.put(<span class="string">"title"</span>,<span class="string">"Java如此简单"</span>);</span><br><span class="line">    map.put(<span class="string">"author"</span>,<span class="string">"Zhuuu"</span>);</span><br><span class="line">    map.put(<span class="string">"views"</span>,<span class="number">9999</span>);</span><br><span class="line">    List&lt;Blog&gt; blogs = mapper.queryBlogChoose(map);</span><br><span class="line"></span><br><span class="line">    System.out.println(blogs);</span><br><span class="line"></span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回的结果:只要满足第一个，后面的就不会在查了</span></span><br><span class="line">Opening JDBC Connection</span><br><span class="line">Created connection <span class="number">843467284</span>.</span><br><span class="line">==&gt;  Preparing: select * from blog WHERE title = ? </span><br><span class="line">==&gt; Parameters: Java如此简单(String)</span><br><span class="line">&lt;==    Columns: id, title, author, create_time, views</span><br><span class="line">&lt;==        Row: <span class="number">78739</span>c74d1c04075b898648e8dba74e7, Java如此简单, Zhuuu, <span class="number">2020</span>-<span class="number">02</span>-<span class="number">17</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">03.0</span>, <span class="number">1000</span></span><br><span class="line">&lt;==      Total: <span class="number">1</span></span><br><span class="line">[Blog(id=<span class="number">78739</span>c74d1c04075b898648e8dba74e7, title=Java如此简单, author=Zhuuu, createTime=Mon Feb <span class="number">17</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">03</span> CST <span class="number">2020</span>, views=<span class="number">1000</span>)]</span><br><span class="line">Closing JDBC Connection [com.mysql.jdbc.JDBC4Connection@<span class="number">32464</span>a14]</span><br><span class="line">Returned connection <span class="number">843467284</span> to pool.</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h2 id="提取sql片段"><a href="#提取sql片段" class="headerlink" title="提取sql片段"></a>提取sql片段</h2><ul>
<li>有时候可能某个 sql 语句我们用的特别多，为了增加代码的重用性，简化代码，我们需要将这些代码抽取出来，然后使用时直接调用。</li>
<li>说白了就是代码的复用</li>
</ul>
<ol>
<li>提取sql片段</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"if-title-author"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">        title = #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author != null"</span>&gt;</span></span><br><span class="line">        and author = #&#123;author&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>引用sql片段</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryBlogIf"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultType</span>=<span class="string">"blog"</span>&gt;</span></span><br><span class="line">    select * from blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引用 sql 片段，如果refid 指定的不在本文件中，那么需要在前面加上 namespace --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"if-title-author"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在这里还可以引用其他的 sql 片段 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong></p>
<p>①、最好基于 单表来定义 sql 片段，提高片段的可重用性<br>②、在 sql 片段中不要包括 where</p>
<h2 id="动态-foreach"><a href="#动态-foreach" class="headerlink" title="动态-foreach"></a>动态-foreach</h2><p>将数据库中前三个数据的id修改为1,2,3；</p>
<p>需求：我们需要查询 blog 表中 id 分别为1,2,3的博客信息</p>
<ol>
<li>编写结口</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">List&lt;Blog&gt; <span class="title">queryBlogForeach</span><span class="params">(Map map)</span></span>;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>编写sql语句</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryBlogForeach"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultType</span>=<span class="string">"blog"</span>&gt;</span></span><br><span class="line">    select * from blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        collection:指定输入对象中的集合属性</span></span><br><span class="line"><span class="comment">        item:每次遍历生成的对象</span></span><br><span class="line"><span class="comment">        open:开始遍历时的拼接字符串</span></span><br><span class="line"><span class="comment">        close:结束时拼接的字符串</span></span><br><span class="line"><span class="comment">        separator:遍历对象之间需要拼接的字符串</span></span><br><span class="line"><span class="comment">        select * from blog where 1=1 and (id=1 or id=2 or id=3)</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"ids"</span>  <span class="attr">item</span>=<span class="string">"id"</span> <span class="attr">open</span>=<span class="string">"and ("</span> <span class="attr">close</span>=<span class="string">")"</span> <span class="attr">separator</span>=<span class="string">"or"</span>&gt;</span></span><br><span class="line">            id=#&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>测试</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryBlogForeach</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession session = MybatisUtils.getSession();</span><br><span class="line">    BlogMapper mapper = session.getMapper(BlogMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line">    List&lt;Integer&gt; ids = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    ids.add(<span class="number">1</span>);</span><br><span class="line">    ids.add(<span class="number">2</span>);</span><br><span class="line">    ids.add(<span class="number">3</span>);</span><br><span class="line">    map.put(<span class="string">"ids"</span>,ids);</span><br><span class="line"></span><br><span class="line">    List&lt;Blog&gt; blogs = mapper.queryBlogForeach(map);</span><br><span class="line"></span><br><span class="line">    System.out.println(blogs);</span><br><span class="line"></span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>结果如下：(查出前三条记录)</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">Opening JDBC Connection</span><br><span class="line">Created connection 1904324159.</span><br><span class="line">==&gt;  Preparing: select * from blog WHERE ( id = ? or id = ? or id = ? ) </span><br><span class="line">==&gt; Parameters: 1(Integer), 2(Integer), 3(Integer)</span><br><span class="line">&lt;==    Columns: id, title, author, create_time, views</span><br><span class="line">&lt;==        Row: 1, Mybatis如此简单, Zhuuu, 2020-02-17 17:51:03.0, 9999</span><br><span class="line">&lt;==        Row: 2, Java如此简单, Zhuuu, 2020-02-17 17:51:03.0, 1000</span><br><span class="line">&lt;==        Row: 3, Spring如此简单, Zhuuu, 2020-02-17 17:51:03.0, 9999</span><br><span class="line">&lt;==      Total: 3</span><br><span class="line">[Blog(id=1, title=Mybatis如此简单, author=Zhuuu, createTime=Mon Feb 17 17:51:03 CST 2020, views=9999), Blog(id=2, title=Java如此简单, author=Zhuuu, createTime=Mon Feb 17 17:51:03 CST 2020, views=1000), Blog(id=3, title=Spring如此简单, author=Zhuuu, createTime=Mon Feb 17 17:51:03 CST 2020, views=9999)]</span><br><span class="line">Closing JDBC Connection [com.mysql.jdbc.JDBC4Connection@7181ae3f]</span><br><span class="line">Returned connection 1904324159 to pool.</span><br></pre></td></tr></table></figure>

<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul>
<li>动态sql语句的编写往往就是一个拼接的问题</li>
<li>为了保证拼接准确，首先我们需要把原生的sql语句写出来，然后再通过mybatis动态sql对照着改</li>
<li>要多实践才能掌握技巧</li>
</ul>
]]></content>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis-多对一,一对多处理</title>
    <url>/2019/07/16/Mybatis/MyBatis-%E5%A4%9A%E5%AF%B9%E4%B8%80,%E4%B8%80%E5%AF%B9%E5%A4%9A%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h1 id="MyBatis-多对一-一对多处理"><a href="#MyBatis-多对一-一对多处理" class="headerlink" title="MyBatis 多对一,一对多处理"></a>MyBatis 多对一,一对多处理</h1><h2 id="多对一的处理"><a href="#多对一的处理" class="headerlink" title="多对一的处理"></a>多对一的处理</h2><p>多对一的理解：</p>
<ul>
<li>多个学生对应一个老师</li>
<li>如果对于学生这边，就是一个多对一的理解</li>
<li>也就是从学生这边关联了一个老师</li>
</ul>
<a id="more"></a>

<p><strong>数据库设计（环境搭建）</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE mybatis;</span><br><span class="line">CREATE TABLE &#96;teacher&#96; (</span><br><span class="line">  &#96;id&#96; INT(10) NOT NULL,</span><br><span class="line">  &#96;name&#96; VARCHAR(30) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8</span><br><span class="line"></span><br><span class="line">INSERT INTO teacher(&#96;id&#96;, &#96;name&#96;) VALUES (1, &#39;朱老师&#39;); </span><br><span class="line"></span><br><span class="line">CREATE TABLE &#96;student&#96; (</span><br><span class="line">  &#96;id&#96; INT(10) NOT NULL,</span><br><span class="line">  &#96;name&#96; VARCHAR(30) DEFAULT NULL,</span><br><span class="line">  &#96;tid&#96; INT(10) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;),</span><br><span class="line">  KEY &#96;fktid&#96; (&#96;tid&#96;),</span><br><span class="line">  CONSTRAINT &#96;fktid&#96; FOREIGN KEY (&#96;tid&#96;) REFERENCES &#96;teacher&#96; (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">INSERT INTO &#96;student&#96; (&#96;id&#96;, &#96;name&#96;, &#96;tid&#96;) VALUES (&#39;1&#39;, &#39;小明&#39;, &#39;1&#39;); </span><br><span class="line">INSERT INTO &#96;student&#96; (&#96;id&#96;, &#96;name&#96;, &#96;tid&#96;) VALUES (&#39;2&#39;, &#39;小红&#39;, &#39;1&#39;); </span><br><span class="line">INSERT INTO &#96;student&#96; (&#96;id&#96;, &#96;name&#96;, &#96;tid&#96;) VALUES (&#39;3&#39;, &#39;小张&#39;, &#39;1&#39;); </span><br><span class="line">INSERT INTO &#96;student&#96; (&#96;id&#96;, &#96;name&#96;, &#96;tid&#96;) VALUES (&#39;4&#39;, &#39;小李&#39;, &#39;1&#39;); </span><br><span class="line">INSERT INTO &#96;student&#96; (&#96;id&#96;, &#96;name&#96;, &#96;tid&#96;) VALUES (&#39;5&#39;, &#39;小王&#39;, &#39;1&#39;);</span><br></pre></td></tr></table></figure>

<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200217115725.png" alt=""></p>
<h3 id="搭建测试环境"><a href="#搭建测试环境" class="headerlink" title="搭建测试环境"></a>搭建测试环境</h3><h3 id="Lombok的使用"><a href="#Lombok的使用" class="headerlink" title="Lombok的使用"></a>Lombok的使用</h3><ol>
<li>IDEA安装Lombok插件【在Plugins中安装】</li>
<li>引入maven依赖</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>在代码中增加注解(@Data)</li>
</ol>
<p>使用@Data前后对比</p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200217144634.png" alt=""></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200217144741.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span> <span class="comment">//GET,SET,ToString，有参，无参构造</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//多个学生可以是同一个老师，即多对一</span></span><br><span class="line">    <span class="keyword">private</span> Teacher teacher;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>编写实体类对应的Mapper接口【两个】</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentMapper</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TeacherMapper</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>编写Mapper接口对应的mapper.xml配置文件【两个】</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.zhuuu.dao.TeacherMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.zhuuu.dao.StudentMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="按照查询嵌套处理"><a href="#按照查询嵌套处理" class="headerlink" title="按照查询嵌套处理"></a>按照查询嵌套处理</h4><ol>
<li>给StudentMapper接口增加方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取所有学生及对应老师的信息</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">getStudents</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>编写对应的Mapper文件</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.zhuuu.mapper.StudentMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    需求：获取所有学生及对应老师的信息</span></span><br><span class="line"><span class="comment">    思路：</span></span><br><span class="line"><span class="comment">        1. 获取所有学生的信息</span></span><br><span class="line"><span class="comment">        2. 根据获取的学生信息的老师ID-&gt;获取该老师的信息</span></span><br><span class="line"><span class="comment">        3. 思考问题，这样学生的结果集中应该包含老师，该如何处理呢，数据库中我们一般使用关联查询？</span></span><br><span class="line"><span class="comment">            1. 做一个结果集映射：StudentTeacher</span></span><br><span class="line"><span class="comment">            2. StudentTeacher结果集的类型为 Student</span></span><br><span class="line"><span class="comment">            3. 学生中老师的属性为teacher，对应数据库中为tid。</span></span><br><span class="line"><span class="comment">               多个 [1,...）学生关联一个老师=&gt; 一对一，一对多</span></span><br><span class="line"><span class="comment">            4. 查看官网找到：association – 一个复杂类型的关联；使用它来处理关联查询</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudents"</span> <span class="attr">resultMap</span>=<span class="string">"StudentTeacher"</span>&gt;</span></span><br><span class="line">      select * from student</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"StudentTeacher"</span> <span class="attr">type</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--association关联属性  property属性名 javaType属性类型 column在多的一方的表中的列名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"teacher"</span>  <span class="attr">column</span>=<span class="string">"tid"</span> <span class="attr">javaType</span>=<span class="string">"Teacher"</span> <span class="attr">select</span>=<span class="string">"getTeacher"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    这里传递过来的id，只有一个属性的时候，下面可以写任何值</span></span><br><span class="line"><span class="comment">    association中column多参数配置：</span></span><br><span class="line"><span class="comment">        column="&#123;key=value,key=value&#125;"</span></span><br><span class="line"><span class="comment">        其实就是键值对的形式，key是传给下个sql的取值名称，value是片段一中sql查询的字段名。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getTeacher"</span> <span class="attr">resultType</span>=<span class="string">"teacher"</span>&gt;</span></span><br><span class="line">        select * from teacher where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>在配置文件中 ，注册Mapper</p>
</li>
<li><p>注意点说明</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"StudentTeacher"</span> <span class="attr">type</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--association关联属性  property属性名 javaType属性类型 column在多的一方的表中的列名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"teacher"</span>  <span class="attr">column</span>=<span class="string">"&#123;id=tid,name=tid&#125;"</span> <span class="attr">javaType</span>=<span class="string">"Teacher"</span> <span class="attr">select</span>=<span class="string">"getTeacher"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">这里传递过来的id，只有一个属性的时候，下面可以写任何值</span></span><br><span class="line"><span class="comment">association中column多参数配置：</span></span><br><span class="line"><span class="comment">    column="&#123;key=value,key=value&#125;"</span></span><br><span class="line"><span class="comment">    其实就是键值对的形式，key是传给下个sql的取值名称，value是片段一中sql查询的字段名。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getTeacher"</span> <span class="attr">resultType</span>=<span class="string">"teacher"</span>&gt;</span></span><br><span class="line">    select * from teacher where id = #&#123;id&#125; and name = #&#123;name&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>测试</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetStudents</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession session = MybatisUtils.getSession();</span><br><span class="line">    StudentMapper mapper = session.getMapper(StudentMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;Student&gt; students = mapper.getStudents();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Student student : students)&#123;</span><br><span class="line">        System.out.println(</span><br><span class="line">                <span class="string">"学生名:"</span>+ student.getName()</span><br><span class="line">                        +<span class="string">"\t老师:"</span>+student.getTeacher().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="按照结果嵌套处理"><a href="#按照结果嵌套处理" class="headerlink" title="按照结果嵌套处理"></a>按照结果嵌套处理</h4><ol>
<li>编写接口方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">getStudents2</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>编写对应的Mapper文件</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">按查询结果嵌套处理</span></span><br><span class="line"><span class="comment">思路：</span></span><br><span class="line"><span class="comment">    1. 直接查询出结果，进行结果集的映射</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudents2"</span> <span class="attr">resultMap</span>=<span class="string">"StudentTeacher2"</span> &gt;</span></span><br><span class="line">    select s.id sid, s.name sname , t.name tname</span><br><span class="line">    from student s,teacher t</span><br><span class="line">    where s.tid = t.id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"StudentTeacher2"</span> <span class="attr">type</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"sid"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"sname"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--关联对象property 关联对象在Student实体类中的属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"teacher"</span> <span class="attr">javaType</span>=<span class="string">"Teacher"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"tname"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>去mabits-config文件中注入</p>
</li>
<li><p>测试</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetStudents2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession session = MybatisUtils.getSession();</span><br><span class="line">    StudentMapper mapper = session.getMapper(StudentMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;Student&gt; students = mapper.getStudents2();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Student student : students)&#123;</span><br><span class="line">        System.out.println(</span><br><span class="line">                <span class="string">"学生名:"</span>+ student.getName()</span><br><span class="line">                        +<span class="string">"\t老师:"</span>+student.getTeacher().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul>
<li>按照查询进行嵌套就像SQL中的子查询</li>
<li>按照结果进行嵌套就想SQL中的联表查询</li>
</ul>
<h2 id="一对多处理"><a href="#一对多处理" class="headerlink" title="一对多处理"></a>一对多处理</h2><p>一对多的理解：</p>
<ul>
<li>一个老师拥有多个学生</li>
<li>对于老师这边，就是一个一个一对多的现象，即从一个老师下面拥有一群学生（集合）</li>
<li>collection集合</li>
</ul>
<h3 id="搭建测试环境-1"><a href="#搭建测试环境-1" class="headerlink" title="搭建测试环境"></a>搭建测试环境</h3><p>实体类的编写：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//一个老师多个学生</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; students;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="按照结果嵌套处理-1"><a href="#按照结果嵌套处理-1" class="headerlink" title="按照结果嵌套处理"></a>按照结果嵌套处理</h4><ol>
<li>TeacherMapper接口编写方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取指定老师，及老师下的所有学生</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Teacher <span class="title">getTeacher</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>编写Mapper配置文件</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.zhuuu.dao.TeacherMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--思路：</span></span><br><span class="line"><span class="comment">    1.从学生表和老师表中查出学生id,学生姓名，老师姓名</span></span><br><span class="line"><span class="comment">    2.从查询出来的结果上做结果集映射</span></span><br><span class="line"><span class="comment">      1.集合的话，使用collection</span></span><br><span class="line"><span class="comment">      2.javaType和ofType都是用来指定对象类型的</span></span><br><span class="line"><span class="comment">      3.JavaType是用来指定pojo中属性的类型</span></span><br><span class="line"><span class="comment">      4.oftype是用来以后能干涉到list集合属性中pojo的类型--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getTeacher"</span> <span class="attr">resultMap</span>=<span class="string">"TeacherStudent"</span>&gt;</span></span><br><span class="line">        select s.id sid, s.name sname,t.name tname,t.id tid</span><br><span class="line">        from student s,teacher t</span><br><span class="line">        where s.tid = t.id and t.id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"TeacherStudent"</span> <span class="attr">type</span>=<span class="string">"Teacher"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"tname"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"students"</span> <span class="attr">ofType</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"sid"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"sname"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"tid"</span> <span class="attr">column</span>=<span class="string">"tid"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>将Mapper文件注册到MyBatis-config文件中</li>
<li>测试</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetTeacher</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession session = MybatisUtils.getSession();</span><br><span class="line">    TeacherMapper mapper = session.getMapper(TeacherMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    Teacher teacher = mapper.getTeacher(<span class="number">1</span>);</span><br><span class="line">    System.out.println(teacher.getName());</span><br><span class="line">    System.out.println(teacher.getStudents());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="按照嵌套处理"><a href="#按照嵌套处理" class="headerlink" title="按照嵌套处理"></a>按照嵌套处理</h4><ol>
<li>TeacherMapper接口编写方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Teacher <span class="title">getTeacher2</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>编写接口对应的Mapper配置文件</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getTeacher2"</span> <span class="attr">resultMap</span>=<span class="string">"TeacherStudent2"</span>&gt;</span></span><br><span class="line">  select * from teacher where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"TeacherStudent2"</span> <span class="attr">type</span>=<span class="string">"Teacher"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--column是一对多的外键 , 写的是一的主键的列名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"students"</span> <span class="attr">javaType</span>=<span class="string">"ArrayList"</span> <span class="attr">ofType</span>=<span class="string">"Student"</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">select</span>=<span class="string">"getStudentByTeacherId"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudentByTeacherId"</span> <span class="attr">resultType</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">    select * from student where tid = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>将Mapper文件注册到MyBatis-config文件中</p>
</li>
<li><p>测试</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetTeacher2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession session = MybatisUtils.getSession();</span><br><span class="line">    TeacherMapper mapper = session.getMapper(TeacherMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    Teacher teacher = mapper.getTeacher2(<span class="number">1</span>);</span><br><span class="line">    System.out.println(teacher.getName());</span><br><span class="line">    System.out.println(teacher.getStudents());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2><ul>
<li>关联-associtaion</li>
<li>集合-collection</li>
<li>association是用于一对一和多对一</li>
<li>collection是用于一对多的关系</li>
</ul>
<ul>
<li>JavaType和ofType都是用来指定对象类型的<ul>
<li>JavaType是用来指定pojo中的类型    （说白了就是返回的类名）</li>
<li>ofType到指定的是映射到list集合属性中pojo的类型  （说白了就是泛型）</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis-日志和分页的实现</title>
    <url>/2019/07/15/Mybatis/MyBatis-%E6%97%A5%E5%BF%97%E5%92%8C%E5%88%86%E9%A1%B5%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="MyBatis-日志和分页的实现"><a href="#MyBatis-日志和分页的实现" class="headerlink" title="MyBatis 日志和分页的实现"></a>MyBatis 日志和分页的实现</h1><h2 id="日志的实现"><a href="#日志的实现" class="headerlink" title="日志的实现"></a>日志的实现</h2><h3 id="为什么需要日志？"><a href="#为什么需要日志？" class="headerlink" title="为什么需要日志？"></a>为什么需要日志？</h3><ul>
<li>以往的开发过程，我们会经常使用到debug模式来调节，跟踪我们的代码执行过程。</li>
<li>但是现在使用Mybatis是基于接口，配置文件的源代码执行过程。因此，我们必须选择日志工具来作为我们开发，调节程序的工具。</li>
</ul>
<p><strong>Mybatis内置的日志工厂提供日志功能，具体的日志实现有以下几种工具：</strong></p>
<ul>
<li>SLF4J</li>
<li>Apache Commons Logging</li>
<li>Log4j 2</li>
<li>Log4j</li>
<li>JDK logging</li>
</ul>
<a id="more"></a>



<h3 id="标准日志的实现"><a href="#标准日志的实现" class="headerlink" title="标准日志的实现"></a>标准日志的实现</h3><p>指定MyBatis应该是用那个日志记录实现。如果此设置不存在，则会自动发现日志记录实现。</p>
<p>实现方式：在resource文件夹下的mybatisconfig.xml添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"STDOUT_LOGGING"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>日志输出结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">E:\jdk1<span class="number">.8</span>\bin\java.exe -ea -Didea.test.cyclic.buffer.size=<span class="number">1048576</span> <span class="string">"-javaagent:E:\IntelliJ IDEA 2019.1\lib\idea_rt.jar=54966:E:\IntelliJ IDEA 2019.1\bin"</span> -Dfile.encoding=UTF-<span class="number">8</span> -classpath <span class="string">"E:\IntelliJ IDEA 2019.1\lib\idea_rt.jar;E:\IntelliJ IDEA 2019.1\plugins\junit\lib\junit-rt.jar;E:\IntelliJ IDEA 2019.1\plugins\junit\lib\junit5-rt.jar;E:\jdk1.8\jre\lib\charsets.jar;E:\jdk1.8\jre\lib\deploy.jar;E:\jdk1.8\jre\lib\ext\access-bridge-64.jar;E:\jdk1.8\jre\lib\ext\cldrdata.jar;E:\jdk1.8\jre\lib\ext\dnsns.jar;E:\jdk1.8\jre\lib\ext\jaccess.jar;E:\jdk1.8\jre\lib\ext\jfxrt.jar;E:\jdk1.8\jre\lib\ext\localedata.jar;E:\jdk1.8\jre\lib\ext\nashorn.jar;E:\jdk1.8\jre\lib\ext\sunec.jar;E:\jdk1.8\jre\lib\ext\sunjce_provider.jar;E:\jdk1.8\jre\lib\ext\sunmscapi.jar;E:\jdk1.8\jre\lib\ext\sunpkcs11.jar;E:\jdk1.8\jre\lib\ext\zipfs.jar;E:\jdk1.8\jre\lib\javaws.jar;E:\jdk1.8\jre\lib\jce.jar;E:\jdk1.8\jre\lib\jfr.jar;E:\jdk1.8\jre\lib\jfxswt.jar;E:\jdk1.8\jre\lib\jsse.jar;E:\jdk1.8\jre\lib\management-agent.jar;E:\jdk1.8\jre\lib\plugin.jar;E:\jdk1.8\jre\lib\resources.jar;E:\jdk1.8\jre\lib\rt.jar;E:\MyBatis-study\MyBatis-04\target\test-classes;E:\MyBatis-study\MyBatis-04\target\classes;E:\maven_local_repo\mysql\mysql-connector-java\5.1.46\mysql-connector-java-5.1.46.jar;E:\maven_local_repo\org\mybatis\mybatis\3.5.2\mybatis-3.5.2.jar;E:\maven_local_repo\junit\junit\4.13\junit-4.13.jar;E:\maven_local_repo\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar"</span> com.intellij.rt.execution.junit.JUnitStarter -ideVersion5 -junit4 daoTest,getUserByID</span><br><span class="line">Logging initialized using <span class="string">'class org.apache.ibatis.logging.stdout.StdOutImpl'</span> adapter.</span><br><span class="line">PooledDataSource forcefully closed/removed all connections.</span><br><span class="line">PooledDataSource forcefully closed/removed all connections.</span><br><span class="line">PooledDataSource forcefully closed/removed all connections.</span><br><span class="line">PooledDataSource forcefully closed/removed all connections.</span><br><span class="line">Opening JDBC Connection</span><br><span class="line">Created connection <span class="number">1375995437</span>.</span><br><span class="line">Setting autocommit to <span class="keyword">false</span> on JDBC Connection [com.mysql.jdbc.JDBC4Connection@<span class="number">5204062</span>d]</span><br><span class="line">==&gt;  Preparing: select * from mybatis.user where id = ? </span><br><span class="line">==&gt; Parameters: <span class="number">1</span>(Integer)</span><br><span class="line">&lt;==    Columns: id, name, pwd</span><br><span class="line">&lt;==        Row: <span class="number">1</span>, zhuuu, <span class="number">123456</span></span><br><span class="line">&lt;==      Total: <span class="number">1</span></span><br><span class="line">User&#123;id=<span class="number">1</span>, name=<span class="string">'zhuuu'</span>, password=<span class="string">'null'</span>&#125;</span><br><span class="line">Resetting autocommit to <span class="keyword">true</span> on JDBC Connection [com.mysql.jdbc.JDBC4Connection@<span class="number">5204062</span>d]</span><br><span class="line">Closing JDBC Connection [com.mysql.jdbc.JDBC4Connection@<span class="number">5204062</span>d]</span><br><span class="line">Returned connection <span class="number">1375995437</span> to pool.</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>



<h3 id="Log4j的实现"><a href="#Log4j的实现" class="headerlink" title="Log4j的实现"></a>Log4j的实现</h3><p><strong>简介：</strong></p>
<ul>
<li><p>Log4j是Apache的一个开源项目</p>
</li>
<li><p>通过使用Log4j，我们可以控制日志信息输送的目的地：控制台，文本，GUI组件….</p>
</li>
<li><p>我们也可以控制每一条日志的输出格式；</p>
</li>
<li><p>这些可以通过一个配置文件来灵活地进行配置，而不需要修改应用的代码。</p>
</li>
</ul>
<p><strong>使用步骤</strong></p>
<ol>
<li>导入log4j的包(pom.xml中)</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>编写配置文件（在resource文件夹下新建log4j.properties）</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码</span></span><br><span class="line">log4j.rootLogger=DEBUG,console,file</span><br><span class="line"></span><br><span class="line"><span class="comment">#控制台输出的相关设置</span></span><br><span class="line">log4j.appender.console = org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.console.Target = System.out</span><br><span class="line">log4j.appender.console.Threshold=DEBUG</span><br><span class="line">log4j.appender.console.layout = org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.console.layout.ConversionPattern=[%c]-%m%n</span><br><span class="line"></span><br><span class="line"><span class="comment">#文件输出的相关设置</span></span><br><span class="line">log4j.appender.file = org.apache.log4j.RollingFileAppender</span><br><span class="line">log4j.appender.file.File=./log/zhuuu.log</span><br><span class="line">log4j.appender.file.MaxFileSize=<span class="number">10</span>mb</span><br><span class="line">log4j.appender.file.Threshold=DEBUG</span><br><span class="line">log4j.appender.file.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.file.layout.ConversionPattern=[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n</span><br><span class="line"></span><br><span class="line"><span class="comment">#日志输出级别</span></span><br><span class="line">log4j.logger.org.mybatis=DEBUG</span><br><span class="line">log4j.logger.java.sql=DEBUG</span><br><span class="line">log4j.logger.java.sql.Statement=DEBUG</span><br><span class="line">log4j.logger.java.sql.ResultSet=DEBUG</span><br><span class="line">log4j.logger.java.sql.PreparedStatement=DEBUG</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>Setting设置日志实现</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"LOG4J"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>在程序中实现Log4j进行输出</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注意导包：org.apache.log4j.Logger</span></span><br><span class="line"><span class="keyword">static</span> Logger logger = Logger.getLogger(MyTest<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    logger.info(<span class="string">"info：进入selectUser方法"</span>);</span><br><span class="line">    logger.debug(<span class="string">"debug：进入selectUser方法"</span>);</span><br><span class="line">    logger.error(<span class="string">"error: 进入selectUser方法"</span>);</span><br><span class="line">    SqlSession session = MybatisUtils.getSession();</span><br><span class="line">    UserMapper mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    List&lt;User&gt; users = mapper.selectUser();</span><br><span class="line">    <span class="keyword">for</span> (User user: users)&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">E:\jdk1<span class="number">.8</span>\bin\java.exe -ea -Didea.test.cyclic.buffer.size=<span class="number">1048576</span> <span class="string">"-javaagent:E:\IntelliJ IDEA 2019.1\lib\idea_rt.jar=55311:E:\IntelliJ IDEA 2019.1\bin"</span> -Dfile.encoding=UTF-<span class="number">8</span> -classpath <span class="string">"E:\IntelliJ IDEA 2019.1\lib\idea_rt.jar;E:\IntelliJ IDEA 2019.1\plugins\junit\lib\junit-rt.jar;E:\IntelliJ IDEA 2019.1\plugins\junit\lib\junit5-rt.jar;E:\jdk1.8\jre\lib\charsets.jar;E:\jdk1.8\jre\lib\deploy.jar;E:\jdk1.8\jre\lib\ext\access-bridge-64.jar;E:\jdk1.8\jre\lib\ext\cldrdata.jar;E:\jdk1.8\jre\lib\ext\dnsns.jar;E:\jdk1.8\jre\lib\ext\jaccess.jar;E:\jdk1.8\jre\lib\ext\jfxrt.jar;E:\jdk1.8\jre\lib\ext\localedata.jar;E:\jdk1.8\jre\lib\ext\nashorn.jar;E:\jdk1.8\jre\lib\ext\sunec.jar;E:\jdk1.8\jre\lib\ext\sunjce_provider.jar;E:\jdk1.8\jre\lib\ext\sunmscapi.jar;E:\jdk1.8\jre\lib\ext\sunpkcs11.jar;E:\jdk1.8\jre\lib\ext\zipfs.jar;E:\jdk1.8\jre\lib\javaws.jar;E:\jdk1.8\jre\lib\jce.jar;E:\jdk1.8\jre\lib\jfr.jar;E:\jdk1.8\jre\lib\jfxswt.jar;E:\jdk1.8\jre\lib\jsse.jar;E:\jdk1.8\jre\lib\management-agent.jar;E:\jdk1.8\jre\lib\plugin.jar;E:\jdk1.8\jre\lib\resources.jar;E:\jdk1.8\jre\lib\rt.jar;E:\MyBatis-study\MyBatis-04\target\test-classes;E:\MyBatis-study\MyBatis-04\target\classes;E:\maven_local_repo\log4j\log4j\1.2.17\log4j-1.2.17.jar;E:\maven_local_repo\mysql\mysql-connector-java\5.1.46\mysql-connector-java-5.1.46.jar;E:\maven_local_repo\org\mybatis\mybatis\3.5.2\mybatis-3.5.2.jar;E:\maven_local_repo\junit\junit\4.13\junit-4.13.jar;E:\maven_local_repo\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar"</span> com.intellij.rt.execution.junit.JUnitStarter -ideVersion5 -junit4 daoTest,getUserByID</span><br><span class="line">[daoTest]-info:进入了selectUser方法</span><br><span class="line">[daoTest]-debug:进入了selectUser方法</span><br><span class="line">[daoTest]-error:进入了selectUser方法</span><br><span class="line">[org.apache.ibatis.logging.LogFactory]-Logging initialized using <span class="string">'class org.apache.ibatis.logging.log4j.Log4jImpl'</span> adapter.</span><br><span class="line">[org.apache.ibatis.logging.LogFactory]-Logging initialized using <span class="string">'class org.apache.ibatis.logging.log4j.Log4jImpl'</span> adapter.</span><br><span class="line">[org.apache.ibatis.datasource.pooled.PooledDataSource]-PooledDataSource forcefully closed/removed all connections.</span><br><span class="line">[org.apache.ibatis.datasource.pooled.PooledDataSource]-PooledDataSource forcefully closed/removed all connections.</span><br><span class="line">[org.apache.ibatis.datasource.pooled.PooledDataSource]-PooledDataSource forcefully closed/removed all connections.</span><br><span class="line">[org.apache.ibatis.datasource.pooled.PooledDataSource]-PooledDataSource forcefully closed/removed all connections.</span><br><span class="line">[org.apache.ibatis.transaction.jdbc.JdbcTransaction]-Opening JDBC Connection</span><br><span class="line">[org.apache.ibatis.datasource.pooled.PooledDataSource]-Created connection <span class="number">673186785</span>.</span><br><span class="line">[org.apache.ibatis.transaction.jdbc.JdbcTransaction]-Setting autocommit to <span class="keyword">false</span> on JDBC Connection [com.mysql.jdbc.JDBC4Connection@<span class="number">282003e1</span>]</span><br><span class="line">[com.zhuuu.dao.Mapper.getUserbyID]-==&gt;  Preparing: select * from mybatis.user where id = ? </span><br><span class="line">[com.zhuuu.dao.Mapper.getUserbyID]-==&gt; Parameters: <span class="number">1</span>(Integer)</span><br><span class="line">[com.zhuuu.dao.Mapper.getUserbyID]-&lt;==      Total: <span class="number">1</span></span><br><span class="line">User&#123;id=<span class="number">1</span>, name=<span class="string">'zhuuu'</span>, password=<span class="string">'null'</span>&#125;</span><br><span class="line">[org.apache.ibatis.transaction.jdbc.JdbcTransaction]-Resetting autocommit to <span class="keyword">true</span> on JDBC Connection [com.mysql.jdbc.JDBC4Connection@<span class="number">282003e1</span>]</span><br><span class="line">[org.apache.ibatis.transaction.jdbc.JdbcTransaction]-Closing JDBC Connection [com.mysql.jdbc.JDBC4Connection@<span class="number">282003e1</span>]</span><br><span class="line">[org.apache.ibatis.datasource.pooled.PooledDataSource]-Returned connection <span class="number">673186785</span> to pool.</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>



<h2 id="分页的实现"><a href="#分页的实现" class="headerlink" title="分页的实现"></a>分页的实现</h2><h3 id="为什么需要分页？"><a href="#为什么需要分页？" class="headerlink" title="为什么需要分页？"></a>为什么需要分页？</h3><ul>
<li>在学习mybatis等持久层框架的时候，会经常对数据进行增删改查操作，使用最多的是对数据库进行查询操作</li>
<li>如果查询大量数据的时候，我们往往使用分页进行查询，也就是每次处理小部分数据，这样对数据库压力就在可控范围内。</li>
</ul>
<h3 id="limit实现分页"><a href="#limit实现分页" class="headerlink" title="limit实现分页"></a>limit实现分页</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#语法</span><br><span class="line">select * from table Limit startIndex,pageSize</span><br><span class="line"></span><br><span class="line">#如:</span><br><span class="line">SELECT * FROM table LIMIT 5,10; &#x2F;&#x2F; 检索记录行 6-15 </span><br><span class="line"></span><br><span class="line">#如果只给定一个参数，它表示返回最大的记录行数目：    </span><br><span class="line">SELECT * FROM table LIMIT 5; &#x2F;&#x2F;检索前 5 个记录行 </span><br><span class="line"></span><br><span class="line">#换句话说，LIMIT n 等价于 LIMIT 0,n。</span><br></pre></td></tr></table></figure>



<p>使用步骤：</p>
<ol>
<li>修改Mapper文件</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUser"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    select * from user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>Mapper接口修改入参为map</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//选择全部用户实现分页</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">selectUser</span><span class="params">(Map&lt;String,Integer&gt; map)</span></span>;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>在测试类中传入参数</li>
</ol>
<ul>
<li>推断：起始位置 = （当前页面 - 1 ） * 页面大小</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.zhuuu.dao.Mapper;</span><br><span class="line"><span class="keyword">import</span> com.zhuuu.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.zhuuu.utils.MybatisUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">daoTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession session = MybatisUtils.getSession();</span><br><span class="line">        Mapper mapper = session.getMapper(Mapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> curentPage = <span class="number">1</span>;<span class="comment">//第几页</span></span><br><span class="line">        <span class="keyword">int</span> pageSize = <span class="number">2</span>;<span class="comment">//每页显示几个</span></span><br><span class="line"></span><br><span class="line">        HashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class="line">        map.put(<span class="string">"startIndex"</span>,(curentPage-<span class="number">1</span>)*pageSize);</span><br><span class="line">        map.put(<span class="string">"pageSize"</span>,pageSize);</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; userList = mapper.getUserList(map);</span><br><span class="line">        <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="RowBounds分页"><a href="#RowBounds分页" class="headerlink" title="RowBounds分页"></a>RowBounds分页</h3><ul>
<li>除了使用Limit在SQL层面实现分页，也可以使用RowBounds在Java代码层面实现分页，</li>
<li>当然此种方式作为了解即可。我们来看下如何实现的！</li>
</ul>
<p><strong>步骤：</strong></p>
<ol>
<li>mapper接口</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//选择全部用户RowBounds实现分页</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUserByRowBounds</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>mapper.xml文件</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserByRowBounds"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">  select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>测试类    </p>
<p>在这里使用RowBounds类</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserByRowBounds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession session = MybatisUtils.getSession();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> currentPage = <span class="number">2</span>;  <span class="comment">//第几页</span></span><br><span class="line">    <span class="keyword">int</span> pageSize = <span class="number">2</span>;  <span class="comment">//每页显示几个</span></span><br><span class="line">    RowBounds rowBounds = <span class="keyword">new</span> RowBounds((currentPage-<span class="number">1</span>)*pageSize,pageSize);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过session.**方法进行传递rowBounds，[此种方式现在已经不推荐使用了]</span></span><br><span class="line">    List&lt;User&gt; users = session.selectList(<span class="string">"com.zhuuu.mapper.UserMapper.getUserByRowBounds"</span>, <span class="keyword">null</span>, rowBounds);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (User user: users)&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="分页插件："><a href="#分页插件：" class="headerlink" title="分页插件："></a>分页插件：</h2><p>官方文档：<a href="https://pagehelper.github.io/" target="_blank" rel="noopener">https://pagehelper.github.io/</a></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200213160022.png" alt=""></p>
]]></content>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis-使用注解开发</title>
    <url>/2019/07/14/Mybatis/MyBatis-%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="MyBatis-使用注解开发"><a href="#MyBatis-使用注解开发" class="headerlink" title="MyBatis 使用注解开发"></a>MyBatis 使用注解开发</h1><h2 id="面向接口编程"><a href="#面向接口编程" class="headerlink" title="面向接口编程"></a>面向接口编程</h2><ul>
<li><p>真正的开发中，很多时候我们会选择面向接口编程</p>
</li>
<li><p><strong>根本原因 : 解耦 , 可拓展 , 提高复用 , 分层开发中 , 上层不用管具体的实现 , 大家都遵守共同的标准 , 使得开发变得容易 , 规范性更好</strong></p>
</li>
<li><p>在一个面向对象的系统中，系统的各种功能是由许许多多的不同对象协作完成的。在这种情况下，各个对象内部是如何实现自己的,对系统设计人员来讲就不那么重要了</p>
</li>
<li><p>而各个对象之间的协作关系则成为系统设计的关键。小到不同类之间的通信，大到各模块之间的交互，在系统设计之初都是要着重考虑的，这也是系统设计的主要工作内容。面向接口编程就是指按照这种思想来编程。</p>
</li>
</ul>
<h3 id="关于接口的理解"><a href="#关于接口的理解" class="headerlink" title="关于接口的理解"></a>关于接口的理解</h3><ul>
<li><p>接口从更深层次的理解，应该是定义（规范，约束）与实现（名实分离的原则）的分离</p>
</li>
<li><p>接口的本身反映了系统设计人员对系统的抽象理解</p>
</li>
<li><p>接口应该有两类：</p>
<ul>
<li>第一类是对一个个体的抽象，它可对应为一个抽象体（abstract class）;</li>
<li>第二类是对一个个体某一方面的抽象，即形成一个抽象面（interface）;</li>
</ul>
<p><strong>一个个体有可能有多个抽象面，抽象体和抽象面是有区别的</strong></p>
</li>
</ul>
<h3 id="三个面向的区别"><a href="#三个面向的区别" class="headerlink" title="三个面向的区别"></a>三个面向的区别</h3><ul>
<li>面向对象：考虑问题时，以对象为单位，考虑它的属性及方法</li>
<li>面向过程：考虑问题时，以一个具体的流程（事务过程）为单位，考虑它的实现</li>
<li>接口设计与非接口设计是针对复用技术而言的，与面向对象（过程）不是一个问题.更多的体现就是对系统整体的架构</li>
</ul>
<a id="more"></a>

<h2 id="利用注解开发"><a href="#利用注解开发" class="headerlink" title="利用注解开发"></a>利用注解开发</h2><ul>
<li><strong>mybatis最初配置信息是基于 XML ,映射语句(SQL)也是定义在 XML 中的。而到MyBatis 3提供了新的基于注解的配置。</strong></li>
<li><strong>不幸的是，Java 注解的的表达力和灵活性十分有限。最强大的 MyBatis 映射并不能用注解来构建</strong></li>
</ul>
<p>sql类型主要分成：</p>
<ul>
<li>@select()</li>
<li>@update()</li>
<li>@Insert()</li>
<li>@delete()</li>
</ul>
<p>【注意】利用注解开发就不需要mapper.xml映射文件了 .</p>
<p>步骤1：在我们的接口中添加注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Mapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select id,name,pwd as password from user"</span>)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>步骤2：在mybatis的核心配置文件中注入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    每一个Mapper,XML都需要在mybatis核心配置文件中注册--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"com.zhuuu.dao.Mapper"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>步骤3：去进行测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetAllUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession session = MybatisUtils.getSession();</span><br><span class="line">    <span class="comment">//本质上利用了jvm的动态代理机制</span></span><br><span class="line">    UserMapper mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">   List&lt;User&gt; users = mapper.getAllUser();</span><br><span class="line">    <span class="keyword">for</span> (User user : users)&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Debug查看本质"><a href="#Debug查看本质" class="headerlink" title="Debug查看本质"></a>Debug查看本质</h3><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200217111313.png" alt=""></p>
<p><strong>本质上利用了jvm动态代理机制</strong></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200217111422.png" alt=""></p>
<h3 id="MyBatis详细的执行流程"><a href="#MyBatis详细的执行流程" class="headerlink" title="MyBatis详细的执行流程"></a>MyBatis详细的执行流程</h3><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200217111534.png" alt=""></p>
<h2 id="注解实现增删改"><a href="#注解实现增删改" class="headerlink" title="注解实现增删改"></a>注解实现增删改</h2><h3 id="自动实现提交事务"><a href="#自动实现提交事务" class="headerlink" title="自动实现提交事务"></a>自动实现提交事务</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//改造MybatisUtils工具类的getSession( ) 方法，重载实现。【鸡汤：多看源码实现】</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取SqlSession连接</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getSession(<span class="keyword">true</span>); <span class="comment">//事务自动提交</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSession</span><span class="params">(<span class="keyword">boolean</span> flag)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sqlSessionFactory.openSession(flag);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【注意】确保实体类和数据库字段对应</p>
<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><ol>
<li>编写接口方法注解</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据id查询用户</span></span><br><span class="line"><span class="meta">@Select</span>(<span class="string">"select * from user where id = #&#123;id&#125;"</span>)</span><br><span class="line"><span class="function">User <span class="title">selectUserById</span><span class="params">(@Param(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id)</span>;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>测试</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectUserById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession session = MybatisUtils.getSession();</span><br><span class="line">    UserMapper mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    User user = mapper.selectUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line"></span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h3><ol>
<li>编写接口方法注解</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加一个用户</span></span><br><span class="line"><span class="meta">@Insert</span>(<span class="string">"insert into user (id,name,pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;)"</span>)</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>测试</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAddUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession session = MybatisUtils.getSession();</span><br><span class="line">    UserMapper mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    User user = <span class="keyword">new</span> User(<span class="number">6</span>, <span class="string">"朱酱酱"</span>, <span class="string">"123456"</span>);</span><br><span class="line">    mapper.addUser(user);</span><br><span class="line"></span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><ol>
<li>编写接口方法注解：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改一个用户</span></span><br><span class="line"><span class="meta">@Update</span>(<span class="string">"update user set name=#&#123;name&#125;,pwd=#&#123;pwd&#125; where id = #&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>测试</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession session = MybatisUtils.getSession();</span><br><span class="line">    UserMapper mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    User user = <span class="keyword">new</span> User(<span class="number">6</span>, <span class="string">"朱酱酱帅"</span>, <span class="string">"zxcvbn"</span>);</span><br><span class="line">    mapper.updateUser(user);</span><br><span class="line"></span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><ol>
<li>编写接口方法注解</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据id删除用</span></span><br><span class="line"><span class="meta">@Delete</span>(<span class="string">"delete from user where id = #&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(@Param(<span class="string">"id"</span>)</span><span class="keyword">int</span> id)</span>;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>测试</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession session = MybatisUtils.getSession();</span><br><span class="line">    UserMapper mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    mapper.deleteUser(<span class="number">6</span>);</span><br><span class="line">    </span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【注意点：增删改一定记得对事务的处理】</p>
<h2 id="关于-Param"><a href="#关于-Param" class="headerlink" title="关于@Param"></a>关于@Param</h2><p>@Param注解用于给方法参数起一个名字。以下是总结的使用原则：</p>
<ul>
<li>在方法只接受一个参数的情况下，可以不使用@Param</li>
<li>在方法接受多个参数的情况下，建议一定要使用@Param注解给参数命名</li>
<li>如果参数是JavaBean，则不能使用@Param</li>
<li>不使用@Param注解时，参数只能有一个，并且是Javabean</li>
</ul>
<h2 id="关于-和-的区别"><a href="#关于-和-的区别" class="headerlink" title="关于#和$的区别"></a>关于#和$的区别</h2><ul>
<li><code>#{}</code> 的作用主要是替换预编译语句(PrepareStatement)中的   占位符?    【推荐使用】</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO user (name) VALUES (#&#123;name&#125;);</span><br><span class="line">INSERT INTO user (name) VALUES (?);</span><br></pre></td></tr></table></figure>

<ul>
<li>${} 的作用是直接进行字符串的替换</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO user (name) VALUES (&#39;$&#123;name&#125;&#39;);</span><br><span class="line">INSERT INTO user (name) VALUES (&#39;Zhuuu&#39;);</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis-生命周期和作用域</title>
    <url>/2019/07/13/Mybatis/MyBatis-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
    <content><![CDATA[<h1 id="MyBatis-生命周期和作用域"><a href="#MyBatis-生命周期和作用域" class="headerlink" title="MyBatis 生命周期和作用域"></a>MyBatis 生命周期和作用域</h1><h2 id="作用域（Scope）和生命周期"><a href="#作用域（Scope）和生命周期" class="headerlink" title="作用域（Scope）和生命周期"></a><strong>作用域（Scope）和生命周期</strong></h2><ul>
<li><p>理解我们目前已经讨论过的不同作用域和生命周期类是至关重要的，因为错误的使用会导致非常严重的并发问题。</p>
</li>
<li><p>画一个流程图，分析一下Mybatis的执行过程！</p>
</li>
</ul>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200213111632.png" alt=""></p>
<p><a href="https://mybatis.org/mybatis-3/zh/getting-started.html" target="_blank" rel="noopener">官方说明</a></p>
<a id="more"></a>



<h3 id="SqlSessionFactoryBuilder"><a href="#SqlSessionFactoryBuilder" class="headerlink" title="SqlSessionFactoryBuilder"></a>SqlSessionFactoryBuilder</h3><ul>
<li>这个类可以被实例化、使用和丢弃，一旦创建了 SqlSessionFactory，就不再需要它了。</li>
<li>局部方法变量</li>
</ul>
<h3 id="SqlSessionFactory"><a href="#SqlSessionFactory" class="headerlink" title="SqlSessionFactory"></a>SqlSessionFactory</h3><ul>
<li><p>SqlSessionFactory 可以被认为是一个数据库连接池，它的作用是创建 SqlSession 接口对象。</p>
</li>
<li><p>因为 MyBatis 的本质就是 Java 对数据库的操作，所以 SqlSessionFactory 的生命周期存在于整个 MyBatis 的应用之中，所以一旦创建了 SqlSessionFactory，就要长期保存它，直至不再使用 MyBatis 应用</p>
</li>
<li><p>因此 SqlSessionFactory 的最佳作用域是应用作用域</p>
</li>
<li><p>最简单的就是使用单例模式或者静态单例模式。</p>
</li>
</ul>
<h3 id="SqlSession"><a href="#SqlSession" class="headerlink" title="SqlSession"></a>SqlSession</h3><ul>
<li><p>连接到连接池的一个请求！</p>
</li>
<li><p>它的最佳的作用域是请求或方法作用域。</p>
</li>
<li><p>如果你现在正在使用一种 Web 框架，要考虑 SqlSession 放在一个和 HTTP 请求对象相似的作用域中。 换句话说，每次收到的 HTTP 请求，就可以打开一个 SqlSession，返回一个响应，就关闭它。 这个关闭操作是很重要的。</p>
</li>
</ul>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200213112344.png" alt=""></p>
]]></content>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode-074</title>
    <url>/2019/07/12/Leetcode/Leetcode-074/</url>
    <content><![CDATA[<h1 id="Leecode-074-Search-a-2D-Matrix"><a href="#Leecode-074-Search-a-2D-Matrix" class="headerlink" title="Leecode-074 Search a 2D Matrix"></a>Leecode-074 <a href="https://leetcode-cn.com/problems/search-a-2d-matrix/" target="_blank" rel="noopener">Search a 2D Matrix</a></h1><h2 id="思路：两次二分法查找"><a href="#思路：两次二分法查找" class="headerlink" title="思路：两次二分法查找"></a>思路：两次二分法查找</h2><p><strong>题目描述</strong></p>
<ul>
<li>从一个二维矩阵中找出想要的数值</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">matrix = [</span><br><span class="line">  [<span class="number">1</span>,   <span class="number">3</span>,  <span class="number">5</span>,  <span class="number">7</span>],</span><br><span class="line">  [<span class="number">10</span>, <span class="number">11</span>, <span class="number">16</span>, <span class="number">20</span>],</span><br><span class="line">  [<span class="number">23</span>, <span class="number">30</span>, <span class="number">34</span>, <span class="number">50</span>]</span><br><span class="line">]</span><br><span class="line">target = <span class="number">3</span></span><br><span class="line">Output: <span class="keyword">true</span></span><br><span class="line"><span class="comment">//=============================</span></span><br><span class="line">Input:</span><br><span class="line">matrix = [</span><br><span class="line">  [<span class="number">1</span>,   <span class="number">3</span>,  <span class="number">5</span>,  <span class="number">7</span>],</span><br><span class="line">  [<span class="number">10</span>, <span class="number">11</span>, <span class="number">16</span>, <span class="number">20</span>],</span><br><span class="line">  [<span class="number">23</span>, <span class="number">30</span>, <span class="number">34</span>, <span class="number">50</span>]</span><br><span class="line">]</span><br><span class="line">target = <span class="number">13</span></span><br><span class="line">Output: <span class="keyword">false</span></span><br></pre></td></tr></table></figure>



<p><strong>Solution：两次二分法查找</strong></p>
<ul>
<li>第一次：设置中间行mid,从纵向维度寻找target所在的行（row）</li>
<li>第二次：设置中间数mid,从横向维度寻找target</li>
<li>时间复杂度：两次二分查找（一次为O(logm) 两次是O(logm)(logn)）</li>
</ul>
<a id="more"></a>



<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p><strong>Solution :</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">searchMatrix</span><span class="params">(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(matrix == <span class="keyword">null</span> || matrix.length == <span class="number">0</span>|| matrix[<span class="number">0</span>].length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">//第一次二分法，判断在哪一行</span></span><br><span class="line">        <span class="keyword">int</span> startRow = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> endRow   = matrix.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> row      = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> endCol   = matrix[<span class="number">0</span>].length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(startRow + <span class="number">1</span> &lt; endRow)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = startRow + (endRow - startRow)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(matrix[mid][endRow] &lt; target) startRow = mid;</span><br><span class="line">            <span class="keyword">else</span> endRow = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (matrix[startRow][endCol] &gt;= target) row = startRow;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (matrix[endRow][endCol] &gt;= target) row = endRow;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">//第二次二分法，判断这一行中是否存在</span></span><br><span class="line">    	<span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> end   = endCol;</span><br><span class="line">        <span class="keyword">while</span> (start + <span class="number">1</span> &lt; end)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = start + (end - start)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(matrix[row][mid] &lt; target) start = mid;</span><br><span class="line">            <span class="keyword">else</span> end = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(matrix[row][start]==target || matrix[row][end] == target) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p><strong>Solution : 两次二分查找</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">searchMatrix</span><span class="params">(self, matrix: List[List[int]], target: int)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> matrix: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        startRow = <span class="number">0</span></span><br><span class="line">        endRow   = len(matrix) - <span class="number">1</span></span><br><span class="line">        endCol   = len(matrix[<span class="number">0</span>])  - <span class="number">1</span></span><br><span class="line">        row      =  <span class="number">-1</span></span><br><span class="line">        <span class="keyword">while</span> startRow + <span class="number">1</span> &lt; endRow:</span><br><span class="line">            mid = startRow + (startRow - endRow)//<span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> matrix[mid][endCol] &lt; target: startRow = mid</span><br><span class="line">            <span class="keyword">else</span>: endRow = mid</span><br><span class="line">        <span class="keyword">if</span> matrix[startRow][endCol] &gt;= target: row = startRow</span><br><span class="line">        <span class="keyword">elif</span> matrix[endRow][endCol] &gt;= target: row = endRow</span><br><span class="line">        <span class="keyword">else</span>: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        start = <span class="number">0</span></span><br><span class="line">        end = endCol</span><br><span class="line">        <span class="keyword">while</span> start + <span class="number">1</span> &lt; end:</span><br><span class="line">            mid = start + (end - start)//<span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> matrix[row][mid] &lt; target: start = mid</span><br><span class="line">            <span class="keyword">else</span>: end = mid</span><br><span class="line">        <span class="keyword">if</span> matrix[row][start] == target <span class="keyword">and</span> matrix[row][end] == target: <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>: <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode-167</title>
    <url>/2019/07/12/Leetcode/Leetcode-167/</url>
    <content><![CDATA[<h1 id="Leecode-167Two-Sum-II-Input-array-is-sorted"><a href="#Leecode-167Two-Sum-II-Input-array-is-sorted" class="headerlink" title="Leecode-167Two Sum II - Input array is sorted"></a>Leecode-167<a href="https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/" target="_blank" rel="noopener">Two Sum II - Input array is sorted</a></h1><h2 id="思路：双指针"><a href="#思路：双指针" class="headerlink" title="思路：双指针"></a>思路：双指针</h2><p><strong>题目描述：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: numbers&#x3D;&#123;2, 7, 11, 15&#125;, target&#x3D;9</span><br><span class="line">Output: index1&#x3D;1, index2&#x3D;2</span><br></pre></td></tr></table></figure>



<p><strong>Solution：双指针</strong></p>
<ul>
<li><p>需要的参数</p>
<ul>
<li>头指针指向index= 0</li>
<li>尾指针指向index=length-1 (最后)</li>
<li>sum = nums[i] + num[j]</li>
</ul>
</li>
<li><p>步骤：</p>
<ul>
<li>使用双指针，一个指针指向值较小的元素，一个指针指向值较大的元素。指向较小元素的指针从头向尾遍历，指向较大元素的指针从尾向头遍历。</li>
<li>如果两个指针指向元素的和sum == target ,那么直接返回两个数的index</li>
<li>如果 sum &gt; target，移动较大的元素，使得sum变小一些</li>
<li>如果 sum &lt; target,   移动较小的元素，使得sum变大一些</li>
</ul>
</li>
<li><p>算法复杂度分析：</p>
<ul>
<li>数组中的元素最多遍历一次，时间复杂度为 O(N)。</li>
<li>只使用了两个额外变量，空间复杂度为  O(1)。</li>
</ul>
</li>
</ul>
<a id="more"></a>

<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p><strong>Solution :</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">if</span>(numbers == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j = numbers.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; j)&#123;</span><br><span class="line">            <span class="keyword">int</span> sum = numbers[i] + numbers[j];</span><br><span class="line">            <span class="keyword">if</span>(sum == target)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;i + <span class="number">1</span>,j + <span class="number">1</span>&#125;;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sum &lt; target)&#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p><strong>Solution :</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, numbers: List[int], target: int)</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> numbers: <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        j = len(numbers) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; j:</span><br><span class="line">            sum = numbers[i] + numbers[j]</span><br><span class="line">            <span class="keyword">if</span> sum == target:</span><br><span class="line">                <span class="keyword">return</span>[i + <span class="number">1</span>,j + <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">elif</span> sum &lt;= target:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>Leetcode</tag>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode-633</title>
    <url>/2019/07/12/Leetcode/Leetcode-633/</url>
    <content><![CDATA[<h1 id="Leecode-633-Sum-of-Square-Numbers"><a href="#Leecode-633-Sum-of-Square-Numbers" class="headerlink" title="Leecode-633 [Sum of Square Numbers]"></a>Leecode-633 [<a href="https://leetcode-cn.com/problems/sum-of-square-numbers/" target="_blank" rel="noopener">Sum of Square Numbers</a>]</h1><h2 id="思路：双指针"><a href="#思路：双指针" class="headerlink" title="思路：双指针"></a>思路：双指针</h2><p><strong>题目描述：判断一个非负整数是否为两个整数的平方和。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 5</span><br><span class="line">Output: True</span><br><span class="line">Explanation: 1 * 1 + 2 * 2 &#x3D; 5</span><br></pre></td></tr></table></figure>

<p>可以看成是在元素为 0~target 的有序数组中查找两个数，使得这两个数的平方和为 target，</p>
<p>如果能找到，则返回 true，表示 target 是两个整数的平方和</p>
<p><strong>注意点：本题和 167. Two Sum II - Input array is sorted 类似，只有一个明显区别：一个是和为 target，一个是平方和为 target。本题同样可以使用双指针得到两个数，使其平方和为 target。</strong></p>
<p><strong>Solution：双指针</strong></p>
<ul>
<li>步骤<ul>
<li>本题目的关键时右指针的初始化，实现剪枝，从而降低时间复杂度</li>
<li>设右指针为x,左指针固定为0.为了使 0^2 + x^2 的值尽可能接近 target,我们可以将 x 取为 sqrt(target)。</li>
</ul>
</li>
</ul>
<ul>
<li>复杂度分析：<ul>
<li>因为最多只需要遍历一次0~sqrt(target),所以时间复杂度为o(sqrt(target))</li>
<li>空间复杂度为O（1）,因为使用了两个变量</li>
</ul>
</li>
</ul>
<a id="more"></a>

<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p><strong>Solution : 双指针</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">judgeSquareSum</span><span class="params">(<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (c &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j = (<span class="keyword">int</span>)Math.sqrt(c); <span class="comment">//这里一定要强转</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt;= j)&#123;</span><br><span class="line">            <span class="keyword">int</span> powSum = i*i + j*j;</span><br><span class="line">            <span class="keyword">if</span> (c == powSum) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (c &lt; powSum)  j--;</span><br><span class="line">            <span class="keyword">if</span> (c &gt; powSum)  i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p><strong>Solution : 双指针</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">judgeSquareSum</span><span class="params">(self, c: int)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> c &lt; <span class="number">0</span>: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        i = <span class="number">0</span> </span><br><span class="line">        j = int(math.sqrt(c)) <span class="comment">#这里一定要强转成int</span></span><br><span class="line">        <span class="keyword">while</span> i &lt;= j:</span><br><span class="line">            powSum = i*i + j*j</span><br><span class="line">            <span class="keyword">if</span> powSum == c:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">elif</span> powSum &gt; c:</span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> powSum &lt; c:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>Leetcode</tag>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis-配置解析</title>
    <url>/2019/07/11/Mybatis/MyBatis-%E9%85%8D%E7%BD%AE%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h1 id="MyBatis-配置解析"><a href="#MyBatis-配置解析" class="headerlink" title="MyBatis 配置解析"></a>MyBatis 配置解析</h1><h2 id="核心配置文件"><a href="#核心配置文件" class="headerlink" title="核心配置文件"></a>核心配置文件</h2><ul>
<li>mybatis-config.xml 系统核心配置文件</li>
<li>MyBatis 的配置文件包含了会深深影响 MyBatis 行为的设置和属性信息</li>
<li>能配置的内容如下：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">configuration（配置）</span><br><span class="line">    properties（属性）</span><br><span class="line">    settings（设置）</span><br><span class="line">    typeAliases（类型别名）</span><br><span class="line">    typeHandlers（类型处理器）</span><br><span class="line">    objectFactory（对象工厂）</span><br><span class="line">    plugins（插件）</span><br><span class="line">    environments（环境配置）</span><br><span class="line">        environment（环境变量）</span><br><span class="line">            transactionManager（事务管理器）</span><br><span class="line">            dataSource（数据源）</span><br><span class="line">    databaseIdProvider（数据库厂商标识）</span><br><span class="line">    mappers（映射器）</span><br><span class="line"><span class="comment">&lt;!-- 注意元素节点的顺序！顺序不对会报错 --&gt;</span></span><br></pre></td></tr></table></figure>



<p>可以阅读 mybatis-config.xml 上面的dtd的头文件！</p>
<a id="more"></a>

<h2 id="1-environments元素"><a href="#1-environments元素" class="headerlink" title="1. environments元素"></a>1. environments元素</h2><ul>
<li><p>MyBatis 可以配置成适应多种环境，这种机制有助于将 SQL 映射应用于多种数据库之中</p>
</li>
<li><p><strong>不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。</strong></p>
</li>
<li><p>配置MyBatis的多套运行环境，将SQL映射到多个不同的数据库上，必须指定其中一个为默认运行环境（通过default指定）</p>
</li>
</ul>
<p>标准定义如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"..."</span> <span class="attr">value</span>=<span class="string">"..."</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="子元素节点-事物管理器（transactionManager）"><a href="#子元素节点-事物管理器（transactionManager）" class="headerlink" title="子元素节点 事物管理器（transactionManager）"></a>子元素节点 事物管理器（transactionManager）</h3><p>在 MyBatis 中有两种类型的事务管理器（也就是 type=”[JDBC|MANAGED]”）：</p>
<ul>
<li>JDBC – 这个配置就是直接使用了 JDBC 的提交和回滚设置，它依赖于从数据源得到的连接来管理事务作用域。</li>
<li>MANAGED – 这个配置几乎没做什么。它从来不提交或回滚一个连接，而是让容器来管理事务的整个生命周期（比如 JEE 应用服务器的上下文）。 默认情况下它会关闭连接，然而一些容器并不希望这样，因此需要将 closeConnection 属性设置为 false 来阻止它默认的关闭行为。例如:</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"MANAGED"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"closeConnection"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    <strong>提示</strong>: 如果你正在使用 Spring + MyBatis，则没有必要配置事务管理器， 因为 Spring 模块会使用自带的管理器来覆盖前面的配置。</p>
<ul>
<li>详情：<a href="http://www.mybatis.org/mybatis-3/zh/configuration.html#environments" target="_blank" rel="noopener">点击查看官方文档</a></li>
</ul>
<h3 id="子元素节点-数据源（dataSource）"><a href="#子元素节点-数据源（dataSource）" class="headerlink" title="子元素节点 数据源（dataSource）"></a>子元素节点 <strong>数据源（dataSource）</strong></h3><ul>
<li><p>作用：连接数据库 –&gt;dataSource 元素使用标准的 JDBC 数据源接口来配置 JDBC 连接对象的资源。</p>
</li>
<li><p>有三种内建的数据源类型       <strong>type=”[UNPOOLED|POOLED|JNDI]”）</strong></p>
<ol>
<li><strong>UNPOOLED</strong>– 这个数据源的实现只是每次被请求时打开和关闭连接。虽然有点慢，但对于在数据库连接可用性方面没有太高要求的简单应用程序来说，是一个很好的选择。 不同的数据库在性能方面的表现也是不一样的，对于某些数据库来说，使用连接池并不重要，这个配置就很适合这种情形。UNPOOLED 类型的数据源具有以下属性。</li>
<li><strong>POOLED</strong>– 这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来，避免了创建新的连接实例时所必需的初始化和认证时间。 这是一种使得并发 Web 应用快速响应请求的流行处理方式。<strong>(默认的)</strong></li>
<li><strong>JNDI</strong> – 这个数据源的实现是为了能在如 EJB 或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置一个 JNDI 上下文的引用。这种数据源配置只需要两个属性：</li>
</ol>
</li>
<li><p>数据源也有很多第三方的实现，比如dbcp，c3p0，druid等等….</p>
</li>
</ul>
<h2 id="2-Properties优化"><a href="#2-Properties优化" class="headerlink" title="2.Properties优化"></a>2.Properties优化</h2><p><a href="http://www.mybatis.org/mybatis-3/zh/configuration.html#properties" target="_blank" rel="noopener">官方文档链接</a></p>
<ul>
<li>这些属性都是可外部配置且可动态替换的，既可以在典型的 Java 属性文件中配置，亦可通过 properties 元素的子元素来传递</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"org/mybatis/example/config.properties"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"dev_user"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"F2Fa3!33TYyg"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>如何优化：</p>
<ol>
<li>第一步 ; 在资源目录下新建一个db.properties</li>
</ol>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>第二步 : 将文件properties导入到mybatisconfig.xml 配置文件</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入properties文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"db.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"mapper/UserMapper.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>注意问题：</p>
<ul>
<li>配置文件优先级问题    【properties优先级高】</li>
<li>新特性：使用占位符</li>
</ul>
<h2 id="3-typeAliases优化"><a href="#3-typeAliases优化" class="headerlink" title="3. typeAliases优化"></a>3. typeAliases优化</h2><ul>
<li>作用：类型别名是为 Java 类型设置一个短的名字。它只和 XML 配置有关，存在的意义仅在于用来减少类完全限定名的冗余。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--方式一：--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置别名,注意顺序--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"Author"</span> <span class="attr">type</span>=<span class="string">"domain.blog.Author"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"Blog"</span> <span class="attr">type</span>=<span class="string">"domain.blog.Blog"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"Comment"</span> <span class="attr">type</span>=<span class="string">"domain.blog.Comment"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"Post"</span> <span class="attr">type</span>=<span class="string">"domain.blog.Post"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"Section"</span> <span class="attr">type</span>=<span class="string">"domain.blog.Section"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"Tag"</span> <span class="attr">type</span>=<span class="string">"domain.blog.Tag"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--方式二：--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置别名,注意顺序--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"domain.blog"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>每一个在包 <code>domain.blog</code> 中的 Java Bean</li>
<li>在没有注解的情况下，会使用 Bean 的<strong>首字母小写</strong>的非限定类名来作为它的别名。</li>
<li>比如 <code>domain.blog.Author</code> 的别名为<code>author</code>；</li>
<li>若有注解，则别名为其注解值。见下面的例子：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注解指定别名</span></span><br><span class="line"><span class="meta">@Alias</span>(<span class="string">"author"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Author</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-设置（settings）"><a href="#4-设置（settings）" class="headerlink" title="4. 设置（settings）"></a>4. 设置（settings）</h2><p><a href="http://www.mybatis.org/mybatis-3/zh/configuration.html#settings" target="_blank" rel="noopener">设置（settings）</a></p>
<p><strong>这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。</strong></p>
<ul>
<li>懒加载  （lazyLoadingEnabled）</li>
<li>日志实现  （logImpl）</li>
<li>缓存开启关闭 （cacheEnabled）</li>
</ul>
<p><strong>一个配置完整的 settings 元素的示例如下：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"multipleResultSetsEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"useColumnLabel"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"useGeneratedKeys"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"autoMappingBehavior"</span> <span class="attr">value</span>=<span class="string">"PARTIAL"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"autoMappingUnknownColumnBehavior"</span> <span class="attr">value</span>=<span class="string">"WARNING"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"defaultExecutorType"</span> <span class="attr">value</span>=<span class="string">"SIMPLE"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"defaultStatementTimeout"</span> <span class="attr">value</span>=<span class="string">"25"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"defaultFetchSize"</span> <span class="attr">value</span>=<span class="string">"100"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"safeRowBoundsEnabled"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"localCacheScope"</span> <span class="attr">value</span>=<span class="string">"SESSION"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"jdbcTypeForNull"</span> <span class="attr">value</span>=<span class="string">"OTHER"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadTriggerMethods"</span> <span class="attr">value</span>=<span class="string">"equals,clone,hashCode,toString"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="5-映射器（mappers）"><a href="#5-映射器（mappers）" class="headerlink" title="5. 映射器（mappers）"></a>5. 映射器（mappers）</h2><ul>
<li>映射器 : 定义映射SQL语句文件</li>
<li>首先我们需要告诉 MyBatis 到哪里去找到这些语句。 Java 在自动查找这方面没有提供一个很好的方法，所以最佳的方式是告诉 MyBatis 到哪里去找映射文件。</li>
<li>完全限定资源定位符</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 方式一 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用相对于类路径的资源引用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"org/mybatis/builder/AuthorMapper.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"org/mybatis/builder/BlogMapper.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"org/mybatis/builder/PostMapper.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 方式二 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用映射器接口实现类的完全限定类名</span></span><br><span class="line"><span class="comment">	需要配置文件名称和接口名称一致，并且位于同一目录下 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"org.mybatis.builder.AuthorMapper"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"org.mybatis.builder.BlogMapper"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"org.mybatis.builder.PostMapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 方式三 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 将包内的映射器接口实现全部注册为映射器</span></span><br><span class="line"><span class="comment">但是需要配置文件名称和接口名称一致，并且位于同一目录下 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"org.mybatis.builder"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis-ResultMap</title>
    <url>/2019/07/10/Mybatis/MyBatis-ResultMap/</url>
    <content><![CDATA[<h1 id="MyBatis-ResultMap"><a href="#MyBatis-ResultMap" class="headerlink" title="MyBatis ResultMap"></a>MyBatis ResultMap</h1><h2 id="ResultMap"><a href="#ResultMap" class="headerlink" title="ResultMap"></a>ResultMap</h2><p>实际：<strong>要解决的问题：属性名和字段名不一致</strong></p>
<p>环境：新建一个项目，将之前的项目拷贝过来</p>
<h3 id="查询为null问题"><a href="#查询为null问题" class="headerlink" title="查询为null问题"></a>查询为null问题</h3><ol>
<li><p>查看之前数据库的字段名</p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200213112852.png" alt=""></p>
</li>
</ol>
<a id="more"></a>

<ol start="2">
<li>java实体类的设计</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;  <span class="comment">//id</span></span><br><span class="line">    <span class="keyword">private</span> String name;   <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">private</span> String password;   <span class="comment">//密码和数据库不一样！</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//构造</span></span><br><span class="line">    <span class="comment">//set/get</span></span><br><span class="line">    <span class="comment">//toString()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ol start="3">
<li>接口</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据id查询用户</span></span><br><span class="line"><span class="function">User <span class="title">selectUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure>



<ol start="4">
<li>mapper映射文件</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserById"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    select * from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<ol start="5">
<li>测试</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectUserById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession session = MybatisUtils.getSession();  <span class="comment">//获取SqlSession连接</span></span><br><span class="line">    UserMapper mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    User user = mapper.selectUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>结果:</strong></p>
<p><code>User{id=1, name=&#39;zhuuu&#39;, password=&#39;null&#39;}</code></p>
<p><strong>查询出来的password为空，说明出现了问题</strong></p>
<p><strong>分析：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">id</span> = $&#123;<span class="keyword">id</span>&#125;   </span><br><span class="line">可以看作</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,<span class="keyword">name</span>,pwd <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">id</span> = $&#123;<span class="keyword">id</span>&#125;</span><br></pre></td></tr></table></figure>



<p><strong>根本原因</strong></p>
<ul>
<li>mybatis会根据这些查询的列名(会将列名转化为小写,数据库不区分大小写) , 去对应的实体类中查找相应列名的set方法设值 , 由于找不到setPwd() , 所以password返回null ; 【自动映射】</li>
</ul>
<h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#方案一:从数据库层面解决  为列名设置别名，别名和java实体类的属性名一致</span><br><span class="line">&lt;select id&#x3D;&quot;selectUserById&quot; resultType&#x3D;&quot;User&quot;&gt;</span><br><span class="line">    select id,name,pwd as password from user where id &#x3D; $&#123;&#125;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>



<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># 方案二：使用结果集映射-&gt;ResultMap 【推荐】</span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"UserMap"</span> <span class="attr">type</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- id为主键 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- column是数据库表的列名 , property是对应实体类的属性名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"pwd"</span> <span class="attr">property</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserById"</span> <span class="attr">resultMap</span>=<span class="string">"UserMap"</span>&gt;</span></span><br><span class="line">    select id , name , pwd from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="ResultMap性质"><a href="#ResultMap性质" class="headerlink" title="ResultMap性质"></a>ResultMap性质</h2><h3 id="自动映射"><a href="#自动映射" class="headerlink" title="自动映射"></a>自动映射</h3><ul>
<li><code>resultMap</code> 元素是 MyBatis 中最重要最强大的元素。它可以让你从 90% 的 JDBC <code>ResultSets</code>数据提取代码中解放出来。</li>
<li>实际上，在为一些比如连接的复杂语句编写映射代码的时候，一份 <code>resultMap</code> 能够代替实现同等功能的长达数千行的代码。</li>
<li>ResultMap 的设计思想是，对于简单的语句根本不需要配置显式的结果映射，而对于复杂一点的语句只需要描述它们的关系就行了。</li>
</ul>
<p><strong>你已经见过简单映射语句的示例了，但并没有显式指定 <code>resultMap</code>。比如：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserById"</span> <span class="attr">resultType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">    select id , name , pwd </span><br><span class="line">    from user </span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>上述语句只是简单地将所有的列映射到 <code>HashMap</code> 的键上，这由 <code>resultType</code> 属性指定。虽然在大部分情况下都够用，但是 HashMap 不是一个很好的模型。你的程序更可能会使用 JavaBean 或 POJO（Plain Old Java Objects，普通老式 Java 对象）作为模型。</p>
</li>
<li><p><code>ResultMap</code> 最优秀的地方在于，虽然你已经对它相当了解了，但是根本就不需要显式地用到他们。</p>
</li>
</ul>
<h3 id="手动映射"><a href="#手动映射" class="headerlink" title="手动映射"></a>手动映射</h3><ol>
<li>返回值类型为resultMap</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserById"</span> <span class="attr">resultMap</span>=<span class="string">"UserMap"</span>&gt;</span></span><br><span class="line">select id , name , pwd from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>编写resultMap，实现手动映射！</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"UserMap"</span> <span class="attr">type</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- id为主键 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- column是数据库表的列名 , property是对应实体类的属性名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"pwd"</span> <span class="attr">property</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p> <strong>如果世界总是这么简单就好了。但是肯定不是的，数据库中，存在一对多，多对一的情况，我们之后会使用到一些高级的结果集映射，association，collection这些</strong></p>
]]></content>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis CRUD操作</title>
    <url>/2019/07/09/Mybatis/MyBatis-CRUD%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="MyBatis-CRUD操作"><a href="#MyBatis-CRUD操作" class="headerlink" title="MyBatis CRUD操作"></a>MyBatis CRUD操作</h1><h2 id="关于namespace"><a href="#关于namespace" class="headerlink" title="关于namespace"></a>关于namespace</h2><p><strong>配置文件中namespace中的名称为对应Mapper接口或者Dao接口的完整包名,必须一致</strong></p>
<h2 id="查询-select"><a href="#查询-select" class="headerlink" title="查询 select"></a>查询 select</h2><p>id</p>
<ul>
<li>命名空间中唯一的标识符</li>
<li>接口中的<strong>方法名</strong>与映射文件中的SQL语句ID 一一对应</li>
</ul>
<p>resultType</p>
<ul>
<li>SQL语句返回值类型。【完整的类名或者别名】</li>
</ul>
<p>parameterType</p>
<ul>
<li>传入SQL语句的参数类型 。【Map】</li>
</ul>
<a id="more"></a>



<p><strong>需求：根据id查询用户</strong></p>
<ol>
<li>在UserMapper中添加对应方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查询全部用户</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">selectUser</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//根据id查询用户</span></span><br><span class="line">    <span class="function">User <span class="title">selectUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在UserMapper.xml中添加Select语句</li>
</ol>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">"selectUserById"</span> resultType=<span class="string">"com.zhuuu.pojo.User"</span>&gt;</span><br><span class="line">  select * from user where id = #&#123;id&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>测试类中测试</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tsetSelectUserById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession session = MybatisUtils.getSession();  <span class="comment">//获取SqlSession连接</span></span><br><span class="line">    UserMapper mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    User user = mapper.selectUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>思路二：根据 密码 和 名字 查询用户</p>
<p><strong>使用map来查询或者插入</strong></p>
<ol>
<li>在接口方法中，参数直接传递Map；</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">User selectUserByNP2(Map<span class="tag">&lt;<span class="name">String,Object</span>&gt;</span> map);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>编写sql语句的时候，需要传递参数类型，参数类型为map</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserByNP2"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultType</span>=<span class="string">"com.zhuuu.pojo.User"</span>&gt;</span></span><br><span class="line">select * from user where name = #&#123;username&#125; and pwd = #&#123;pwd&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>在使用方法的时候，Map的 key 为 sql中取的值即可，没有顺序要求！</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">map.put(<span class="string">"username"</span>,<span class="string">"小明"</span>);</span><br><span class="line">map.put(<span class="string">"pwd"</span>,<span class="string">"123456"</span>);</span><br><span class="line">User user = mapper.selectUserByNP2(map);</span><br></pre></td></tr></table></figure>

<p>总结：</p>
<p> 如果参数过多，我们可以考虑直接使用Map实现，如果参数比较少，直接传递参数即可</p>
<h2 id="插入-insert"><a href="#插入-insert" class="headerlink" title="插入 insert"></a>插入 insert</h2><p>一般使用insert标签进行插入操作，它的配置和select标签差不多！</p>
<ol>
<li>在UserMapper接口中添加对应的方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加一个用户</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在UserMapper.xml中添加insert语句</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addUser"</span> <span class="attr">parameterType</span>=<span class="string">"com.zhuuu.pojo.User"</span>&gt;</span></span><br><span class="line">     insert into user (id,name,pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>测试</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAddUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession session = MybatisUtils.getSession();</span><br><span class="line">    UserMapper mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    User user = <span class="keyword">new</span> User(<span class="number">5</span>,<span class="string">"王五"</span>,<span class="string">"zxcvbn"</span>);</span><br><span class="line">    <span class="keyword">int</span> i = mapper.addUser(user);</span><br><span class="line">    System.out.println(i);</span><br><span class="line">    session.commit(); <span class="comment">//提交事务,重点!不写的话不会提交到数据库</span></span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意点：增、删、改操作需要提交事务！</strong></p>
<h2 id="改-update"><a href="#改-update" class="headerlink" title="改 update"></a>改 update</h2><p><strong>需求：修改用户的信息</strong></p>
<ol>
<li>同理，编写接口方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改一个用户</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>编写对应的配置文件SQL</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUser"</span> <span class="attr">parameterType</span>=<span class="string">"com.zhuuu.pojo.User"</span>&gt;</span></span><br><span class="line">    update user set name=#&#123;name&#125;,pwd=#&#123;pwd&#125; where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>测试</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testUpdateUser() &#123;</span><br><span class="line">    SqlSession session = MybatisUtils.getSession();</span><br><span class="line">    UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">    User user = mapper.selectUserById(1);</span><br><span class="line">    user.setPwd("asdfgh");</span><br><span class="line">    int i = mapper.updateUser(user);</span><br><span class="line">    System.out.println(i);</span><br><span class="line">    session.commit(); //提交事务,重点!不写的话不会提交到数据库</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="删除-delete"><a href="#删除-delete" class="headerlink" title="删除 delete"></a>删除 delete</h2><p><strong>需求：根据id删除一个用户</strong></p>
<ol>
<li>同理，编写接口方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据id删除用户</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>编写对应的配置文件SQL</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteUser"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">    delete from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>测试</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession session = MybatisUtils.getSession();</span><br><span class="line">    UserMapper mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="keyword">int</span> i = mapper.deleteUser(<span class="number">5</span>);</span><br><span class="line">    System.out.println(i);</span><br><span class="line">    session.commit(); <span class="comment">//提交事务,重点!不写的话不会提交到数据库</span></span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>小结：</strong></p>
<ul>
<li>所有的增删改操作都需要提交事务！</li>
<li>接口所有的普通参数，尽量都写上@Param参数，尤其是多个参数时，必须写上！</li>
<li>有时候根据业务的需求，可以考虑使用map传递参数！</li>
<li>为了规范操作，在SQL的配置文件中，我们尽量将Parameter参数和resultType都写上！</li>
</ul>
<h2 id="补充：模糊查询"><a href="#补充：模糊查询" class="headerlink" title="补充：模糊查询"></a>补充：模糊查询</h2><p><strong>模糊查询like语句该怎么写?</strong></p>
<ol>
<li>添加java代码</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模糊查询</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getLikeUser</span><span class="params">(String value)</span></span>;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在xml中添加查询</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getLikeUser"</span> <span class="attr">resultType</span>=<span class="string">"com.zhuuu.pojo.User"</span>&gt;</span></span><br><span class="line">    select * from mybatis.user where name like #&#123;value&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>测试</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getLikeUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession session = MybatisUtils.getSession();</span><br><span class="line">    Mapper mapper = session.getMapper(Mapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    System.out.println(mapper.getLikeUser(<span class="string">"%李%"</span>));</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>注意：在sql语句中拼接通配符，会引起sql注入</strong></p>
]]></content>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis-介绍</title>
    <url>/2019/07/08/Mybatis/MyBatis-IDEA/</url>
    <content><![CDATA[<h1 id="MyBatis-IDEA"><a href="#MyBatis-IDEA" class="headerlink" title="MyBatis IDEA"></a>MyBatis IDEA</h1><h2 id="Mybatis简介"><a href="#Mybatis简介" class="headerlink" title="Mybatis简介"></a>Mybatis简介</h2><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200208170945.png" alt=""></p>
<p>环境说明：</p>
<ul>
<li><p>jdk 8 +</p>
</li>
<li><p>MySQL 5.7.19</p>
</li>
<li><p>maven-3.6.0</p>
</li>
<li><p>IDEA</p>
</li>
</ul>
<p> 学习前需要掌握：</p>
<ul>
<li>JDBC</li>
<li>MySQL</li>
<li>Java 基础</li>
<li>Maven</li>
<li>Junit</li>
</ul>
<p><a href="https://mybatis.org/mybatis-3/" target="_blank" rel="noopener">MyBatis官方文档</a></p>
<p><a href="https://github.com/mybatis/mybatis-3" target="_blank" rel="noopener">Github官网</a></p>
<a id="more"></a>

<h3 id="什么是-MyBatis？"><a href="#什么是-MyBatis？" class="headerlink" title="什么是 MyBatis？"></a>什么是 MyBatis？</h3><ol>
<li>MyBatis 是一款优秀的<strong>持久层框架</strong>，它支持定制化 SQL、存储过程以及高级映射。</li>
<li>MyBatis 避免了几乎所有的<strong>JDBC 代码</strong>和<strong>手动设置参数以及获取结果集</strong></li>
<li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生类型、接口和 Java 的 POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</li>
</ol>
<h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><h4 id="持久化是将程序数据在持久状态和瞬时状态间转换的机制。"><a href="#持久化是将程序数据在持久状态和瞬时状态间转换的机制。" class="headerlink" title="持久化是将程序数据在持久状态和瞬时状态间转换的机制。"></a>持久化是将程序数据在持久状态和瞬时状态间转换的机制。</h4><ol>
<li>把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）。持久化的的主要应用是将内存中的对象存储在数据库中，或者存储在磁盘文件中，xml数据文件中等等。</li>
<li>JDBC就是一种持久化机制，文件IO也是一种持久化机制</li>
<li>在生活中：将鲜肉冷藏，吃的时候再解冻的方法就类似与持久化</li>
</ol>
<h4 id="为什么需要持久化服务？"><a href="#为什么需要持久化服务？" class="headerlink" title="为什么需要持久化服务？"></a>为什么需要持久化服务？</h4><ol>
<li>是因为内存本身的缺陷引起的</li>
<li>内存断电后数据会丢失，但有一些对象是无论如何都不能丢失的，比如银行账号等，遗憾的是，人们还无法保证内存永不掉电。</li>
<li>内存过于昂贵，与硬盘、光盘等外存相比，内存的价格要高2~3个数量级，而且维持成本也高，至少需要一直供电吧。所以即使对象不需要永久保存，也会因为内存的容量限制不能一直呆在内存中，需要持久化来缓存到外存。</li>
</ol>
<h3 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h3><h4 id="什么是持久层？"><a href="#什么是持久层？" class="headerlink" title="什么是持久层？"></a>什么是持久层？</h4><ol>
<li>完成持久化工作的代码块—-&gt; dao层 【DAO (Data Access Object) 数据访问对象】</li>
<li>大多数情况下特别是企业级应用，数据持久化往往也就意味着将内存中的数据保存到磁盘上加以固化，而持久化的实现过程则大多通过各种<strong>关系数据库</strong>来完成。</li>
<li>不过这里有一个字需要特别强调，也就是所谓的“层”。对于应用系统而言，数据持久功能大多是必不可少的组成部分。也就是说，我们的系统中，已经天然的具备了“持久层”概念？也许是，但也许实际情况并非如此。之所以要独立出一个“持久层”的概念,而不是“持久模块”，“持久单元”，也就意味着，我们的系统架构中，应该有一个相对独立的逻辑层面，专著于数据持久化逻辑的实现.</li>
<li>与系统其他部分相对而言，这个层面应该具有一个较为清晰和严格的逻辑边界。 【说白了就是用来操作数据库存在的！】</li>
</ol>
<h3 id="为什么需要Mybatis？"><a href="#为什么需要Mybatis？" class="headerlink" title="为什么需要Mybatis？"></a>为什么需要Mybatis？</h3><ol>
<li>MyBatis就是帮助程序猿将数据存入数据库中，和从数据库中取数据</li>
<li>传统的JDBC操作，有很多重复的代码块，比如：数据取出时的封装，数据库的建立连接等等…,通过框架可以减少重复代码，提高开发的效率</li>
<li>MyBatis 是一个半自动化的<strong>ORM框架 (Object Relationship Mapping) –&gt;对象关系映射</strong></li>
<li>所有的事情，不用Mybatis依旧可以做到，只是用了它，所有实现会更加简单！<strong>技术没有高低之分，只有使用这个技术的人有高低之别</strong></li>
</ol>
<h4 id="MyBatis的优点"><a href="#MyBatis的优点" class="headerlink" title="MyBatis的优点"></a>MyBatis的优点</h4><ol>
<li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件就可以了，易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li>
<li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li>
<li>解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li>
<li>提供xml标签，支持编写动态sql。</li>
<li>………</li>
</ol>
<h4 id=""><a href="#" class="headerlink" title=""></a></h4><ul>
<li>最重要的一点，使用的人多！公司需要！</li>
</ul>
<h2 id="MyBatis的-第一个程序"><a href="#MyBatis的-第一个程序" class="headerlink" title="MyBatis的 第一个程序"></a>MyBatis的 第一个程序</h2><h4 id="思路流程：搭建环境–-gt-导入Mybatis—-gt-编写代码—-gt-测试"><a href="#思路流程：搭建环境–-gt-导入Mybatis—-gt-编写代码—-gt-测试" class="headerlink" title="思路流程：搭建环境–&gt;导入Mybatis—&gt;编写代码—&gt;测试"></a><strong>思路流程：搭建环境–&gt;导入Mybatis—&gt;编写代码—&gt;测试</strong></h4><h4 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h4><ol>
<li><p>搭建实验数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE &#96;mybatis&#96;;</span><br><span class="line"></span><br><span class="line">USE &#96;mybatis&#96;;</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS &#96;user&#96;;</span><br><span class="line"></span><br><span class="line">CREATE TABLE &#96;user&#96; (</span><br><span class="line">  &#96;id&#96; int(20) NOT NULL,</span><br><span class="line">  &#96;name&#96; varchar(30) DEFAULT NULL,</span><br><span class="line">  &#96;pwd&#96; varchar(30) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line">insert  into &#96;user&#96;(&#96;id&#96;,&#96;name&#96;,&#96;pwd&#96;) values (1,&#39;zhuuu&#39;,&#39;123456&#39;),(2,&#39;张三&#39;,&#39;abcdef&#39;),(3,&#39;李四&#39;,&#39;987654&#39;);</span><br></pre></td></tr></table></figure>

<p><strong>注意事项：如果IDEA连接到数据库失败</strong></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200211095659.png" alt=""></p>
<p>解决方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatis?useUnicode&#x3D;true&amp;characterEncoding&#x3D;UTF-8&amp;useJDBCCompliantTimezoneShift&#x3D;true&amp;useLegacyDatetimeCode&#x3D;false&amp;serverTimezone&#x3D;UTC</span><br></pre></td></tr></table></figure>

<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200211095827.png" alt=""></p>
</li>
</ol>
<ol start="2">
<li>导入Mybatis相关的jar包</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<ol start="3">
<li><p>编写MyBatis核心配置文件</p>
<p>可以查看官方帮助文档</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/zhuuu/dao/userMapper.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>



<ol start="4">
<li><p>编写Mybatis工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String resource = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">            InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取SqlSession连接</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="5">
<li><p>创建实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;  <span class="comment">//id</span></span><br><span class="line">    <span class="keyword">private</span> String name;   <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">private</span> String pwd;   <span class="comment">//密码</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//构造,有参,无参</span></span><br><span class="line">    <span class="comment">//set/get</span></span><br><span class="line">    <span class="comment">//toString()</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="6">
<li><p>编写Mapper接口类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.kuang.pojo.User;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">selectUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="7">
<li>编写Mapper.xml配置文件</li>
</ol>
<ul>
<li><p>namespace 十分重要，不能写错！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.zhuuu.dao.UserMapper"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUser"</span> <span class="attr">resultType</span>=<span class="string">"com.zhuuu.pojo.User"</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<ol start="8">
<li><p>编写测试类</p>
<p>Junit 包测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SqlSession session = MybatisUtils.getSession();</span><br><span class="line">        <span class="comment">//方法一:</span></span><br><span class="line">        <span class="comment">//List&lt;User&gt; users = session.selectList("com.kuang.mapper.UserMapper.selectUser");</span></span><br><span class="line">        <span class="comment">//方法二:</span></span><br><span class="line">        UserMapper mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        List&lt;User&gt; users = mapper.selectUser();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (User user: users)&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行测试</p>
</li>
</ol>
<h3 id="问题说明"><a href="#问题说明" class="headerlink" title="问题说明"></a>问题说明</h3><p><strong>可能出现问题说明：Maven静态资源过滤问题</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode-033</title>
    <url>/2019/06/15/Leetcode/Leetcode-033/</url>
    <content><![CDATA[<h1 id="Leecode-033-Search-in-Rotated-Sorted-Array"><a href="#Leecode-033-Search-in-Rotated-Sorted-Array" class="headerlink" title="Leecode-033 [Search in Rotated Sorted Array]"></a>Leecode-033 [<strong>Search in Rotated Sorted Array</strong>]</h1><h2 id="思路：二分法查找"><a href="#思路：二分法查找" class="headerlink" title="思路：二分法查找"></a>思路：二分法查找</h2><p><strong>Solution：binary search</strong></p>
<ul>
<li><p>需要的参数</p>
<ul>
<li>start 初始化为0</li>
<li>end  初始化为length-1</li>
<li>mid  初始化为start + (end-start)/2</li>
</ul>
</li>
<li><p>分以下三种情况进行查找</p>
<ul>
<li>第一种情况：target = mid</li>
</ul>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200217214041.png" alt=""></p>
<a id="more"></a>

<ul>
<li>第二种情况    num[start] &lt; nums[mid]</li>
</ul>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200217214618.png" alt=""></p>
<ol>
<li>如果nums[start] &lt;= target 并且 nums[mid&gt;=target]  那么说明 target在start和mid之间，就把mid 复制给end</li>
<li>如果num[mid] 在 nums[start] 和 target之间  那么就把mid 赋值给 start</li>
</ol>
<ul>
<li>第三种情况 nums[mid] &lt; nums[end] &lt; nums[start]</li>
</ul>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200217214901.png" alt=""></p>
</li>
</ul>
<ol>
<li>如果  target 在 mid 和 end之间 ，那么就把mid赋值给start</li>
<li>如果 target 小于mid, 那么就把mid赋值给end</li>
</ol>
<ul>
<li>最后判断 start 和 end 是不是本来就等于target</li>
</ul>
<!--more-->



<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p>*<em>Solution *</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> end = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(start + <span class="number">1</span> &lt; end)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = start + (end - start)/<span class="number">2</span>; <span class="comment">//为了防止overflow的问题</span></span><br><span class="line">            <span class="keyword">if</span>(nums[mid] == target) <span class="keyword">return</span> mid;</span><br><span class="line">            <span class="keyword">if</span>(nums[start] &lt; nums[mid])&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[start]&lt;=target &amp;&amp; target&lt;= nums[mid]) end = mid;</span><br><span class="line">                <span class="keyword">else</span> start = mid</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[end] &gt; nums[mid])&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[end] &gt;= target &amp;&amp; target&gt;= nums[mid]) start = mid;</span><br><span class="line">                <span class="keyword">else</span> end = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(nums[start] == target) <span class="keyword">return</span> start;</span><br><span class="line">        <span class="keyword">if</span>(nums[end]   == target) <span class="keyword">return</span> end;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p>*<em>Solution *</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums <span class="keyword">or</span> len(nums) == <span class="number">0</span>: <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        start = <span class="number">0</span></span><br><span class="line">        end = len(nums) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> start + <span class="number">1</span> &lt; end:</span><br><span class="line">            mid = start + (end - start)//<span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] == target:</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            <span class="keyword">elif</span> nums[start] &lt; nums[mid]:</span><br><span class="line">                <span class="keyword">if</span> nums[start] &lt;= target <span class="keyword">and</span> nums[mid]&gt;= target:</span><br><span class="line">                    end = mid</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    start = mid</span><br><span class="line">            <span class="keyword">elif</span> nums[mid] &lt; nums[end]:</span><br><span class="line">                <span class="keyword">if</span> nums[end] &gt;= target <span class="keyword">and</span> nums[mid] &lt;= target:</span><br><span class="line">                    start = mid</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    end = mid</span><br><span class="line">        <span class="keyword">if</span> nums[start] == target: <span class="keyword">return</span> start</span><br><span class="line">        <span class="keyword">if</span> nums[end]   == target: <span class="keyword">return</span>  end;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode-032</title>
    <url>/2019/06/12/Leetcode/Leetcode-032/</url>
    <content><![CDATA[<h1 id="Leecode-032-Longest-Valid-Parentheses"><a href="#Leecode-032-Longest-Valid-Parentheses" class="headerlink" title="Leecode-032 [Longest Valid Parentheses]"></a>Leecode-032 [Longest Valid Parentheses]</h1><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p><strong>Solution：stack</strong></p>
<ul>
<li>leftmost:  指定最左侧的边界–&gt;初始值为-1</li>
<li>stack：初始为空</li>
<li>idx:     每个括号的索引</li>
<li>原则：遇到正括号就push,反括号就pop</li>
<li>max:   计算最大长度（反括号的index减去最上层的正括号的index）<ul>
<li>[如果遇到反括号，pop之后stack为空，那么长度 = 当前idx - leftmost]</li>
<li>[如果遇到反括号，pop之前stack为空，那么leftmost = 当前 idx, 长度就是当前idx-leftmost]</li>
</ul>
</li>
</ul>
<a id="more"></a>



<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p><strong>Solution：stack</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestValidParentheses</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s == <span class="keyword">null</span> || s.length() &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = s.length();</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> leftmost = -<span class="number">1</span>;</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(i) == <span class="string">'('</span>)&#123; <span class="comment">//遇到正括号就push</span></span><br><span class="line">                stack.push(i);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123; <span class="comment">//if  反括号就pop</span></span><br><span class="line">                <span class="keyword">if</span>(stack.isEmpty())&#123; <span class="comment">//当前stack为空，更新leftmost</span></span><br><span class="line">                    leftmost = i;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">int</span> j = stack.pop(); <span class="comment">//pop出正括号的index</span></span><br><span class="line">                    <span class="keyword">if</span>(stack.isEmpty()) max = Math.max(max,i-leftmost); <span class="comment">//pop出来之后为空</span></span><br><span class="line">                    <span class="keyword">else</span> max = Math.max(max,i-stack.peek()); <span class="comment">//pop出来之后不为空</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p><strong>Solution :同思路python版本</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestValidParentheses</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> s: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        n = len(s)</span><br><span class="line">        max_Parentheses = <span class="number">0</span></span><br><span class="line">        leftmost = <span class="number">-1</span></span><br><span class="line">        stack = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">if</span> s[i] == <span class="string">'('</span>:</span><br><span class="line">                stack.append(i)</span><br><span class="line">            <span class="keyword">else</span>: <span class="comment">#if )</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> stack:</span><br><span class="line">                    leftmost = i</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    j = stack.pop()</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> stack: max_Parentheses = max(max_Parentheses,i-leftmost)</span><br><span class="line">                    <span class="keyword">else</span>: max_Parentheses = max(max_Parentheses,i-stack[<span class="number">-1</span>])</span><br><span class="line">        <span class="keyword">return</span> max_Parentheses</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode-082</title>
    <url>/2019/06/12/Leetcode/Leetcode-082/</url>
    <content><![CDATA[<h1 id="Leecode-082-Remove-Duplicates-from-Sorted-List-II"><a href="#Leecode-082-Remove-Duplicates-from-Sorted-List-II" class="headerlink" title="Leecode-082 Remove Duplicates from Sorted List II"></a>Leecode-082 <a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list-ii/" target="_blank" rel="noopener">Remove Duplicates from Sorted List II</a></h1><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p><strong>题目描述</strong></p>
<ul>
<li>本题是83题目的升级版本</li>
<li>给出一个链表，如果重复就直接把所有重复的元素都去掉，只保留没有重复的元素</li>
</ul>
<p><strong>Solution：一次遍历</strong></p>
<ul>
<li><p>需要的参数</p>
<ul>
<li>dummynode(注意这个节点不能初始化时候就跟后面连起来)</li>
<li>preNode  前一个节点</li>
<li>currNode 当前指向的节点</li>
<li>realNode  记录不重复的节点（初始化为dummy）</li>
</ul>
</li>
<li><p>步骤</p>
<ul>
<li>如果currNode的值跟前一个节点preNode不一样并且和下一个节点next的值不一样。那么realNode就记录下当前节点的位置</li>
<li>同时需要考虑preNode为dummy 还有 currentNode.next最后为空的情况</li>
</ul>
</li>
</ul>
<a id="more"></a>

<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p><strong>Solution :</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplicates</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        ListNode dummy     = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode preNode   = dummy;</span><br><span class="line">        ListNode currNode  = head;</span><br><span class="line">        ListNode realNode  = dummy;</span><br><span class="line">        <span class="keyword">while</span>(currNode != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>((preNode == dummy || currNode.val != preNode.val) &amp;&amp; (currNode.next == <span class="keyword">null</span> || currNode.val != currNode.next.val))&#123;</span><br><span class="line">                realNode.next = currNode;</span><br><span class="line">                realNode = currNode;</span><br><span class="line">            &#125;</span><br><span class="line">            preNode = currNode;</span><br><span class="line">            currNode = currNode.next;</span><br><span class="line">            preNode.next = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p><strong>Solution :</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deleteDuplicates</span><span class="params">(self, head: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head: <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        dummy    = ListNode(<span class="number">0</span>)</span><br><span class="line">        preNode  = dummy</span><br><span class="line">        realNode = dummy</span><br><span class="line">        currNode = head</span><br><span class="line">        <span class="keyword">while</span> currNode:</span><br><span class="line">            <span class="keyword">if</span> (preNode == dummy <span class="keyword">or</span> currNode.val != preNode.val) <span class="keyword">and</span> (currNode.next == <span class="literal">None</span> <span class="keyword">or</span> currNode.next.val != currNode.val):</span><br><span class="line">                realNode.next = currNode</span><br><span class="line">                realNode = currNode</span><br><span class="line">            preNode  = currNode</span><br><span class="line">            currNode = currNode.next</span><br><span class="line">            preNode.next = <span class="literal">None</span>   <span class="comment">#这里必要把preNode 和 currNode断开链接</span></span><br><span class="line">        <span class="keyword">return</span> dummy.next</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode-141</title>
    <url>/2019/06/12/Leetcode/Leetcode-141/</url>
    <content><![CDATA[<h1 id="Leecode-141-Linked-List-Cycle"><a href="#Leecode-141-Linked-List-Cycle" class="headerlink" title="Leecode-141 Linked List Cycle"></a>Leecode-141 <a href="https://leetcode-cn.com/problems/linked-list-cycle/" target="_blank" rel="noopener">Linked List Cycle</a></h1><h2 id="思路：快慢指针"><a href="#思路：快慢指针" class="headerlink" title="思路：快慢指针"></a>思路：快慢指针</h2><p><strong>题目描述</strong>:</p>
<p><strong>判断链表有没有环</strong></p>
<p><strong>Solution：</strong></p>
<ul>
<li>使用双指针，一个指针每次移动一个节点，一个指针每次移动两个节点，如果存在环，那么这两个指针一定会相遇。</li>
</ul>
<a id="more"></a>



<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p><strong>Solution :</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode l1 = head,l2 = head.next;</span><br><span class="line">        <span class="keyword">while</span>(l1 != <span class="keyword">null</span> &amp; l2 !=<span class="keyword">null</span> &amp;&amp; l2.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (l1 == l2) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            l1 = l1.next;</span><br><span class="line">            l2 = l2.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200310194816.png" alt=""></p>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p><strong>Solution :</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasCycle</span><span class="params">(self, head: ListNode)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        l1 = head</span><br><span class="line">        l2 = head.next</span><br><span class="line">        <span class="keyword">while</span> l1 <span class="keyword">and</span> l2 <span class="keyword">and</span> l2.next:</span><br><span class="line">            <span class="keyword">if</span> l1 == l2:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            l1 = l1.next</span><br><span class="line">            l2 = l2.next.next</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>Leetcode</tag>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode-524</title>
    <url>/2019/06/12/Leetcode/Leetcode-524/</url>
    <content><![CDATA[<h1 id="Leecode-524-Longest-Word-in-Dictionary-through-Deleting"><a href="#Leecode-524-Longest-Word-in-Dictionary-through-Deleting" class="headerlink" title="Leecode-524 Longest Word in Dictionary through Deleting"></a>Leecode-524 <a href="https://leetcode-cn.com/problems/longest-word-in-dictionary-through-deleting/" target="_blank" rel="noopener">Longest Word in Dictionary through Deleting</a></h1><h2 id="思路：双指针"><a href="#思路：双指针" class="headerlink" title="思路：双指针"></a>思路：双指针</h2><p><strong>题目描述：</strong></p>
<p>给定一个字符串和一个字符串字典，找到字典里面最长的字符串，该字符串可以通过删除给定字符串的某些字符来得到。如果答案不止一个，返回长度最长且字典顺序最小的字符串。如果答案不存在，则返回空字符串。</p>
<p>示例1：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入:</span><br><span class="line">s &#x3D; &quot;abpcplea&quot;, d &#x3D; [&quot;ale&quot;,&quot;apple&quot;,&quot;monkey&quot;,&quot;plea&quot;]</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;apple&quot;</span><br></pre></td></tr></table></figure>



<p>示例2：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入:</span><br><span class="line">s &#x3D; &quot;abpcplea&quot;, d &#x3D; [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;a&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">所有输入的字符串只包含小写字母。</span><br><span class="line">字典的大小不会超过 1000。</span><br><span class="line">所有输入的字符串长度不会超过 1000。</span><br></pre></td></tr></table></figure>

<p><strong>Solution：</strong></p>
<ul>
<li>题目中“字符串可以通过删除给定字符串的某些字符来得到” ==== 这句话的意思是：找的这个是给定字符串的子串，相同字符串的顺序相等。</li>
<li>“如果答案不止一个，返回长度最长且字典顺序最小的字符串” ====这个话的意思是如果找到的字符串长度相等，那么需要比较字典顺序，用CompareTo()方法</li>
<li>考虑先对字符串进行条件判断.先排除不符合条件的，接下来对符合条件的字符串进行比对:</li>
<li>采用双指针：遍历给定字符串，因为找的是自己，与字典中的字符串一个个比，如果相等，他两的下标都加一，在判断字典中的字符串是否和下标相等了，如果相等，则证明找到了。</li>
</ul>
<a id="more"></a>



<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p><strong>Solution :</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findLongestWord</span><span class="params">(String s, List&lt;String&gt; d)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] sc = s.toCharArray();</span><br><span class="line">        String result = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span>(String ds : d)&#123;</span><br><span class="line">            <span class="comment">// 先对长度进行判断,(如果小于结果字符串,不用比了 || (如果相等 &amp;&amp; 字典顺序小 也不用比了))</span></span><br><span class="line">            <span class="keyword">if</span>(result.length() &gt; ds.length() || (result.length() == ds.length() &amp;&amp; result.compareTo(ds) &lt; <span class="number">0</span>))&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(isSubStr(sc,ds))&#123;</span><br><span class="line">                result = ds;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSubStr</span><span class="params">(<span class="keyword">char</span>[] sc,String ds)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 字典字符串下标</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span>[] dsc = ds.toCharArray();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> s : sc)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s == dsc[i])&#123;</span><br><span class="line">                i ++;</span><br><span class="line">                <span class="comment">// 如果下标和长度相等,就证明找到了</span></span><br><span class="line">                <span class="keyword">if</span>(i == dsc.length)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 这还找不到,就证明失败了</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>













<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p><strong>Solution :</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>Leetcode</tag>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode-023</title>
    <url>/2019/05/25/Leetcode/Leetcode-023/</url>
    <content><![CDATA[<h1 id="Leecode-023-Merge-k-Sorted-Lists"><a href="#Leecode-023-Merge-k-Sorted-Lists" class="headerlink" title="Leecode-023 Merge k Sorted Lists"></a>Leecode-023 <a href="https://leetcode-cn.com/problems/merge-k-sorted-lists/" target="_blank" rel="noopener">Merge k Sorted Lists</a></h1><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p><strong>Solution：堆</strong></p>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p><strong>Solution : 利用Comparator接口和PriorityQueue</strong></p>
<ul>
<li>需要的参数：<ul>
<li>一个NodeComparator比较node.val的大小</li>
<li>一个dummy node 初始为空节点</li>
<li>一个current node 指向dummy</li>
<li>一个PriorityQueue最小堆队列</li>
</ul>
</li>
<li>步骤：<ul>
<li>首先构造NodeComparator比较node.val的大小</li>
<li>一个current node 指向dummy</li>
<li>遍历k个list中每一个的头结点，如果头结点不为空，都把它放进PriorityQueue形成一个最小堆</li>
<li>如果PriorityQueue不为空，取出其中最小的节点（pqueue.poll()），current指向取出的节点，current向后移动一位; 同时如果取出后这个node的next不为空，那么把next丢进PriorityQueue中</li>
<li>返回dummy.next</li>
</ul>
</li>
</ul>
<a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Definition for singly-linked list.</span></span><br><span class="line"><span class="comment">pubulic class ListNode&#123;</span></span><br><span class="line"><span class="comment">	int val;</span></span><br><span class="line"><span class="comment">	ListNode Next;</span></span><br><span class="line"><span class="comment">	ListNode(int x)&#123;val = x;&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">NodeComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">ListNode</span>&gt;</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(ListNode a, ListNode b)</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a.val - b.val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeKLists</span><span class="params">(ListNode[] lists)</span></span>&#123;</span><br><span class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(lists == <span class="keyword">null</span> || lists.length == <span class="number">0</span>) <span class="keyword">return</span> dummy.next;</span><br><span class="line">        <span class="keyword">int</span> size = lists.length;</span><br><span class="line">        ListNode current = dummy;</span><br><span class="line">        NodeComparator cmp = <span class="keyword">new</span> NodeComparator();</span><br><span class="line">        PriorityQueue&lt;ListNode&gt; pqueue = <span class="keyword">new</span> PriorityQueue(cmp);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; size;i++)&#123; </span><br><span class="line">            <span class="comment">//遍历k个list中每一个的头结点，都把它放进PriorityQueue形成一个最小堆</span></span><br><span class="line">            <span class="keyword">if</span>(lists[i] != <span class="keyword">null</span>) pqueue.add(lists[i]);</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">while</span>(pqueue.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">            ListNode node = pqueue.poll(); <span class="comment">//取出其中最小的节点</span></span><br><span class="line">            current.next = node; <span class="comment">//current指向取出的节点</span></span><br><span class="line">            current = current.next; <span class="comment">//current向后移动一位</span></span><br><span class="line">            <span class="comment">//同时如果取出后这个node的next不为空，那么把next丢进PriorityQueue中</span></span><br><span class="line">            <span class="keyword">if</span>(node.next!=<span class="keyword">null</span>) pqueue.add(node.next);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="补充知识"><a href="#补充知识" class="headerlink" title="补充知识"></a>补充知识</h4><p><strong>Comparator</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Comparator</span>&lt;<span class="title">T</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>1.比较功能，对一些对象的集合施加了一个整体排序 。 可以将比较器传递给排序方法（如Collections.sort或Arrays.sort ），以便对排序顺序进行精确控制。 比较器还可以用来控制某些数据结构（如顺序sorted sets或sorted maps ），或对于不具有对象的集合提供的排序natural ordering 。<br>2.通过比较c上的一组元素S的确定的顺序对被认为是与equals一致当且仅当c.compare(e1, e2)==0具有用于S每e1和e2相同布尔值e1.equals(e2)。<br>3.一般是在比较器例如: Collections.sort(List<T> list, Comparator&lt;? super T&gt; c) ，Arrays.sort(T[] a, Comparator&lt;? super T&gt; c)根据指定的比较器引起的顺序对指定的列表进行排序。 在Comparator比较器中重写int compare(T o1, T o2) 如果遇到数字的比较，直接在方法内返回两个对象的属性的差值，例如o1.getValue()-o2.getValue() 是升序，o2.getValue()-o1.getValue() 是降序；如果遇到字符形式的比较利用compareTo(T o) 方法进行比较，该方法比较从头开始每一个字符，当前者大于后者返回1，当前者小于后者返回-1。</p>
<p><strong>代码举例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        List&lt;Node&gt; list = <span class="keyword">new</span> ArrayList&lt;Node&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> Node(<span class="string">"yguo"</span>,<span class="number">25</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Node(<span class="string">"msdfj"</span>,<span class="number">22</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Node(<span class="string">"skf"</span>,<span class="number">20</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Node(<span class="string">"sfe"</span>,<span class="number">23</span>));</span><br><span class="line">        System.out.println(<span class="string">"===Age排序==="</span>);</span><br><span class="line">        Collections.sort(list, <span class="keyword">new</span> Comparator&lt;Node&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Node o1, Node o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> o1.getAge()-o2.getAge();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Iterator&lt;Node&gt; it = list.iterator(); it.hasNext();)&#123;</span><br><span class="line">            System.out.println(it.next());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"===Name排序===="</span>);</span><br><span class="line">        Collections.sort(list, <span class="keyword">new</span> Comparator&lt;Node&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Node o1, Node o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> o1.getName().compareTo(o2.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span>(Iterator&lt;Node&gt; it = list.iterator(); it.hasNext();)&#123;</span><br><span class="line">            System.out.println(it.next());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"===Age排序==="</span>);</span><br><span class="line">        Collections.sort(list);</span><br><span class="line">        <span class="keyword">for</span>(Iterator&lt;Node&gt; it = list.iterator(); it.hasNext();)&#123;</span><br><span class="line">            System.out.println(it.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Node</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(String name, <span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Node other)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(age &gt; other.getAge())</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(age &lt; other.getAge())</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Name "</span>+name+<span class="string">" age "</span>+age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//输出：</span></span><br><span class="line">===Age排序===</span><br><span class="line">Name skf age <span class="number">20</span></span><br><span class="line">Name msdfj age <span class="number">22</span></span><br><span class="line">Name sfe age <span class="number">23</span></span><br><span class="line">Name yguo age <span class="number">25</span></span><br><span class="line">===Name排序====</span><br><span class="line">Name msdfj age <span class="number">22</span></span><br><span class="line">Name sfe age <span class="number">23</span></span><br><span class="line">Name skf age <span class="number">20</span></span><br><span class="line">Name yguo age <span class="number">25</span></span><br><span class="line">===Age排序===</span><br><span class="line">Name yguo age <span class="number">25</span></span><br><span class="line">Name sfe age <span class="number">23</span></span><br><span class="line">Name msdfj age <span class="number">22</span></span><br><span class="line">Name skf age <span class="number">20</span></span><br></pre></td></tr></table></figure>





<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p><strong>Solution :heapq堆</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeKLists</span><span class="params">(self, lists: List[ListNode])</span> -&gt; ListNode:</span></span><br><span class="line">        <span class="keyword">import</span> heapq</span><br><span class="line">        dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        p = dummy</span><br><span class="line">        head = []</span><br><span class="line">        <span class="comment">#遍历k个list中每一个的头结点，如果头结点不为空，都把它放进PriorityQueue形成一个最小堆</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(lists)):</span><br><span class="line">            <span class="keyword">if</span> lists[i]:</span><br><span class="line">                heapq.heappush(head,(lists[i].val,i))</span><br><span class="line">                lists[i] = lists[i].next</span><br><span class="line">        <span class="comment">#如果PriorityQueue不为空，取出其中最小的节点</span></span><br><span class="line">        <span class="keyword">while</span> head:</span><br><span class="line">            val,idx = heapq.heappop(head)</span><br><span class="line">            p.next = ListNode(val)</span><br><span class="line">            p = p.next</span><br><span class="line">            <span class="keyword">if</span> lists[idx]:</span><br><span class="line">                heapq.heappush(head,(lists[idx].val,idx))</span><br><span class="line">                lists[idx] = lists[idx].next</span><br><span class="line">        <span class="keyword">return</span> dummy.next</span><br></pre></td></tr></table></figure>

<h3 id="补充知识-1"><a href="#补充知识-1" class="headerlink" title="补充知识"></a>补充知识</h3><h4 id="python高级（堆heapq模块）"><a href="#python高级（堆heapq模块）" class="headerlink" title="python高级（堆heapq模块）"></a>python高级（堆heapq模块）</h4><ol>
<li>一种著名的数据结构是堆（heap），它是一种优先队列。</li>
<li>优先队列让你能够以任意顺序添加对象，并随时（可能是在两次添加对象之间）找出（并删除）最小的元素。相比于列表方法min，这样做的效率要高得多。</li>
<li>实际上，Python没有独立的堆类型，而只有一个包含一些堆操作函数的模块。这个模块名为heapq（其中的q表示队列），它包含6个函数，其中前4个与堆操作直接相关。必须使用列表来表示堆对象本身。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">                              模块heapq中一些重要的函数</span><br><span class="line">                                                       函 数                                                           描 述</span><br><span class="line">                                                      heappush(heap, x)                                        将x压入堆中</span><br><span class="line">                                                        heappop(heap)                                      从堆中弹出最小的元素</span><br><span class="line">                                                        heapify(heap)                                         让列表具备堆特征</span><br><span class="line">                                                  heapreplace(heap, x)                                     弹出最小的元素，并将x压入堆中</span><br><span class="line">                                                      nlargest(n, iter)                                     返回iter中n个最大的元素</span><br><span class="line">                                                        nsmallest(n, iter)                                   返回iter中n个最小的元素</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode-021</title>
    <url>/2019/05/25/Leetcode/Leetcode-021/</url>
    <content><![CDATA[<h1 id="Leecode-021-Merge-Two-Sorted-Lists"><a href="#Leecode-021-Merge-Two-Sorted-Lists" class="headerlink" title="Leecode-021 [Merge Two Sorted Lists]"></a>Leecode-021 [Merge Two Sorted Lists]</h1><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p><strong>Solution：遍历，判断链表值的大小</strong></p>
<ul>
<li>需要的参数：<ul>
<li>l1指向第一个链表</li>
<li>l2指向第二个链表</li>
<li>curr节点，dummy节点 （初始化为空节点）</li>
</ul>
</li>
<li>步骤：<ul>
<li>首先把curr节点指向dummy</li>
<li>如果l1和l2节点不为空的情况下<ul>
<li>如果l1的值比l2小，那么curr指向l1, 并且l1向后移一位</li>
<li>如果l1的值比l2大,   那么curr指向l2, 并且l2向后移一位</li>
<li>curr再向后移动一位</li>
</ul>
</li>
<li>如果l1或者l2出现一个为空了，那么 curr就指向不为空的那个</li>
</ul>
</li>
</ul>
<a id="more"></a>

<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p><strong>Solution：判断链表值的大小</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode curr  = dummy;</span><br><span class="line">        <span class="keyword">while</span>(l1 != <span class="keyword">null</span> &amp;&amp; l2 != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(l1.val &lt; l2.val)&#123;</span><br><span class="line">                curr.next = l1;</span><br><span class="line">                l1 = l1.next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                curr.next = l2;</span><br><span class="line">                l2 = l2.next;</span><br><span class="line">            &#125;</span><br><span class="line">            curr = curr.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(l1 == <span class="keyword">null</span>) curr.next = l2;</span><br><span class="line">        <span class="keyword">if</span>(l2 == <span class="keyword">null</span>) curr.next = l1;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p><strong>Solution : 判断链表值的大小</strong></p>
<ul>
<li>需要的参数：<ul>
<li>l1指向第一个链表</li>
<li>l2指向第二个链表</li>
<li>curr节点，dummy节点 （初始化为空节点）</li>
</ul>
</li>
<li>步骤：<ul>
<li>首先把curr节点指向dummy</li>
<li>如果l1和l2节点不为空的情况下<ul>
<li>如果l1的值比l2小，那么curr指向l1, 并且l1向后移一位</li>
<li>如果l1的值比l2大,   那么curr指向l2, 并且l2向后移一位</li>
<li>curr再向后移动一位</li>
</ul>
</li>
<li>如果l1或者l2出现一个为空了，那么 curr就指向不为空的那个</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span><span class="params">(self, l1: ListNode, l2: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        curr = dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">while</span> l1 <span class="keyword">and</span> l2:</span><br><span class="line">            <span class="keyword">if</span> l1.val &lt; l2.val:</span><br><span class="line">                curr.next=l1</span><br><span class="line">                l1=l1.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                curr.next=l2</span><br><span class="line">                l2=l2.next</span><br><span class="line">            curr=curr.next</span><br><span class="line">        curr.next =l1 <span class="keyword">or</span> l2</span><br><span class="line">        <span class="keyword">return</span> dummy.next</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode-003</title>
    <url>/2019/05/15/Leetcode/Leetcode-003/</url>
    <content><![CDATA[<h1 id="Leecode-003-Longest-Substring-Without-Repeating-Characters"><a href="#Leecode-003-Longest-Substring-Without-Repeating-Characters" class="headerlink" title="Leecode-003 [Longest Substring Without Repeating Characters]"></a>Leecode-003 [Longest Substring Without Repeating Characters]</h1><h2 id="思路：快慢指针"><a href="#思路：快慢指针" class="headerlink" title="思路：快慢指针"></a>思路：快慢指针</h2><p><strong>Solution：快慢指针</strong></p>
<ul>
<li>需要的参数：<ul>
<li>left指针：初始化为0</li>
<li>right指针： 初始化为0</li>
<li>boolean[128]： 长度的数组，代表ASCII的字符集</li>
<li>max ： 最大值，初始化为0</li>
</ul>
</li>
</ul>
<a id="more"></a>

<ul>
<li>步骤：<ul>
<li>right 右指针先遍历到第一个重复的字符</li>
<li>如果遍历到重复的字符,先计算一次长度，同时如果left&lt;right并且左右指针对应的字符不一样的话，把left指针对应的字符剔除boolean数组,同时left向前移动一位，就这样while循环一直剔除left到right和left相同为止</li>
<li>第二层while循环结束后，right和left同时向前移动一位</li>
<li>最后再计算一次结尾处的长度</li>
</ul>
</li>
</ul>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p><strong>Solution :</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>,right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = s.length();</span><br><span class="line">        <span class="keyword">boolean</span>[] used = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">128</span>];</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(right &lt; n)&#123; <span class="comment">//右指针先遍历到第一个重复的字符</span></span><br><span class="line">            <span class="keyword">if</span> (used[s.charAt(right)] == <span class="keyword">false</span>)&#123;</span><br><span class="line">                used[s.charAt(right)] = <span class="keyword">true</span>;</span><br><span class="line">                right ++;</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123; <span class="comment">//如果遍历到了重复的字符</span></span><br><span class="line">                max = Math.max(max,right-left);</span><br><span class="line">                <span class="keyword">while</span>(left &lt; right &amp;&amp; s.charAt(right) != s.charAt(left))&#123;</span><br><span class="line">                    <span class="comment">//这样while循环一直剔除left到right和left相同为止</span></span><br><span class="line">                    used[s.charAt(left)] = <span class="keyword">false</span> ; <span class="comment">//把left指针对应的字符剔除boolean数组</span></span><br><span class="line">                    left ++ ;</span><br><span class="line">                &#125; <span class="comment">//第二层while循环结束后，right和left同时向前移动一位</span></span><br><span class="line">                left ++;</span><br><span class="line">                right ++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        max = Math.max(max,right - left); <span class="comment">//最后再计算一次结尾处的长度</span></span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p><strong>Solution :字典</strong></p>
<ul>
<li>需要的参数<ul>
<li>一个空字典：d   (来记录s字符串中所有的位置)</li>
<li>初始位置： start</li>
<li>最大长度： ans</li>
</ul>
</li>
<li>步骤：<ul>
<li>首先判断当前字符在字典中有没有存在</li>
<li>如果不存在：往字典d中添加当前i,c的记录  同时计算长度为当前索引-初始索引+1</li>
<li>如果之前存在过：那么改变start的位置，也就是把当前start的剔除掉，移动到start的下一位</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">        d = &#123;&#125;</span><br><span class="line">        start = <span class="number">0</span></span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i,c <span class="keyword">in</span> enumerate(s):</span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">in</span> d: <span class="comment">#首先判断当前字符在字典中有没有存在</span></span><br><span class="line">                <span class="comment"># 如果之前存在过：那么改变start的位置，也就是把当前start的剔除掉，移动到start的下一位</span></span><br><span class="line">                start = max(start,d[c] + <span class="number">1</span>) </span><br><span class="line">            d[c] = i <span class="comment">#如果不存在：往字典d中添加当前i,c的记录  </span></span><br><span class="line">            ans = max(ans,i-start+<span class="number">1</span>) <span class="comment">#同时计算长度为当前索引-初始索引+1</span></span><br><span class="line">        <span class="keyword">return</span> ans <span class="comment">#遍历完字符串，返回最后的长度</span></span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode-001</title>
    <url>/2019/05/12/Leetcode/Leetcode-001/</url>
    <content><![CDATA[<h1 id="Leecode-001-Two-Sum"><a href="#Leecode-001-Two-Sum" class="headerlink" title="Leecode-001 [Two Sum]"></a>Leecode-001 [Two Sum]</h1><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p><strong>Solution 1：暴力法</strong></p>
<ul>
<li>使用两层循环，外层循环计算当前元素与 target之间的差值，内层循环寻找该差值，若找到该差值，则返回两个元素的下标。</li>
<li>时间复杂度O(n^2)</li>
</ul>
<p><strong>Solution 2:  利用HashMap减少查询时间</strong></p>
<ul>
<li>使用一层循环，每遍历到一个元素就计算该元素与 target 之间的差值</li>
<li>然后到 HashMapHashMap 中寻找该差值</li>
<li>如果找到，则返回两个元素在数组 nums的下标</li>
<li>如果没有找到，则将当前元素存入 HashMap 中 (Key: nums[i], Value: i)</li>
</ul>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200316214800.png" alt=""></p>
<a id="more"></a>



<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p><a href="https://github.com/Zhuuuuuuuu/Leetcodes/blob/master/java/001__Two%20sum" target="_blank" rel="noopener">Java版本地址</a></p>
<p><strong>Solution 1：暴力法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> dif = target - nums[i];</span><br><span class="line">            <span class="comment">// j = i + 1 的目的是减少重复计算和避免两个元素下标相同</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[j] == dif)&#123;</span><br><span class="line">                    res[<span class="number">0</span>] = i;</span><br><span class="line">                    res[<span class="number">1</span>] = j;</span><br><span class="line">                    <span class="keyword">return</span> res;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Solution 2:  利用HashMap减少查询时间</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">int</span> [] res  = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];  <span class="comment">//创建一个res数组长度为2</span></span><br><span class="line">        <span class="keyword">if</span>(nums == <span class="keyword">null</span> || nums.length &lt;= <span class="number">1</span>) <span class="keyword">return</span> res;</span><br><span class="line">        HashMap&lt;Integer,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Integer,Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> num = nums[i]; <span class="comment">//先拿到当前这个数</span></span><br><span class="line">            <span class="keyword">int</span> val = target - num; <span class="comment">//另外一个数值是target-当前这个数</span></span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(val))&#123; <span class="comment">//如果找到这个数</span></span><br><span class="line">                res[<span class="number">0</span>] = i; <span class="comment">//返回第一个索引</span></span><br><span class="line">                res[<span class="number">1</span>] = map.get(val); <span class="comment">//返回第二个索引</span></span><br><span class="line">                <span class="keyword">return</span> res; <span class="comment">//返回结果</span></span><br><span class="line">            &#125;<span class="keyword">else</span> map.put(num,i); <span class="comment">//没有找到就把当前数字放进hashmap中</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p><a href="https://github.com/Zhuuuuuuuu/Leetcodes/tree/master/python3" target="_blank" rel="noopener">Python版本地址</a></p>
<p><strong>Solution :利用字典</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums, target)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        q=&#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            a = target -nums[x]</span><br><span class="line">            <span class="keyword">if</span> nums[x] <span class="keyword">in</span> q:</span><br><span class="line">                <span class="keyword">return</span> q[nums[x]],x</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                q[a] = x</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>Leetcode</tag>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库的三大范式</title>
    <url>/2019/02/25/Mysql/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%B8%89%E5%A4%A7%E8%8C%83%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="数据库的三大范式"><a href="#数据库的三大范式" class="headerlink" title="数据库的三大范式"></a>数据库的三大范式</h1><h2 id="1-第一范式（1NF）"><a href="#1-第一范式（1NF）" class="headerlink" title="1. 第一范式（1NF）"></a>1. 第一范式（1NF）</h2><p><strong>原子性：保持每一列不可再分</strong></p>
<p>例如：</p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200227215659.png" alt=""></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200227215741.png" alt=""></p>
<a id="more"></a>

<h2 id="2-第二范式（2NF）"><a href="#2-第二范式（2NF）" class="headerlink" title="2. 第二范式（2NF）"></a>2. 第二范式（2NF）</h2><p>前提：满足第一范式</p>
<p><strong>每张表只能描述一件事情</strong></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200227215828.png" alt=""></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200227215848.png" alt=""></p>
<h2 id="3-第三范式（3NF）"><a href="#3-第三范式（3NF）" class="headerlink" title="3. 第三范式（3NF）"></a>3. 第三范式（3NF）</h2><p>前提：满足第一范式和第二范式</p>
<p><strong>第三范式：需要确保数据表中的每一列数据都和主键直接相关，而不能间接相关</strong></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200227215904.png" alt=""></p>
<p>上表中，所有属性都完全依赖于学号，所以满足第二范式，但是“班主任性别”和“班主任年龄”直接依赖的是“班主任姓名”，</p>
<p>而不是主键“学号”，所以需做如下调整：</p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200227215942.png" alt=""></p>
<h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p><strong>阿里规范：关联查询的表不得超过三张</strong></p>
<ul>
<li>考虑商业化的需求和目标，数据库的性能更加重要</li>
<li>故意给某些表增加一些冗余的字段（从多表查询直接变成单表查询）</li>
<li>故意增加一些计算列（select count – &gt; 直接设置一个计算列统计总的count【从大数据量降低为小数据量的查询】【索引】）</li>
</ul>
]]></content>
      <tags>
        <tag>Mysql</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql 备份</title>
    <url>/2019/02/24/Mysql/Mysql%E5%A4%87%E4%BB%BD/</url>
    <content><![CDATA[<h1 id="Mysql-备份"><a href="#Mysql-备份" class="headerlink" title="Mysql 备份"></a>Mysql 备份</h1><h2 id="1-数据库备份必要性"><a href="#1-数据库备份必要性" class="headerlink" title="1. 数据库备份必要性"></a>1. 数据库备份必要性</h2><ul>
<li>保证重要数据不丢失</li>
<li>数据转移</li>
</ul>
<h2 id="2-Mysql数据库备份的方法"><a href="#2-Mysql数据库备份的方法" class="headerlink" title="2. Mysql数据库备份的方法"></a>2. Mysql数据库备份的方法</h2><ul>
<li>mysqldump备份工具</li>
<li>数据库管理工具 ： sqlyog,navicat</li>
<li>直接拷贝数据库文件和相关配置文件</li>
</ul>
<h3 id="2-1-数据库mysqldump"><a href="#2-1-数据库mysqldump" class="headerlink" title="2.1 数据库mysqldump"></a>2.1 数据库mysqldump</h3><p>作用</p>
<ul>
<li>转移数据库</li>
<li>搜集数据库进行备份</li>
<li>将是数据转移到另一个SQL服务器，不一定是MySQL服务器</li>
</ul>
<p>语法：（cmd中执行下面语句）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqldump -h 主机名 -u 用户名 -p 密码 数据库名 表1 表2 &gt; path/filename.sql</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 导出</span><br><span class="line">1. 导出一张表</span><br><span class="line">	mysqldump -u用户名 -p密码 库名 表名 &gt; path&#x2F;filename.sql</span><br><span class="line">2. 导出多张表</span><br><span class="line">　　mysqldump -u用户名 -p密码 库名 表1 表2 表3 &gt; 文件名(D:&#x2F;a.sql)</span><br><span class="line">3. 导出所有表</span><br><span class="line">　　mysqldump -u用户名 -p密码 库名 &gt; 文件名(D:&#x2F;a.sql)</span><br><span class="line">4. 导出一个库 </span><br><span class="line">　　mysqldump -u用户名 -p密码 -B 库名 &gt; 文件名(D:&#x2F;a.sql)</span><br><span class="line">　　</span><br><span class="line">-- 导入</span><br><span class="line">1. 在登录mysql的情况下：</span><br><span class="line">	source 备份文件</span><br><span class="line">2. 在不登陆的情况下：</span><br><span class="line">	mysql -u用户名 -p密码 库名 &lt; 备份文件</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql 视图</title>
    <url>/2019/02/21/Mysql/Mysql%E8%A7%86%E5%9B%BE/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql 索引</title>
    <url>/2019/02/21/Mysql/Mysql%E7%B4%A2%E5%BC%95/</url>
    <content><![CDATA[<h1 id="Mysql-索引"><a href="#Mysql-索引" class="headerlink" title="Mysql 索引"></a>Mysql 索引</h1><h2 id="1-索引的作用"><a href="#1-索引的作用" class="headerlink" title="1. 索引的作用"></a>1. 索引的作用</h2><ul>
<li>提高查询的速度</li>
<li>确保数据的唯一性</li>
<li>可以加速表和表之间的连接，实现表与表之间的参照完整性</li>
<li>使用分组和排序子句进行数据检索时，可以显著减少分组和排序的时间</li>
<li>全文检索字段进行搜索优化</li>
</ul>
<a id="more"></a>

<p>分类：</p>
<ul>
<li>主键索引（Primary Key）</li>
<li>唯一索引（Unique）</li>
<li>常规索引（Index）</li>
<li>全文索引（FullText）</li>
</ul>
<h3 id="1-主键索引"><a href="#1-主键索引" class="headerlink" title="1. 主键索引"></a>1. 主键索引</h3><p>作用：避免同一个表中某数据列中的值重复</p>
<p>特点：</p>
<ul>
<li><p>最常见的索引类型</p>
</li>
<li><p>确保数据记录的唯一性</p>
</li>
<li><p>确定特定数据记录在数据库中的位置</p>
</li>
</ul>
<h3 id="2-唯一索引"><a href="#2-唯一索引" class="headerlink" title="2. 唯一索引"></a>2. 唯一索引</h3><p>作用：避免同一个表中某数据列中的值重复</p>
<p>与主键索引的区别：</p>
<ul>
<li>主键索引只能有一个</li>
<li>唯一索引可能有多个</li>
</ul>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200226221533.png" alt=""></p>
<h3 id="3-常规索引"><a href="#3-常规索引" class="headerlink" title="3. 常规索引"></a>3. 常规索引</h3><p>作用：快速定位特定数据</p>
<p>注意：</p>
<ul>
<li>index 和 key关键字都可以设置为常规索引</li>
<li>应加载查询找条件的字段</li>
<li>不宜添加太多常规索引，影像数据的插入，删除和修改操作</li>
</ul>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200226221647.png" alt=""></p>
<h3 id="4-全文索引"><a href="#4-全文索引" class="headerlink" title="4. 全文索引"></a>4. 全文索引</h3><p>作用：快速定位特定数据</p>
<p>注意：</p>
<ul>
<li>只能用于CHAR , VARCHAR , TEXT数据列类型</li>
<li>适合大型数据集</li>
</ul>
<h2 id="2-创建和删除索引"><a href="#2-创建和删除索引" class="headerlink" title="2. 创建和删除索引"></a>2. 创建和删除索引</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">#方法一：创建表时</span><br><span class="line">    　　CREATE TABLE 表名 (</span><br><span class="line">                字段名1  数据类型 [完整性约束条件…],</span><br><span class="line">                字段名2  数据类型 [完整性约束条件…],</span><br><span class="line">                [UNIQUE | FULLTEXT | SPATIAL ]   INDEX | KEY</span><br><span class="line">                [索引名]  (字段名[(长度)]  [ASC |DESC]) </span><br><span class="line">                );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#方法二：CREATE在已存在的表上创建索引</span><br><span class="line">        CREATE  [UNIQUE | FULLTEXT | SPATIAL ]  INDEX  索引名 </span><br><span class="line">                     ON 表名 (字段名[(长度)]  [ASC |DESC]) ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#方法三：ALTER TABLE在已存在的表上创建索引</span><br><span class="line">        ALTER TABLE 表名 ADD  [UNIQUE | FULLTEXT | SPATIAL ] INDEX</span><br><span class="line">                             索引名 (字段名[(长度)]  [ASC |DESC]) ;</span><br><span class="line">                             </span><br><span class="line">                             </span><br><span class="line">#删除索引：DROP INDEX 索引名 ON 表名字;</span><br><span class="line">#删除主键索引: ALTER TABLE 表名 DROP PRIMARY KEY;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#显示索引信息: SHOW INDEX FROM student;</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;*增加全文索引*&#x2F;</span><br><span class="line">ALTER TABLE &#96;school&#96;.&#96;student&#96; ADD FULLTEXT INDEX &#96;studentname&#96; (&#96;StudentName&#96;); </span><br><span class="line"></span><br><span class="line">&#x2F;*EXPLAIN : 分析SQL语句执行性能*&#x2F;</span><br><span class="line">EXPLAIN SELECT * FROM student WHERE studentno&#x3D;&#39;1000&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;*使用全文索引*&#x2F;</span><br><span class="line">EXPLAIN SELECT *FROM student WHERE MATCH(studentname) AGAINST(&#39;love&#39;);</span><br></pre></td></tr></table></figure>

<h2 id="3-索引的两大类型hash和btree"><a href="#3-索引的两大类型hash和btree" class="headerlink" title="3. 索引的两大类型hash和btree"></a>3. 索引的两大类型hash和btree</h2><p>我们可以在创建上述索引的时候，为其指定索引的类型，分为两类：</p>
<ul>
<li>hash类型的索引：查询单条快，范围查询慢</li>
<li>Btree类型的索引：b+树，层数越多，数据量指数级增长（Innodb默认支持）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#不同的存储引擎支持的索引类型也不一样</span><br><span class="line">InnoDB 支持事务，支持行级别锁定，支持 B-tree、Full-text 等索引，不支持 Hash 索引；</span><br><span class="line">MyISAM 不支持事务，支持表级别锁定，支持 B-tree、Full-text 等索引，不支持 Hash 索引；</span><br><span class="line">Memory 不支持事务，支持表级别锁定，支持 B-tree、Hash 等索引，不支持 Full-text 索引；</span><br><span class="line">NDB 支持事务，支持行级别锁定，支持 Hash 索引，不支持 B-tree、Full-text 等索引；</span><br><span class="line">Archive 不支持事务，支持表级别锁定，不支持 B-tree、Hash、Full-text 等索引；</span><br></pre></td></tr></table></figure>

<h2 id="4-索引的原则"><a href="#4-索引的原则" class="headerlink" title="4. 索引的原则"></a>4. 索引的原则</h2><ul>
<li>索引不是越多越好</li>
<li>不要对经常变动的数据加索引</li>
<li>小数据量的表不建议加索引</li>
<li>索引一般应该加载查找条件的字段上</li>
</ul>
]]></content>
      <tags>
        <tag>Mysql</tag>
        <tag>索引</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql 事务</title>
    <url>/2019/02/19/Mysql/Mysql%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[<h1 id="Mysql-事务"><a href="#Mysql-事务" class="headerlink" title="Mysql 事务"></a>Mysql 事务</h1><h2 id="Mysql-事务-1"><a href="#Mysql-事务-1" class="headerlink" title="Mysql 事务"></a>Mysql 事务</h2><p><strong>事务：==要么都成功，要么都失败==</strong></p>
<p>举例： </p>
<ol>
<li>SQL执行  A给B转账</li>
<li>SQL执行  B收到A的钱</li>
</ol>
<h3 id="1-核心-：要么都成功，要么都失败"><a href="#1-核心-：要么都成功，要么都失败" class="headerlink" title="1. 核心 ：要么都成功，要么都失败"></a>1. 核心 ：要么都成功，要么都失败</h3><ul>
<li>将一组SQL放在同一个批次去执行</li>
<li>如果一个SQL语句出错,则该批次内的所有SQL都将被取消执行</li>
<li>MySQL事务处理只支持InnoDB和BDB数据表类型</li>
</ul>
<a id="more"></a>

<h3 id="2-事务的原则：ACID原则"><a href="#2-事务的原则：ACID原则" class="headerlink" title="2. 事务的原则：ACID原则"></a>2. 事务的原则：ACID原则</h3><p>参考博客（<a href="https://blog.csdn.net/dengjili/article/details/82468576）" target="_blank" rel="noopener">https://blog.csdn.net/dengjili/article/details/82468576）</a></p>
<ul>
<li>原子性：（Atomicity）</li>
</ul>
<p><strong>要么都成功，要么都失败</strong></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200225113920.png" alt=""></p>
<p>这个过程包含两个步骤</p>
<p>A： 800 - 200 = 600<br> B:   200 + 200 = 400</p>
<ul>
<li>一致性：  (Consistency)</li>
</ul>
<p><strong>事务前后的数据完整性要保持一致</strong></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200225113942.png" alt=""></p>
<p>操作前A：800，B：200<br>操作后A：600，B：400</p>
<p>一致性表示事务完成后，符合逻辑运算</p>
<ul>
<li>持久性 : （Durability）</li>
</ul>
<p><strong>事务一旦提交则不可逆，被持久化到数据库中</strong></p>
<p>操作前A：800，B：200<br>操作后A：600，B：400<br>如果在操作前（事务还没有提交）服务器宕机或者断电，那么重启数据库以后，数据状态应该为<br>A：800，B：200<br>如果在操作后（事务已经提交）服务器宕机或者断电，那么重启数据库以后，数据状态应该为<br>A：600，B：400</p>
<ul>
<li>隔离性 （Isolaiton）</li>
</ul>
<p><strong>事务的隔离性是多个用户并发访问数据库时，数据库为每一个用户开启的事务，不能被其他用户访问，事务之间需要相互隔离</strong></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200225114142.png" alt=""></p>
<h3 id="3-隔离性所导致的一些问题"><a href="#3-隔离性所导致的一些问题" class="headerlink" title="3. 隔离性所导致的一些问题"></a>3. 隔离性所导致的一些问题</h3><h4 id="1-脏读"><a href="#1-脏读" class="headerlink" title="1. 脏读"></a>1. 脏读</h4><ul>
<li>一个事务读取了另一个事务未提交的数据</li>
</ul>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200225114310.png" alt=""></p>
<h4 id="2-不可重复读"><a href="#2-不可重复读" class="headerlink" title="2. 不可重复读"></a>2. 不可重复读</h4><ul>
<li>在一个事务中读取表中的某一行数据，多次读取的数据不同。（这不一定是错误，只是场景不同）</li>
</ul>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200225114329.png" alt=""></p>
<h4 id="3-虚读（幻读）"><a href="#3-虚读（幻读）" class="headerlink" title="3. 虚读（幻读）"></a>3. 虚读（幻读）</h4><ul>
<li>是指在一个事务中读取到了别的事务插入的数据，导致前后读取不一致。</li>
</ul>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200225114350.png" alt=""></p>
<h3 id="4-Mysql事务实现办法"><a href="#4-Mysql事务实现办法" class="headerlink" title="4. Mysql事务实现办法"></a>4. Mysql事务实现办法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 使用set语句来改变自动提交模式</span><br><span class="line">Set autocommit &#x3D; 0  #关闭事务</span><br><span class="line">Set autocommit &#x3D; 1  #开启事务</span><br><span class="line"></span><br><span class="line">-- 注意：</span><br><span class="line">1.Mysql中默认是自动提交事务</span><br><span class="line">2.使用事务时应该先关闭后自动提交</span><br><span class="line"></span><br><span class="line">-- 步骤</span><br><span class="line">-- 1.开启一个事务，标记事务的起始点</span><br><span class="line">Start Transaction;</span><br><span class="line"></span><br><span class="line">-- 2.提交一个事务给数据库</span><br><span class="line">commit;</span><br><span class="line"></span><br><span class="line">-- 3. 将事务混滚，数据回到本次事务的初始状态</span><br><span class="line">Rollback;</span><br><span class="line"></span><br><span class="line">-- 4 .还原mysql数据库的自动提交</span><br><span class="line">Set autocommit &#x3D; 1;</span><br><span class="line"></span><br><span class="line">-- 5. 保存点</span><br><span class="line">Savepoint  保存点名称   -- 设置一个事务的保存点</span><br><span class="line">Rollback to savepoint 保存点名称  -- 回滚到保存点名称</span><br><span class="line">Release  Savepoint  保存点名称   -- 删除保存点</span><br></pre></td></tr></table></figure>

<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200225151950.png" alt=""></p>
<h4 id="4-1示例联系"><a href="#4-1示例联系" class="headerlink" title="4.1示例联系"></a>4.1示例联系</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">课堂测试题目</span><br><span class="line"></span><br><span class="line">A在线买一款价格为500元商品,网上银行转账.</span><br><span class="line">A的银行卡余额为2000,然后给商家B支付500.</span><br><span class="line">商家B一开始的银行卡余额为10000</span><br><span class="line"></span><br><span class="line">创建数据库shop和创建表account并插入2条数据</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">CREATE DATABASE &#96;shop&#96;CHARACTER SET utf8 COLLATE utf8_general_ci; </span><br><span class="line">USE &#96;shop&#96;; </span><br><span class="line"></span><br><span class="line">CREATE TABLE &#96;account&#96; (</span><br><span class="line">  &#96;id&#96; INT(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;name&#96; VARCHAR(32) NOT NULL,</span><br><span class="line">  &#96;cash&#96; DECIMAL(9,2) NOT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8</span><br><span class="line"></span><br><span class="line">INSERT INTO account (&#96;name&#96;,&#96;cash&#96;)</span><br><span class="line">VALUES(&#39;A&#39;,2000.00),(&#39;B&#39;,10000.00)</span><br><span class="line"></span><br><span class="line"># 转账实现</span><br><span class="line">SET autocommit &#x3D; 0;</span><br><span class="line">START TRANSACTION;</span><br><span class="line">UPDATE account SET cash&#x3D;cash-500 WHERE &#96;name&#96;&#x3D;&#39;A&#39;;</span><br><span class="line">UPDATE account SET cash&#x3D;cash+500 WHERE &#96;name&#96;&#x3D;&#39;B&#39;;</span><br><span class="line">COMMIT;</span><br><span class="line"># rollback;</span><br><span class="line">SET autocommit &#x3D; 1;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql 函数和编程</title>
    <url>/2019/02/16/Mysql/Mysql%E5%87%BD%E6%95%B0%E5%92%8C%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="Mysql-函数和编程"><a href="#Mysql-函数和编程" class="headerlink" title="Mysql 函数和编程"></a>Mysql 函数和编程</h1><h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><p><a href="https://dev.mysql.com/doc/refman/5.7/en/func-op-summary-ref.html" target="_blank" rel="noopener">官网文档</a></p>
<h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><h3 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 数学函数 (这里只列出一些常用的)</span><br><span class="line"></span><br><span class="line">SELECT ABS(-8);  &#x2F;*绝对值*&#x2F;</span><br><span class="line"></span><br><span class="line">SELECT CEILING(9.4);  &#x2F;*向上取整*&#x2F;</span><br><span class="line"></span><br><span class="line">SELECT FLOOR(9.4);  &#x2F;*向下取整*&#x2F;</span><br><span class="line"></span><br><span class="line">SELECT RAND();  &#x2F;*随机数,返回一个0-1之间的随机数*&#x2F;</span><br><span class="line"></span><br><span class="line">SELECT SIGN(0); &#x2F;*符号函数: 负数返回-1,正数返回1,0返回0*&#x2F;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#字符串函数</span><br><span class="line"></span><br><span class="line">SELECT CHAR_LENGTH(&#39;狂神说坚持就能成功&#39;); &#x2F;*返回字符串包含的字符数*&#x2F;</span><br><span class="line"></span><br><span class="line">SELECT CONCAT(&#39;我&#39;,&#39;爱&#39;,&#39;程序&#39;);  &#x2F;*合并字符串,参数可以有多个*&#x2F;</span><br><span class="line"></span><br><span class="line">SELECT INSERT(&#39;我爱编程helloworld&#39;,1,2,&#39;超级热爱&#39;);  &#x2F;*替换字符串,从某个位置开始替换某个长度*&#x2F;</span><br><span class="line"></span><br><span class="line">SELECT LOWER(&#39;KuangShen&#39;); &#x2F;*小写*&#x2F;</span><br><span class="line"></span><br><span class="line">SELECT UPPER(&#39;KuangShen&#39;); &#x2F;*大写*&#x2F;</span><br><span class="line"></span><br><span class="line">SELECT LEFT(&#39;hello,world&#39;,5);  &#x2F;*从左边截取*&#x2F;</span><br><span class="line"></span><br><span class="line">SELECT RIGHT(&#39;hello,world&#39;,5);  &#x2F;*从右边截取*&#x2F;</span><br><span class="line"></span><br><span class="line">SELECT REPLACE(&#39;坚持就能成功&#39;,&#39;坚持&#39;,&#39;努力&#39;);  &#x2F;*替换字符串*&#x2F;</span><br><span class="line"></span><br><span class="line">SELECT SUBSTR(&#39;坚持就能成功&#39;,0,4); &#x2F;*截取字符串,开始和长度*&#x2F;</span><br><span class="line"></span><br><span class="line">SELECT REVERSE(&#39;坚持就能成功&#39;); &#x2F;*反转*&#x2F;</span><br></pre></td></tr></table></figure>

<h3 id="日期和时间函数"><a href="#日期和时间函数" class="headerlink" title="日期和时间函数"></a>日期和时间函数</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#日期和时间函数</span><br><span class="line"></span><br><span class="line">SELECT CURRENT_DATE();   &#x2F;*获取当前日期*&#x2F;</span><br><span class="line">SELECT CURDATE();   &#x2F;*获取当前日期*&#x2F;</span><br><span class="line"></span><br><span class="line">SELECT NOW();   &#x2F;*获取当前日期和时间*&#x2F;</span><br><span class="line">SELECT LOCALTIME();   &#x2F;*获取当前日期和时间*&#x2F;</span><br><span class="line">SELECT SYSDATE();   &#x2F;*获取当前日期和时间*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;*获取年月日,时分秒*&#x2F;</span><br><span class="line">SELECT YEAR(NOW());</span><br><span class="line">SELECT MONTH(NOW());</span><br><span class="line">SELECT DAY(NOW());</span><br><span class="line">SELECT HOUR(NOW());</span><br><span class="line">SELECT MINUTE(NOW());</span><br><span class="line">SELECT SECOND(NOW());</span><br></pre></td></tr></table></figure>

<h3 id="系统和版本信息"><a href="#系统和版本信息" class="headerlink" title="系统和版本信息"></a>系统和版本信息</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#系统信息函数</span><br><span class="line">SELECT VERSION();  &#x2F;*版本*&#x2F;</span><br><span class="line">SELECT USER();  &#x2F;*用户*&#x2F;</span><br></pre></td></tr></table></figure>





<h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200217091844.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#聚合函数</span><br><span class="line"></span><br><span class="line">&#x2F;*COUNT:非空的*&#x2F;</span><br><span class="line">SELECT COUNT(studentname) FROM student; #指定列会忽略所有的null值</span><br><span class="line">SELECT COUNT(*) FROM student; #不会忽略null值</span><br><span class="line">SELECT COUNT(1) FROM student;  &#x2F;*推荐*&#x2F; #不会忽略null值</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SELECT SUM(StudentResult) AS 总和 FROM result;</span><br><span class="line">SELECT AVG(StudentResult) AS 平均分 FROM result;</span><br><span class="line">SELECT MAX(StudentResult) AS 最高分 FROM result;</span><br><span class="line">SELECT MIN(StudentResult) AS 最低分 FROM result;</span><br></pre></td></tr></table></figure>

<p>练习题：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查询不同课程的平均分,最高分,最低分</span><br><span class="line"># 前提:根据不同的课程进行分组</span><br><span class="line"></span><br><span class="line">SELECT subjectname,AVG(studentresult) AS 平均分,MAX(StudentResult) AS 最高分,MIN(StudentResult) AS 最低分</span><br><span class="line">FROM result AS r</span><br><span class="line">INNER JOIN &#96;subject&#96; AS s</span><br><span class="line">ON r.subjectno &#x3D; s.subjectno</span><br><span class="line">GROUP BY r.subjectno</span><br><span class="line">HAVING 平均分&gt;80;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">where写在group by前面.</span><br><span class="line">要是放在分组后面的筛选</span><br><span class="line">要使用HAVING..</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql 查询语言</title>
    <url>/2019/02/15/Mysql/Mysql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80/</url>
    <content><![CDATA[<h1 id="Mysql-查询语言"><a href="#Mysql-查询语言" class="headerlink" title="Mysql 查询语言"></a>Mysql 查询语言</h1><h2 id="DQL语言"><a href="#DQL语言" class="headerlink" title="DQL语言"></a>DQL语言</h2><p><strong>DQL( Data Query Language 数据查询语言 )</strong></p>
<ul>
<li><p>查询数据库数据 , 如<strong>SELECT</strong>语句</p>
</li>
<li><p>简单的单表查询或多表的复杂查询和嵌套查询</p>
</li>
<li><p>使用频率最高的语句</p>
</li>
<li><p>是数据库语言中最核心,最重要的语句</p>
</li>
</ul>
<a id="more"></a>

<h3 id="1-select-语法公式："><a href="#1-select-语法公式：" class="headerlink" title="1. select 语法公式："></a>1. select 语法公式：</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">SELECT [ALL | DISTINCT]</span></span><br><span class="line"><span class="comment">&#123;* | table.* | [table.field1[as alias1][,table.field2[as alias2]][,...]]&#125;</span></span><br><span class="line"><span class="comment">FROM table_name [as table_alias]</span></span><br><span class="line"><span class="comment">    [left | right | inner join table_name2]  #联合查询</span></span><br><span class="line"><span class="comment">    [WHERE ...]  #指定结果需满足的条件</span></span><br><span class="line"><span class="comment">    [GROUP BY ...]  #指定结果按照哪几个字段来分组</span></span><br><span class="line"><span class="comment">    [HAVING]  #过滤分组的记录必须满足的次要条件</span></span><br><span class="line"><span class="comment">    [ORDER BY ...]  #指定查询记录按一个或多个条件排序</span></span><br><span class="line"><span class="comment">    [LIMIT &#123;[offset,]row_count | row_countOFFSET offset&#125;];</span></span><br><span class="line"><span class="comment">    # 指定查询的记录从哪条至哪条</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>



<p><strong>预备数据环境：提供的素材SQL语句 :</strong> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">SQLyog Ultimate v10.00 Beta1</span><br><span class="line">MySQL - 5.7.19 : Database - school</span><br><span class="line">*********************************************************************</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;*!40101 SET NAMES utf8 *&#x2F;;</span><br><span class="line"></span><br><span class="line">&#x2F;*!40101 SET SQL_MODE&#x3D;&#39;&#39;*&#x2F;;</span><br><span class="line"></span><br><span class="line">&#x2F;*!40014 SET @OLD_UNIQUE_CHECKS&#x3D;@@UNIQUE_CHECKS, UNIQUE_CHECKS&#x3D;0 *&#x2F;;</span><br><span class="line">&#x2F;*!40014 SET @OLD_FOREIGN_KEY_CHECKS&#x3D;@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS&#x3D;0 *&#x2F;;</span><br><span class="line">&#x2F;*!40101 SET @OLD_SQL_MODE&#x3D;@@SQL_MODE, SQL_MODE&#x3D;&#39;NO_AUTO_VALUE_ON_ZERO&#39; *&#x2F;;</span><br><span class="line">&#x2F;*!40111 SET @OLD_SQL_NOTES&#x3D;@@SQL_NOTES, SQL_NOTES&#x3D;0 *&#x2F;;</span><br><span class="line">CREATE DATABASE &#x2F;*!32312 IF NOT EXISTS*&#x2F;&#96;school&#96; &#x2F;*!40100 DEFAULT CHARACTER SET utf8 *&#x2F;;</span><br><span class="line"></span><br><span class="line">USE &#96;school&#96;;</span><br><span class="line"></span><br><span class="line">&#x2F;*Table structure for table &#96;grade&#96; *&#x2F;</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS &#96;grade&#96;;</span><br><span class="line"></span><br><span class="line">CREATE TABLE &#96;grade&#96; (</span><br><span class="line">  &#96;GradeID&#96; INT(11) NOT NULL AUTO_INCREMENT COMMENT &#39;年级编号&#39;,</span><br><span class="line">  &#96;GradeName&#96; VARCHAR(50) NOT NULL COMMENT &#39;年级名称&#39;,</span><br><span class="line">  PRIMARY KEY (&#96;GradeID&#96;)</span><br><span class="line">) ENGINE&#x3D;INNODB AUTO_INCREMENT&#x3D;6 DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line">&#x2F;*Data for the table &#96;grade&#96; *&#x2F;</span><br><span class="line"></span><br><span class="line">INSERT  INTO &#96;grade&#96;(&#96;GradeID&#96;,&#96;GradeName&#96;) VALUES (1,&#39;大一&#39;),(2,&#39;大二&#39;),(3,&#39;大三&#39;),(4,&#39;大四&#39;),(5,&#39;预科班&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;*Table structure for table &#96;result&#96; *&#x2F;</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS &#96;result&#96;;</span><br><span class="line"></span><br><span class="line">CREATE TABLE &#96;result&#96; (</span><br><span class="line">  &#96;StudentNo&#96; INT(4) NOT NULL COMMENT &#39;学号&#39;,</span><br><span class="line">  &#96;SubjectNo&#96; INT(4) NOT NULL COMMENT &#39;课程编号&#39;,</span><br><span class="line">  &#96;ExamDate&#96; DATETIME NOT NULL COMMENT &#39;考试日期&#39;,</span><br><span class="line">  &#96;StudentResult&#96; INT(4) NOT NULL COMMENT &#39;考试成绩&#39;,</span><br><span class="line">  KEY &#96;SubjectNo&#96; (&#96;SubjectNo&#96;)</span><br><span class="line">) ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line">&#x2F;*Data for the table &#96;result&#96; *&#x2F;</span><br><span class="line"></span><br><span class="line">INSERT  INTO &#96;result&#96;(&#96;StudentNo&#96;,&#96;SubjectNo&#96;,&#96;ExamDate&#96;,&#96;StudentResult&#96;) VALUES (1000,1,&#39;2013-11-11 16:00:00&#39;,94),(1000,2,&#39;2012-11-10 10:00:00&#39;,75),(1000,3,&#39;2011-12-19 10:00:00&#39;,76),(1000,4,&#39;2010-11-18 11:00:00&#39;,93),(1000,5,&#39;2013-11-11 14:00:00&#39;,97),(1000,6,&#39;2012-09-13 15:00:00&#39;,87),(1000,7,&#39;2011-10-16 16:00:00&#39;,79),(1000,8,&#39;2010-11-11 16:00:00&#39;,74),(1000,9,&#39;2013-11-21 10:00:00&#39;,69),(1000,10,&#39;2012-11-11 12:00:00&#39;,78),(1000,11,&#39;2011-11-11 14:00:00&#39;,66),(1000,12,&#39;2010-11-11 15:00:00&#39;,82),(1000,13,&#39;2013-11-11 14:00:00&#39;,94),(1000,14,&#39;2012-11-11 15:00:00&#39;,98),(1000,15,&#39;2011-12-11 10:00:00&#39;,70),(1000,16,&#39;2010-09-11 10:00:00&#39;,74),(1001,1,&#39;2013-11-11 16:00:00&#39;,76),(1001,2,&#39;2012-11-10 10:00:00&#39;,93),(1001,3,&#39;2011-12-19 10:00:00&#39;,65),(1001,4,&#39;2010-11-18 11:00:00&#39;,71),(1001,5,&#39;2013-11-11 14:00:00&#39;,98),(1001,6,&#39;2012-09-13 15:00:00&#39;,74),(1001,7,&#39;2011-10-16 16:00:00&#39;,85),(1001,8,&#39;2010-11-11 16:00:00&#39;,69),(1001,9,&#39;2013-11-21 10:00:00&#39;,63),(1001,10,&#39;2012-11-11 12:00:00&#39;,70),(1001,11,&#39;2011-11-11 14:00:00&#39;,62),(1001,12,&#39;2010-11-11 15:00:00&#39;,90),(1001,13,&#39;2013-11-11 14:00:00&#39;,97),(1001,14,&#39;2012-11-11 15:00:00&#39;,89),(1001,15,&#39;2011-12-11 10:00:00&#39;,72),(1001,16,&#39;2010-09-11 10:00:00&#39;,90),(1002,1,&#39;2013-11-11 16:00:00&#39;,61),(1002,2,&#39;2012-11-10 10:00:00&#39;,80),(1002,3,&#39;2011-12-19 10:00:00&#39;,89),(1002,4,&#39;2010-11-18 11:00:00&#39;,88),(1002,5,&#39;2013-11-11 14:00:00&#39;,82),(1002,6,&#39;2012-09-13 15:00:00&#39;,91),(1002,7,&#39;2011-10-16 16:00:00&#39;,63),(1002,8,&#39;2010-11-11 16:00:00&#39;,84),(1002,9,&#39;2013-11-21 10:00:00&#39;,60),(1002,10,&#39;2012-11-11 12:00:00&#39;,71),(1002,11,&#39;2011-11-11 14:00:00&#39;,93),(1002,12,&#39;2010-11-11 15:00:00&#39;,96),(1002,13,&#39;2013-11-11 14:00:00&#39;,83),(1002,14,&#39;2012-11-11 15:00:00&#39;,69),(1002,15,&#39;2011-12-11 10:00:00&#39;,89),(1002,16,&#39;2010-09-11 10:00:00&#39;,83),(1003,1,&#39;2013-11-11 16:00:00&#39;,91),(1003,2,&#39;2012-11-10 10:00:00&#39;,75),(1003,3,&#39;2011-12-19 10:00:00&#39;,65),(1003,4,&#39;2010-11-18 11:00:00&#39;,63),(1003,5,&#39;2013-11-11 14:00:00&#39;,90),(1003,6,&#39;2012-09-13 15:00:00&#39;,96),(1003,7,&#39;2011-10-16 16:00:00&#39;,97),(1003,8,&#39;2010-11-11 16:00:00&#39;,77),(1003,9,&#39;2013-11-21 10:00:00&#39;,62),(1003,10,&#39;2012-11-11 12:00:00&#39;,81),(1003,11,&#39;2011-11-11 14:00:00&#39;,76),(1003,12,&#39;2010-11-11 15:00:00&#39;,61),(1003,13,&#39;2013-11-11 14:00:00&#39;,93),(1003,14,&#39;2012-11-11 15:00:00&#39;,79),(1003,15,&#39;2011-12-11 10:00:00&#39;,78),(1003,16,&#39;2010-09-11 10:00:00&#39;,96),(1004,1,&#39;2013-11-11 16:00:00&#39;,84),(1004,2,&#39;2012-11-10 10:00:00&#39;,79),(1004,3,&#39;2011-12-19 10:00:00&#39;,76),(1004,4,&#39;2010-11-18 11:00:00&#39;,78),(1004,5,&#39;2013-11-11 14:00:00&#39;,81),(1004,6,&#39;2012-09-13 15:00:00&#39;,90),(1004,7,&#39;2011-10-16 16:00:00&#39;,63),(1004,8,&#39;2010-11-11 16:00:00&#39;,89),(1004,9,&#39;2013-11-21 10:00:00&#39;,67),(1004,10,&#39;2012-11-11 12:00:00&#39;,100),(1004,11,&#39;2011-11-11 14:00:00&#39;,94),(1004,12,&#39;2010-11-11 15:00:00&#39;,65),(1004,13,&#39;2013-11-11 14:00:00&#39;,86),(1004,14,&#39;2012-11-11 15:00:00&#39;,77),(1004,15,&#39;2011-12-11 10:00:00&#39;,82),(1004,16,&#39;2010-09-11 10:00:00&#39;,87),(1005,1,&#39;2013-11-11 16:00:00&#39;,82),(1005,2,&#39;2012-11-10 10:00:00&#39;,92),(1005,3,&#39;2011-12-19 10:00:00&#39;,80),(1005,4,&#39;2010-11-18 11:00:00&#39;,92),(1005,5,&#39;2013-11-11 14:00:00&#39;,97),(1005,6,&#39;2012-09-13 15:00:00&#39;,72),(1005,7,&#39;2011-10-16 16:00:00&#39;,84),(1005,8,&#39;2010-11-11 16:00:00&#39;,79),(1005,9,&#39;2013-11-21 10:00:00&#39;,76),(1005,10,&#39;2012-11-11 12:00:00&#39;,87),(1005,11,&#39;2011-11-11 14:00:00&#39;,65),(1005,12,&#39;2010-11-11 15:00:00&#39;,67),(1005,13,&#39;2013-11-11 14:00:00&#39;,63),(1005,14,&#39;2012-11-11 15:00:00&#39;,64),(1005,15,&#39;2011-12-11 10:00:00&#39;,99),(1005,16,&#39;2010-09-11 10:00:00&#39;,97),(1006,1,&#39;2013-11-11 16:00:00&#39;,82),(1006,2,&#39;2012-11-10 10:00:00&#39;,73),(1006,3,&#39;2011-12-19 10:00:00&#39;,79),(1006,4,&#39;2010-11-18 11:00:00&#39;,63),(1006,5,&#39;2013-11-11 14:00:00&#39;,97),(1006,6,&#39;2012-09-13 15:00:00&#39;,83),(1006,7,&#39;2011-10-16 16:00:00&#39;,78),(1006,8,&#39;2010-11-11 16:00:00&#39;,88),(1006,9,&#39;2013-11-21 10:00:00&#39;,89),(1006,10,&#39;2012-11-11 12:00:00&#39;,82),(1006,11,&#39;2011-11-11 14:00:00&#39;,70),(1006,12,&#39;2010-11-11 15:00:00&#39;,69),(1006,13,&#39;2013-11-11 14:00:00&#39;,64),(1006,14,&#39;2012-11-11 15:00:00&#39;,80),(1006,15,&#39;2011-12-11 10:00:00&#39;,90),(1006,16,&#39;2010-09-11 10:00:00&#39;,85),(1007,1,&#39;2013-11-11 16:00:00&#39;,87),(1007,2,&#39;2012-11-10 10:00:00&#39;,63),(1007,3,&#39;2011-12-19 10:00:00&#39;,70),(1007,4,&#39;2010-11-18 11:00:00&#39;,74),(1007,5,&#39;2013-11-11 14:00:00&#39;,79),(1007,6,&#39;2012-09-13 15:00:00&#39;,83),(1007,7,&#39;2011-10-16 16:00:00&#39;,86),(1007,8,&#39;2010-11-11 16:00:00&#39;,76),(1007,9,&#39;2013-11-21 10:00:00&#39;,65),(1007,10,&#39;2012-11-11 12:00:00&#39;,87),(1007,11,&#39;2011-11-11 14:00:00&#39;,69),(1007,12,&#39;2010-11-11 15:00:00&#39;,69),(1007,13,&#39;2013-11-11 14:00:00&#39;,90),(1007,14,&#39;2012-11-11 15:00:00&#39;,84),(1007,15,&#39;2011-12-11 10:00:00&#39;,95),(1007,16,&#39;2010-09-11 10:00:00&#39;,92),(1008,1,&#39;2013-11-11 16:00:00&#39;,96),(1008,2,&#39;2012-11-10 10:00:00&#39;,62),(1008,3,&#39;2011-12-19 10:00:00&#39;,97),(1008,4,&#39;2010-11-18 11:00:00&#39;,84),(1008,5,&#39;2013-11-11 14:00:00&#39;,86),(1008,6,&#39;2012-09-13 15:00:00&#39;,72),(1008,7,&#39;2011-10-16 16:00:00&#39;,67),(1008,8,&#39;2010-11-11 16:00:00&#39;,83),(1008,9,&#39;2013-11-21 10:00:00&#39;,86),(1008,10,&#39;2012-11-11 12:00:00&#39;,60),(1008,11,&#39;2011-11-11 14:00:00&#39;,61),(1008,12,&#39;2010-11-11 15:00:00&#39;,68),(1008,13,&#39;2013-11-11 14:00:00&#39;,99),(1008,14,&#39;2012-11-11 15:00:00&#39;,77),(1008,15,&#39;2011-12-11 10:00:00&#39;,73),(1008,16,&#39;2010-09-11 10:00:00&#39;,78),(1009,1,&#39;2013-11-11 16:00:00&#39;,67),(1009,2,&#39;2012-11-10 10:00:00&#39;,70),(1009,3,&#39;2011-12-19 10:00:00&#39;,75),(1009,4,&#39;2010-11-18 11:00:00&#39;,92),(1009,5,&#39;2013-11-11 14:00:00&#39;,76),(1009,6,&#39;2012-09-13 15:00:00&#39;,90),(1009,7,&#39;2011-10-16 16:00:00&#39;,62),(1009,8,&#39;2010-11-11 16:00:00&#39;,68),(1009,9,&#39;2013-11-21 10:00:00&#39;,70),(1009,10,&#39;2012-11-11 12:00:00&#39;,83),(1009,11,&#39;2011-11-11 14:00:00&#39;,88),(1009,12,&#39;2010-11-11 15:00:00&#39;,65),(1009,13,&#39;2013-11-11 14:00:00&#39;,91),(1009,14,&#39;2012-11-11 15:00:00&#39;,99),(1009,15,&#39;2011-12-11 10:00:00&#39;,65),(1009,16,&#39;2010-09-11 10:00:00&#39;,83),(1010,1,&#39;2013-11-11 16:00:00&#39;,83),(1010,2,&#39;2012-11-10 10:00:00&#39;,87),(1010,3,&#39;2011-12-19 10:00:00&#39;,89),(1010,4,&#39;2010-11-18 11:00:00&#39;,99),(1010,5,&#39;2013-11-11 14:00:00&#39;,91),(1010,6,&#39;2012-09-13 15:00:00&#39;,96),(1010,7,&#39;2011-10-16 16:00:00&#39;,72),(1010,8,&#39;2010-11-11 16:00:00&#39;,72),(1010,9,&#39;2013-11-21 10:00:00&#39;,98),(1010,10,&#39;2012-11-11 12:00:00&#39;,73),(1010,11,&#39;2011-11-11 14:00:00&#39;,68),(1010,12,&#39;2010-11-11 15:00:00&#39;,62),(1010,13,&#39;2013-11-11 14:00:00&#39;,67),(1010,14,&#39;2012-11-11 15:00:00&#39;,69),(1010,15,&#39;2011-12-11 10:00:00&#39;,71),(1010,16,&#39;2010-09-11 10:00:00&#39;,66),(1011,1,&#39;2013-11-11 16:00:00&#39;,62),(1011,2,&#39;2012-11-10 10:00:00&#39;,72),(1011,3,&#39;2011-12-19 10:00:00&#39;,96),(1011,4,&#39;2010-11-18 11:00:00&#39;,64),(1011,5,&#39;2013-11-11 14:00:00&#39;,89),(1011,6,&#39;2012-09-13 15:00:00&#39;,91),(1011,7,&#39;2011-10-16 16:00:00&#39;,95),(1011,8,&#39;2010-11-11 16:00:00&#39;,96),(1011,9,&#39;2013-11-21 10:00:00&#39;,89),(1011,10,&#39;2012-11-11 12:00:00&#39;,73),(1011,11,&#39;2011-11-11 14:00:00&#39;,82),(1011,12,&#39;2010-11-11 15:00:00&#39;,98),(1011,13,&#39;2013-11-11 14:00:00&#39;,66),(1011,14,&#39;2012-11-11 15:00:00&#39;,69),(1011,15,&#39;2011-12-11 10:00:00&#39;,91),(1011,16,&#39;2010-09-11 10:00:00&#39;,69),(1012,1,&#39;2013-11-11 16:00:00&#39;,86),(1012,2,&#39;2012-11-10 10:00:00&#39;,66),(1012,3,&#39;2011-12-19 10:00:00&#39;,97),(1012,4,&#39;2010-11-18 11:00:00&#39;,69),(1012,5,&#39;2013-11-11 14:00:00&#39;,70),(1012,6,&#39;2012-09-13 15:00:00&#39;,74),(1012,7,&#39;2011-10-16 16:00:00&#39;,91),(1012,8,&#39;2010-11-11 16:00:00&#39;,97),(1012,9,&#39;2013-11-21 10:00:00&#39;,84),(1012,10,&#39;2012-11-11 12:00:00&#39;,82),(1012,11,&#39;2011-11-11 14:00:00&#39;,90),(1012,12,&#39;2010-11-11 15:00:00&#39;,91),(1012,13,&#39;2013-11-11 14:00:00&#39;,91),(1012,14,&#39;2012-11-11 15:00:00&#39;,97),(1012,15,&#39;2011-12-11 10:00:00&#39;,85),(1012,16,&#39;2010-09-11 10:00:00&#39;,90),(1013,1,&#39;2013-11-11 16:00:00&#39;,73),(1013,2,&#39;2012-11-10 10:00:00&#39;,69),(1013,3,&#39;2011-12-19 10:00:00&#39;,91),(1013,4,&#39;2010-11-18 11:00:00&#39;,72),(1013,5,&#39;2013-11-11 14:00:00&#39;,76),(1013,6,&#39;2012-09-13 15:00:00&#39;,87),(1013,7,&#39;2011-10-16 16:00:00&#39;,61),(1013,8,&#39;2010-11-11 16:00:00&#39;,77),(1013,9,&#39;2013-11-21 10:00:00&#39;,83),(1013,10,&#39;2012-11-11 12:00:00&#39;,99),(1013,11,&#39;2011-11-11 14:00:00&#39;,91),(1013,12,&#39;2010-11-11 15:00:00&#39;,84),(1013,13,&#39;2013-11-11 14:00:00&#39;,98),(1013,14,&#39;2012-11-11 15:00:00&#39;,74),(1013,15,&#39;2011-12-11 10:00:00&#39;,92),(1013,16,&#39;2010-09-11 10:00:00&#39;,90),(1014,1,&#39;2013-11-11 16:00:00&#39;,64),(1014,2,&#39;2012-11-10 10:00:00&#39;,81),(1014,3,&#39;2011-12-19 10:00:00&#39;,79),(1014,4,&#39;2010-11-18 11:00:00&#39;,74),(1014,5,&#39;2013-11-11 14:00:00&#39;,65),(1014,6,&#39;2012-09-13 15:00:00&#39;,88),(1014,7,&#39;2011-10-16 16:00:00&#39;,86),(1014,8,&#39;2010-11-11 16:00:00&#39;,77),(1014,9,&#39;2013-11-21 10:00:00&#39;,86),(1014,10,&#39;2012-11-11 12:00:00&#39;,85),(1014,11,&#39;2011-11-11 14:00:00&#39;,86),(1014,12,&#39;2010-11-11 15:00:00&#39;,75),(1014,13,&#39;2013-11-11 14:00:00&#39;,89),(1014,14,&#39;2012-11-11 15:00:00&#39;,79),(1014,15,&#39;2011-12-11 10:00:00&#39;,73),(1014,16,&#39;2010-09-11 10:00:00&#39;,68),(1015,1,&#39;2013-11-11 16:00:00&#39;,99),(1015,2,&#39;2012-11-10 10:00:00&#39;,60),(1015,3,&#39;2011-12-19 10:00:00&#39;,60),(1015,4,&#39;2010-11-18 11:00:00&#39;,75),(1015,5,&#39;2013-11-11 14:00:00&#39;,78),(1015,6,&#39;2012-09-13 15:00:00&#39;,78),(1015,7,&#39;2011-10-16 16:00:00&#39;,84),(1015,8,&#39;2010-11-11 16:00:00&#39;,95),(1015,9,&#39;2013-11-21 10:00:00&#39;,93),(1015,10,&#39;2012-11-11 12:00:00&#39;,79),(1015,11,&#39;2011-11-11 14:00:00&#39;,74),(1015,12,&#39;2010-11-11 15:00:00&#39;,65),(1015,13,&#39;2013-11-11 14:00:00&#39;,63),(1015,14,&#39;2012-11-11 15:00:00&#39;,74),(1015,15,&#39;2011-12-11 10:00:00&#39;,67),(1015,16,&#39;2010-09-11 10:00:00&#39;,65),(1016,1,&#39;2013-11-11 16:00:00&#39;,97),(1016,2,&#39;2012-11-10 10:00:00&#39;,90),(1016,3,&#39;2011-12-19 10:00:00&#39;,77),(1016,4,&#39;2010-11-18 11:00:00&#39;,75),(1016,5,&#39;2013-11-11 14:00:00&#39;,75),(1016,6,&#39;2012-09-13 15:00:00&#39;,97),(1016,7,&#39;2011-10-16 16:00:00&#39;,96),(1016,8,&#39;2010-11-11 16:00:00&#39;,92),(1016,9,&#39;2013-11-21 10:00:00&#39;,62),(1016,10,&#39;2012-11-11 12:00:00&#39;,83),(1016,11,&#39;2011-11-11 14:00:00&#39;,98),(1016,12,&#39;2010-11-11 15:00:00&#39;,94),(1016,13,&#39;2013-11-11 14:00:00&#39;,62),(1016,14,&#39;2012-11-11 15:00:00&#39;,97),(1016,15,&#39;2011-12-11 10:00:00&#39;,76),(1016,16,&#39;2010-09-11 10:00:00&#39;,82),(1017,1,&#39;2013-11-11 16:00:00&#39;,100),(1017,2,&#39;2012-11-10 10:00:00&#39;,88),(1017,3,&#39;2011-12-19 10:00:00&#39;,86),(1017,4,&#39;2010-11-18 11:00:00&#39;,73),(1017,5,&#39;2013-11-11 14:00:00&#39;,96),(1017,6,&#39;2012-09-13 15:00:00&#39;,64),(1017,7,&#39;2011-10-16 16:00:00&#39;,81),(1017,8,&#39;2010-11-11 16:00:00&#39;,66),(1017,9,&#39;2013-11-21 10:00:00&#39;,76),(1017,10,&#39;2012-11-11 12:00:00&#39;,95),(1017,11,&#39;2011-11-11 14:00:00&#39;,73),(1017,12,&#39;2010-11-11 15:00:00&#39;,82),(1017,13,&#39;2013-11-11 14:00:00&#39;,85),(1017,14,&#39;2012-11-11 15:00:00&#39;,68),(1017,15,&#39;2011-12-11 10:00:00&#39;,99),(1017,16,&#39;2010-09-11 10:00:00&#39;,76);</span><br><span class="line"></span><br><span class="line">&#x2F;*Table structure for table &#96;student&#96; *&#x2F;</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS &#96;student&#96;;</span><br><span class="line"></span><br><span class="line">CREATE TABLE &#96;student&#96; (</span><br><span class="line">  &#96;StudentNo&#96; INT(4) NOT NULL COMMENT &#39;学号&#39;,</span><br><span class="line">  &#96;LoginPwd&#96; VARCHAR(20) DEFAULT NULL,</span><br><span class="line">  &#96;StudentName&#96; VARCHAR(20) DEFAULT NULL COMMENT &#39;学生姓名&#39;,</span><br><span class="line">  &#96;Sex&#96; TINYINT(1) DEFAULT NULL COMMENT &#39;性别，取值0或1&#39;,</span><br><span class="line">  &#96;GradeId&#96; INT(11) DEFAULT NULL COMMENT &#39;年级编号&#39;,</span><br><span class="line">  &#96;Phone&#96; VARCHAR(50) NOT NULL COMMENT &#39;联系电话，允许为空，即可选输入&#39;,</span><br><span class="line">  &#96;Address&#96; VARCHAR(255) NOT NULL COMMENT &#39;地址，允许为空，即可选输入&#39;,</span><br><span class="line">  &#96;BornDate&#96; DATETIME DEFAULT NULL COMMENT &#39;出生时间&#39;,</span><br><span class="line">  &#96;Email&#96; VARCHAR(50) NOT NULL COMMENT &#39;邮箱账号，允许为空，即可选输入&#39;,</span><br><span class="line">  &#96;IdentityCard&#96; VARCHAR(18) DEFAULT NULL COMMENT &#39;身份证号&#39;,</span><br><span class="line">  PRIMARY KEY (&#96;StudentNo&#96;),</span><br><span class="line">  UNIQUE KEY &#96;IdentityCard&#96; (&#96;IdentityCard&#96;),</span><br><span class="line">  KEY &#96;Email&#96; (&#96;Email&#96;)</span><br><span class="line">) ENGINE&#x3D;MYISAM DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line">&#x2F;*Data for the table &#96;student&#96; *&#x2F;</span><br><span class="line"></span><br><span class="line">INSERT  INTO &#96;student&#96;(&#96;StudentNo&#96;,&#96;LoginPwd&#96;,&#96;StudentName&#96;,&#96;Sex&#96;,&#96;GradeId&#96;,&#96;Phone&#96;,&#96;Address&#96;,&#96;BornDate&#96;,&#96;Email&#96;,&#96;IdentityCard&#96;) VALUES (1000,&#39;111111&#39;,&#39;郭靖&#39;,1,1,&#39;13500000001&#39;,&#39;北京海淀区中关村大街1号&#39;,&#39;1986-12-11 00:00:00&#39;,&#39;test1@bdqn.cn&#39;,&#39;450323198612111234&#39;),(1001,&#39;123456&#39;,&#39;李文才&#39;,1,2,&#39;13500000002&#39;,&#39;河南洛阳&#39;,&#39;1981-12-31 00:00:00&#39;,&#39;test1@bdqn.cn&#39;,&#39;450323198112311234&#39;),(1002,&#39;111111&#39;,&#39;李斯文&#39;,1,1,&#39;13500000003&#39;,&#39;天津市和平区&#39;,&#39;1986-11-30 00:00:00&#39;,&#39;test1@bdqn.cn&#39;,&#39;450323198611301234&#39;),(1003,&#39;123456&#39;,&#39;武松&#39;,1,3,&#39;13500000004&#39;,&#39;上海卢湾区&#39;,&#39;1986-12-31 00:00:00&#39;,&#39;test1@bdqn.cn&#39;,&#39;450323198612314234&#39;),(1004,&#39;123456&#39;,&#39;张三&#39;,1,4,&#39;13500000005&#39;,&#39;北京市通州&#39;,&#39;1989-12-31 00:00:00&#39;,&#39;test1@bdqn.cn&#39;,&#39;450323198612311244&#39;),(1005,&#39;123456&#39;,&#39;张秋丽 &#39;,2,1,&#39;13500000006&#39;,&#39;广西桂林市灵川&#39;,&#39;1986-12-31 00:00:00&#39;,&#39;test1@bdqn.cn&#39;,&#39;450323198612311214&#39;),(1006,&#39;123456&#39;,&#39;肖梅&#39;,2,4,&#39;13500000007&#39;,&#39;地址不详&#39;,&#39;1986-12-31 00:00:00&#39;,&#39;test1@bdqn.cn&#39;,&#39;450323198612311134&#39;),(1007,&#39;111111&#39;,&#39;欧阳峻峰&#39;,1,1,&#39;13500000008&#39;,&#39;北京东城区&#39;,&#39;1986-12-31 00:00:00&#39;,&#39;test1@bdqn.cn&#39;,&#39;450323198612311133&#39;),(1008,&#39;111111&#39;,&#39;梅超风&#39;,1,1,&#39;13500000009&#39;,&#39;河南洛阳&#39;,&#39;1986-12-31 00:00:00&#39;,&#39;test1@bdqn.cn&#39;,&#39;450323198612311221&#39;),(1009,&#39;123456&#39;,&#39;刘毅&#39;,1,2,&#39;13500000011&#39;,&#39;安徽&#39;,&#39;1986-12-31 00:00:00&#39;,&#39;test1@bdqn.cn&#39;,&#39;450323198612311231&#39;),(1010,&#39;111111&#39;,&#39;大凡&#39;,1,1,&#39;13500000012&#39;,&#39;河南洛阳&#39;,&#39;1986-12-31 00:00:00&#39;,&#39;test1@bdqn.cn&#39;,&#39;450323198612311044&#39;),(1011,&#39;111111&#39;,&#39;奥丹斯&#39;,1,1,&#39;13500000013&#39;,&#39;北京海淀区中关村大街*号&#39;,&#39;1984-12-31 00:00:00&#39;,&#39;test1@bdqn.cn&#39;,&#39;450323198412311234&#39;),(1012,&#39;123456&#39;,&#39;多伦&#39;,2,3,&#39;13500000014&#39;,&#39;广西南宁中央大街&#39;,&#39;1986-12-31 00:00:00&#39;,&#39;test1@bdqn.cn&#39;,&#39;450323198612311334&#39;),(1013,&#39;123456&#39;,&#39;李梅&#39;,2,1,&#39;13500000015&#39;,&#39;上海卢湾区&#39;,&#39;1986-12-31 00:00:00&#39;,&#39;test1@bdqn.cn&#39;,&#39;450323198612311534&#39;),(1014,&#39;123456&#39;,&#39;张得&#39;,2,4,&#39;13500000016&#39;,&#39;北京海淀区中关村大街*号&#39;,&#39;1986-12-31 00:00:00&#39;,&#39;test1@bdqn.cn&#39;,&#39;450323198612311264&#39;),(1015,&#39;123456&#39;,&#39;李东方&#39;,1,4,&#39;13500000017&#39;,&#39;广西桂林市灵川&#39;,&#39;1976-12-31 00:00:00&#39;,&#39;test1@bdqn.cn&#39;,&#39;450323197612311234&#39;),(1016,&#39;111111&#39;,&#39;刘奋斗&#39;,1,1,&#39;13500000018&#39;,&#39;上海卢湾区&#39;,&#39;1986-12-31 00:00:00&#39;,&#39;test1@bdqn.cn&#39;,&#39;450323198612311251&#39;),(1017,&#39;123456&#39;,&#39;可可&#39;,2,3,&#39;13500000019&#39;,&#39;北京长安街1号&#39;,&#39;1981-09-10 00:00:00&#39;,&#39;test1@bdqn.cn&#39;,&#39;450323198109108311&#39;),(10066,&#39;&#39;,&#39;Tom&#39;,1,1,&#39;13500000000&#39;,&#39;&#39;,&#39;0000-00-00 00:00:00&#39;,&#39;email@22.com&#39;,&#39;33123123123123123&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;*Table structure for table &#96;subject&#96; *&#x2F;</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS &#96;subject&#96;;</span><br><span class="line"></span><br><span class="line">CREATE TABLE &#96;subject&#96; (</span><br><span class="line">  &#96;SubjectNo&#96; INT(11) NOT NULL AUTO_INCREMENT COMMENT &#39;课程编号&#39;,</span><br><span class="line">  &#96;SubjectName&#96; VARCHAR(50) DEFAULT NULL COMMENT &#39;课程名称&#39;,</span><br><span class="line">  &#96;ClassHour&#96; INT(4) DEFAULT NULL COMMENT &#39;学时&#39;,</span><br><span class="line">  &#96;GradeID&#96; INT(4) DEFAULT NULL COMMENT &#39;年级编号&#39;,</span><br><span class="line">  PRIMARY KEY (&#96;SubjectNo&#96;)</span><br><span class="line">) ENGINE&#x3D;INNODB AUTO_INCREMENT&#x3D;18 DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line">&#x2F;*Data for the table &#96;subject&#96; *&#x2F;</span><br><span class="line"></span><br><span class="line">INSERT  INTO &#96;subject&#96;(&#96;SubjectNo&#96;,&#96;SubjectName&#96;,&#96;ClassHour&#96;,&#96;GradeID&#96;) VALUES (1,&#39;高等数学-1&#39;,110,1),(2,&#39;高等数学-2&#39;,110,2),(3,&#39;高等数学-3&#39;,100,3),(4,&#39;高等数学-4&#39;,130,4),(5,&#39;C语言-1&#39;,110,1),(6,&#39;C语言-2&#39;,110,2),(7,&#39;C语言-3&#39;,100,3),(8,&#39;C语言-4&#39;,130,4),(9,&#39;JAVA第一学年&#39;,110,1),(10,&#39;JAVA第二学年&#39;,110,2),(11,&#39;JAVA第三学年&#39;,100,3),(12,&#39;JAVA第四学年&#39;,130,4),(13,&#39;数据库结构-1&#39;,110,1),(14,&#39;数据库结构-2&#39;,110,2),(15,&#39;数据库结构-3&#39;,100,3),(16,&#39;数据库结构-4&#39;,130,4),(17,&#39;C#基础&#39;,130,1);</span><br><span class="line"></span><br><span class="line">&#x2F;*!40101 SET SQL_MODE&#x3D;@OLD_SQL_MODE *&#x2F;;</span><br><span class="line">&#x2F;*!40014 SET FOREIGN_KEY_CHECKS&#x3D;@OLD_FOREIGN_KEY_CHECKS *&#x2F;;</span><br><span class="line">&#x2F;*!40014 SET UNIQUE_CHECKS&#x3D;@OLD_UNIQUE_CHECKS *&#x2F;;</span><br><span class="line">&#x2F;*!40111 SET SQL_NOTES&#x3D;@OLD_SQL_NOTES *&#x2F;;</span><br></pre></td></tr></table></figure>



<h3 id="2-指定查询字段"><a href="#2-指定查询字段" class="headerlink" title="2. 指定查询字段"></a>2. 指定查询字段</h3><ul>
<li><p>查询表结果时 , 可指定查询结果的数据列</p>
<ul>
<li><p>如 : SELECT * FROM student;</p>
</li>
<li><pre><code class="mysql"># 查询所有学生信息
SELECT * FROM student;

# 查询指定列(学号 , 姓名)
SELECT studentno,studentname FROM student;
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 3. AS起别名</span><br><span class="line"></span><br><span class="line">AS子句作用 :</span><br><span class="line"></span><br><span class="line">- 可给**数据列**取一个新别名</span><br><span class="line">- 可给**表**去一个新别名</span><br><span class="line">- 可把经计算或总结的结果用另一个新名称来代替</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;mysql</span><br><span class="line"># 这里是为列取别名(当然as关键词可以省略)</span><br><span class="line">SELECT studentno AS 学号,studentname AS 姓名 FROM student;</span><br><span class="line"></span><br><span class="line"># 使用as也可以为表取别名</span><br><span class="line">SELECT studentno AS 学号,studentname AS 姓名 FROM student AS s;</span><br><span class="line"></span><br><span class="line"># 使用as,为查询结果取一个新名字</span><br><span class="line"># CONCAT()函数拼接字符串</span><br><span class="line">SELECT CONCAT(&#39;姓名:&#39;,studentname) AS 新姓名 FROM student;</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
</li>
</ul>
<h3 id="4-去重"><a href="#4-去重" class="headerlink" title="4. 去重"></a>4. 去重</h3><ul>
<li>作用 : 去掉SELECT查询返回的记录结果中重复的记录(返回所有列的值都相同),只返回一条</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看哪些同学参加了考试(学号)--去除重复项</span><br><span class="line">SELECT * FROM result; # 查看考试成绩</span><br><span class="line">SELECT studentno FROM result; # 查看哪些同学参加了考试</span><br><span class="line">SELECT DISTINCT studentno FROM result;</span><br><span class="line"># 了解:DISTINCT 去除重复项 , (默认是ALL)</span><br></pre></td></tr></table></figure>

<h3 id="5-使用表达式的列"><a href="#5-使用表达式的列" class="headerlink" title="5. 使用表达式的列"></a>5. 使用表达式的列</h3><p>数据库中的表达式：文本值,列，NULL，计算表达式，变量</p>
<p>select <code>表达式</code> from 表</p>
<p>应用场景：</p>
<ul>
<li>select 语句返回结果列中使用</li>
<li>select 与剧中的order by, having 等子句中使用</li>
<li>DML语句中where条件语句中使用表达式</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># selcet查询中可以使用表达式</span><br><span class="line">SELECT @@auto_increment_increment; # 查询自增步长</span><br><span class="line">SELECT VERSION(); #查询版本号</span><br><span class="line">SELECT 100*3-1 AS 计算结果; # 表达式</span><br><span class="line"></span><br><span class="line"># 学员考试成绩集体提分一分查看</span><br><span class="line">SELECT studentno,StudentResult+1 AS &#39;提分后&#39; FROM result;</span><br></pre></td></tr></table></figure>

<h3 id="6-where条件字句"><a href="#6-where条件字句" class="headerlink" title="6. where条件字句"></a>6. where条件字句</h3><ul>
<li>作用：检索数据中符合条件的值</li>
<li>搜索条件可由一个或多个逻辑表达式组成 , 结果一般为真或假.</li>
</ul>
<p>逻辑运算符</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>语法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>and &amp;&amp;</td>
<td>a  and b</td>
<td>逻辑与</td>
</tr>
<tr>
<td>or   ||</td>
<td>a  or b</td>
<td>逻辑或</td>
</tr>
<tr>
<td>Not   !</td>
<td>not a      ! a</td>
<td>逻辑非</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 满足条件的查询(where)</span><br><span class="line">SELECT Studentno,StudentResult FROM result;</span><br><span class="line"></span><br><span class="line"># 查询考试成绩在95-100之间的</span><br><span class="line">SELECT Studentno,StudentResult </span><br><span class="line">FROM result</span><br><span class="line">WHERE StudentResult&gt;&#x3D;95 AND StudentResult&lt;&#x3D;100;</span><br><span class="line"># AND也可以写成 &amp;&amp;</span><br><span class="line">SELECT Studentno,StudentResult </span><br><span class="line">FROM result</span><br><span class="line">WHERE StudentResult&gt;&#x3D;95 &amp;&amp; StudentResult&lt;&#x3D;100;</span><br><span class="line"></span><br><span class="line"># 模糊查询(对应的词:精确查询)</span><br><span class="line">SELECT Studentno,StudentResult </span><br><span class="line">FROM result</span><br><span class="line">WHERE StudentResult BETWEEN 95 AND 100;</span><br><span class="line"># 除了1000号同学,要其他同学的成绩</span><br><span class="line">SELECT studentno,studentresult</span><br><span class="line">FROM result</span><br><span class="line">WHERE studentno!&#x3D;1000;</span><br><span class="line"></span><br><span class="line"># 使用NOT</span><br><span class="line">SELECT studentno,studentresult</span><br><span class="line">FROM result</span><br><span class="line">WHERE NOT studentno&#x3D;1000;</span><br></pre></td></tr></table></figure>

<h3 id="7-模糊查询"><a href="#7-模糊查询" class="headerlink" title="7. 模糊查询"></a>7. 模糊查询</h3><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><table>
<thead>
<tr>
<th>运算符</th>
<th>语法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>Is NUll</td>
<td>a is null</td>
<td>如果操作符是null ,结果为真</td>
</tr>
<tr>
<td>Is not NUll</td>
<td>a is not null</td>
<td>如果操作符不为null,结果为真</td>
</tr>
<tr>
<td>Between</td>
<td>a between b and c</td>
<td>如果a在b和c之间，结果为真</td>
</tr>
<tr>
<td>Like</td>
<td>a like b</td>
<td>SQL匹配，如果a 匹配到 b，则结果为真</td>
</tr>
<tr>
<td>in</td>
<td>a in (a1,a2,a3)</td>
<td>如果a在a1,a2,a3中，结果为真</td>
</tr>
</tbody></table>
<h4 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">%     <span class="comment">--代表0到任意个字符</span></span><br><span class="line">_     <span class="comment">--代表1个字符</span></span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#模糊查询 between and \ like \ in \ null</span><br><span class="line"></span><br><span class="line">#&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"># LIKE</span><br><span class="line">#&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">#查询姓李的同学的学号及姓名</span><br><span class="line">#like结合使用的通配符 : % (代表0到任意个字符)  _ (一个字符)</span><br><span class="line">SELECT studentno,studentname FROM student</span><br><span class="line">WHERE studentname LIKE &#39;李%&#39;;</span><br><span class="line"></span><br><span class="line">#查询姓李的同学,后面只有一个字的</span><br><span class="line">SELECT studentno,studentname FROM student</span><br><span class="line">WHERE studentname LIKE &#39;李_&#39;;</span><br><span class="line"></span><br><span class="line">#查询姓李的同学,后面只有两个字的</span><br><span class="line">SELECT studentno,studentname FROM student</span><br><span class="line">WHERE studentname LIKE &#39;李__&#39;;</span><br><span class="line"></span><br><span class="line">#查询姓名中含有 文 字的</span><br><span class="line">SELECT studentno,studentname FROM student</span><br><span class="line">WHERE studentname LIKE &#39;%文%&#39;;</span><br><span class="line"></span><br><span class="line">#查询姓名中含有特殊字符的需要使用转义符号 &#39;\&#39;</span><br><span class="line">#自定义转义符关键字:  ESCAPE &#39;:&#39;</span><br><span class="line"></span><br><span class="line">#&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"># IN</span><br><span class="line">#&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">#查询学号为1000,1001,1002的学生姓名</span><br><span class="line">SELECT studentno,studentname FROM student</span><br><span class="line">WHERE studentno IN (1000,1001,1002);</span><br><span class="line"></span><br><span class="line">#查询地址在北京,南京,河南洛阳的学生</span><br><span class="line">SELECT studentno,studentname,address FROM student</span><br><span class="line">WHERE address IN (&#39;北京&#39;,&#39;南京&#39;,&#39;河南洛阳&#39;);</span><br><span class="line"></span><br><span class="line">#&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"># NULL 空</span><br><span class="line">#&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">#查询出生日期没有填写的同学</span><br><span class="line">#不能直接写&#x3D;NULL , 这是代表错误的 , 用 is null </span><br><span class="line">SELECT studentname FROM student</span><br><span class="line">WHERE BornDate IS NULL;</span><br><span class="line"></span><br><span class="line">#查询出生日期填写的同学</span><br><span class="line">SELECT studentname FROM student</span><br><span class="line">WHERE BornDate IS NOT NULL;</span><br><span class="line"></span><br><span class="line">#查询没有写家庭住址的同学(空字符串不等于null)</span><br><span class="line">SELECT studentname FROM student</span><br><span class="line">WHERE Address&#x3D;&#39;&#39; OR Address IS NULL;</span><br></pre></td></tr></table></figure>

<h3 id="8-联表查询"><a href="#8-联表查询" class="headerlink" title="8. 联表查询"></a>8. 联表查询</h3><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200215174854.png" alt=""></p>
<table>
<thead>
<tr>
<th>操作</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>Inner join</td>
<td>如果表中有一个匹配的值，就返回</td>
</tr>
<tr>
<td>left    join</td>
<td>会从左表中返回所有的值，哪怕右表中没有配置的值</td>
</tr>
<tr>
<td>right  join</td>
<td>会从右表中返回所有的值，哪怕左表中没有匹配的值</td>
</tr>
</tbody></table>
<ul>
<li>join on     — 连接查询</li>
<li>where      — 等值查询</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">1. 连接查询</span><br><span class="line">    如需要多张数据表的数据进行查询,则可通过连接运算符实现多个查询</span><br><span class="line">内连接 inner join</span><br><span class="line">    查询两个表中的结果集中的交集</span><br><span class="line">外连接 outer join</span><br><span class="line">    左外连接 left join</span><br><span class="line">        (以左表作为基准,右边表来一一匹配,匹配不上的,返回左表的记录,右表以NULL填充)</span><br><span class="line">    右外连接 right join</span><br><span class="line">        (以右表作为基准,左边表来一一匹配,匹配不上的,返回右表的记录,左表以NULL填充)</span><br><span class="line">        </span><br><span class="line">2. 等值连接和非等值连接</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure>

<p>练习：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查询参加了考试的同学信息(学号,学生姓名,科目编号,分数)</span><br><span class="line">SELECT * FROM student;</span><br><span class="line">SELECT * FROM result;</span><br><span class="line"></span><br><span class="line">&#x2F;*思路:</span><br><span class="line">(1):分析需求,确定查询的列来源于两个类,student  result,连接查询</span><br><span class="line">(2):确定使用哪种连接查询?(内连接)</span><br><span class="line">*&#x2F;</span><br><span class="line">SELECT s.studentno,studentname,subjectno,StudentResult</span><br><span class="line">FROM student s</span><br><span class="line">INNER JOIN result r</span><br><span class="line">ON r.studentno &#x3D; s.studentno</span><br><span class="line"></span><br><span class="line"># 右连接(也可实现)</span><br><span class="line">SELECT s.studentno,studentname,subjectno,StudentResult</span><br><span class="line">FROM student s</span><br><span class="line">RIGHT JOIN result r</span><br><span class="line">ON r.studentno &#x3D; s.studentno</span><br><span class="line"></span><br><span class="line"># 等值连接</span><br><span class="line">SELECT s.studentno,studentname,subjectno,StudentResult</span><br><span class="line">FROM student s , result r</span><br><span class="line">WHERE r.studentno &#x3D; s.studentno</span><br><span class="line"></span><br><span class="line"># 左连接 (查询了所有同学,不考试的也会查出来)</span><br><span class="line">SELECT s.studentno,studentname,subjectno,StudentResult</span><br><span class="line">FROM student s</span><br><span class="line">LEFT JOIN result r</span><br><span class="line">ON r.studentno &#x3D; s.studentno</span><br><span class="line"></span><br><span class="line">#查一下缺考的同学(左连接应用场景)</span><br><span class="line">SELECT s.studentno,studentname,subjectno,StudentResult</span><br><span class="line">FROM student s</span><br><span class="line">LEFT JOIN result r</span><br><span class="line">ON r.studentno &#x3D; s.studentno</span><br><span class="line">WHERE StudentResult IS NULL</span><br><span class="line"></span><br><span class="line">#思考题:查询参加了考试的同学信息(学号,学生姓名,科目名,分数)</span><br><span class="line">SELECT s.studentno,studentname,subjectname,StudentResult</span><br><span class="line">FROM student s</span><br><span class="line">INNER JOIN result r</span><br><span class="line">ON r.studentno &#x3D; s.studentno</span><br><span class="line">INNER JOIN &#96;subject&#96; sub</span><br><span class="line">ON sub.subjectno &#x3D; r.subjectno</span><br></pre></td></tr></table></figure>

<h3 id="9-自连接"><a href="#9-自连接" class="headerlink" title="9. 自连接"></a>9. 自连接</h3><p><strong>准备环境</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 创建一个表</span><br><span class="line">CREATE TABLE &#96;category&#96; (</span><br><span class="line">  &#96;categoryid&#96; INT(10) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT &#39;主题id&#39;,</span><br><span class="line">  &#96;pid&#96; INT(10) NOT NULL COMMENT &#39;父id&#39;,</span><br><span class="line">  &#96;categoryName&#96; VARCHAR(50) NOT NULL COMMENT &#39;主题名字&#39;,</span><br><span class="line">  PRIMARY KEY (&#96;categoryid&#96;)</span><br><span class="line">) ENGINE&#x3D;INNODB AUTO_INCREMENT&#x3D;9 DEFAULT CHARSET&#x3D;utf8</span><br><span class="line"></span><br><span class="line"># 插入数据</span><br><span class="line">INSERT INTO &#96;category&#96; (&#96;categoryid&#96;, &#96;pid&#96;, &#96;categoryName&#96;) </span><br><span class="line">VALUES(&#39;2&#39;,&#39;1&#39;,&#39;信息技术&#39;),</span><br><span class="line">(&#39;3&#39;,&#39;1&#39;,&#39;软件开发&#39;),</span><br><span class="line">(&#39;4&#39;,&#39;3&#39;,&#39;数据库&#39;),</span><br><span class="line">(&#39;5&#39;,&#39;1&#39;,&#39;美术设计&#39;),</span><br><span class="line">(&#39;6&#39;,&#39;3&#39;,&#39;web开发&#39;),</span><br><span class="line">(&#39;7&#39;,&#39;5&#39;,&#39;ps技术&#39;),</span><br><span class="line">(&#39;8&#39;,&#39;2&#39;,&#39;办公信息&#39;);</span><br></pre></td></tr></table></figure>

<p><strong>练习：</strong>核心思想:把一张表看成两张一模一样的表,然后将这两张表连接查询(自连接)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 编写SQL语句,将栏目的父子关系呈现出来 (父栏目名称,子栏目名称)</span><br><span class="line"># 核心思想:把一张表看成两张一模一样的表,然后将这两张表连接查询(自连接)</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">自连接</span><br><span class="line">    数据表与自身进行连接</span><br><span class="line"></span><br><span class="line">需求:从一个包含栏目ID , 栏目名称和父栏目ID的表中 </span><br><span class="line">     查询父栏目名称和其他子栏目名称</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">SELECT a.categoryName AS &#39;父栏目&#39;,b.categoryName AS &#39;子栏目&#39;</span><br><span class="line">FROM category AS a,category AS b</span><br><span class="line">WHERE a.&#96;categoryid&#96;&#x3D;b.&#96;pid&#96;</span><br></pre></td></tr></table></figure>

<h3 id="10-分页和排序"><a href="#10-分页和排序" class="headerlink" title="10.分页和排序"></a>10.分页和排序</h3><h4 id="排序-order-by"><a href="#排序-order-by" class="headerlink" title="排序  (order by)"></a>排序  (order by)</h4><ul>
<li>升序 ASC</li>
<li>降序 DESC</li>
</ul>
<p>语法：order by</p>
<ul>
<li>用于根据指定的列对结果集进行排序</li>
<li>默认按照ASC升序对记录进行排序</li>
</ul>
<p>练习：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查询 数据库结构-1 的所有考试结果(学号 学生姓名 科目名称 成绩)</span><br><span class="line"># 按成绩降序排序</span><br><span class="line">SELECT s.studentno,studentname,subjectname,StudentResult</span><br><span class="line">FROM student s</span><br><span class="line">INNER JOIN result r</span><br><span class="line">ON r.studentno &#x3D; s.studentno</span><br><span class="line">INNER JOIN &#96;subject&#96; sub</span><br><span class="line">ON r.subjectno &#x3D; sub.subjectno</span><br><span class="line">WHERE subjectname&#x3D;&#39;数据库结构-1&#39;</span><br><span class="line">ORDER BY StudentResult DESC , studentno</span><br></pre></td></tr></table></figure>

<h4 id="分页（limit）"><a href="#分页（limit）" class="headerlink" title="分页（limit）"></a>分页（limit）</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">推导: </span><br><span class="line">    第一页 : limit 0,5</span><br><span class="line">    第二页 : limit 5,5</span><br><span class="line">    第三页 : limit 10,5</span><br><span class="line">    ......</span><br><span class="line">    第N页 : limit (pageNo-1)*pageSzie,pageSzie</span><br><span class="line">    [pageNo:页码,pageSize:单页面显示条数]</span><br></pre></td></tr></table></figure>

<p>练习：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 每页显示5条数据</span><br><span class="line">SELECT s.studentno,studentname,subjectname,StudentResult</span><br><span class="line">FROM student s</span><br><span class="line">INNER JOIN result r</span><br><span class="line">ON r.studentno &#x3D; s.studentno</span><br><span class="line">INNER JOIN &#96;subject&#96; sub</span><br><span class="line">ON r.subjectno &#x3D; sub.subjectno</span><br><span class="line">WHERE subjectname&#x3D;&#39;数据库结构-1&#39;</span><br><span class="line">ORDER BY StudentResult DESC , studentno</span><br><span class="line">LIMIT 0,5</span><br><span class="line"></span><br><span class="line">#查询 JAVA第一学年 课程成绩前10名并且分数大于80的学生信息(学号,姓名,课程名,分数)</span><br><span class="line">SELECT s.studentno,studentname,subjectname,StudentResult</span><br><span class="line">FROM student s</span><br><span class="line">INNER JOIN result r</span><br><span class="line">ON r.studentno &#x3D; s.studentno</span><br><span class="line">INNER JOIN &#96;subject&#96; sub</span><br><span class="line">ON r.subjectno &#x3D; sub.subjectno</span><br><span class="line">WHERE subjectname&#x3D;&#39;JAVA第一学年&#39;</span><br><span class="line">ORDER BY StudentResult DESC</span><br><span class="line">LIMIT 0,10</span><br></pre></td></tr></table></figure>

<h3 id="11-子查询和嵌套查询"><a href="#11-子查询和嵌套查询" class="headerlink" title="11. 子查询和嵌套查询"></a>11. 子查询和嵌套查询</h3><p>练习：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查询 数据库结构-1 的所有考试结果(学号,科目编号,成绩),并且成绩降序排列</span><br><span class="line">#方法一:使用连接查询</span><br><span class="line">SELECT studentno,r.subjectno,StudentResult</span><br><span class="line">FROM result r </span><br><span class="line">INNER JOIN &#96;subject&#96; sub</span><br><span class="line">ON r.&#96;SubjectNo&#96;&#x3D;sub.&#96;SubjectNo&#96;</span><br><span class="line">WHERE subjectname &#x3D; &#39;数据库结构-1&#39;</span><br><span class="line">ORDER BY studentresult DESC;</span><br><span class="line"></span><br><span class="line">#方法二:使用子查询(执行顺序:由里及外)</span><br><span class="line">SELECT studentno,subjectno,StudentResult</span><br><span class="line">FROM result</span><br><span class="line">WHERE subjectno&#x3D;(</span><br><span class="line">    SELECT subjectno FROM &#96;subject&#96; </span><br><span class="line">    WHERE subjectname &#x3D; &#39;数据库结构-1&#39;</span><br><span class="line">)</span><br><span class="line">ORDER BY studentresult DESC;</span><br><span class="line"></span><br><span class="line">#方法二:使用连接查询+子查询</span><br><span class="line">#分数不小于80分的学生的学号和姓名</span><br><span class="line">SELECT r.studentno,studentname FROM student s</span><br><span class="line">INNER JOIN result r ON s.&#96;StudentNo&#96;&#x3D;r.&#96;StudentNo&#96;</span><br><span class="line">WHERE StudentResult&gt;&#x3D;80</span><br><span class="line"></span><br><span class="line">#在上面SQL基础上,添加需求:课程为 高等数学-2</span><br><span class="line">SELECT r.studentno,studentname FROM student s</span><br><span class="line">INNER JOIN result r ON s.&#96;StudentNo&#96;&#x3D;r.&#96;StudentNo&#96;</span><br><span class="line">WHERE StudentResult&gt;&#x3D;80 AND subjectno&#x3D;(</span><br><span class="line">    SELECT subjectno FROM &#96;subject&#96;</span><br><span class="line">    WHERE subjectname &#x3D; &#39;高等数学-2&#39;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">#方法三:使用子查询</span><br><span class="line">#分步写简单sql语句,然后将其嵌套起来</span><br><span class="line">SELECT studentno,studentname FROM student WHERE studentno IN(</span><br><span class="line">    SELECT studentno FROM result WHERE StudentResult&gt;&#x3D;80 AND subjectno&#x3D;(</span><br><span class="line">        SELECT subjectno FROM &#96;subject&#96; WHERE subjectname &#x3D; &#39;高等数学-2&#39;</span><br><span class="line">    )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="12-分组查询"><a href="#12-分组查询" class="headerlink" title="12. 分组查询"></a>12. 分组查询</h3><p>语法：group by</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查询不同课程的平均分,最高分,最低分</span><br><span class="line"># 前提:根据不同的课程进行分组</span><br><span class="line"></span><br><span class="line">SELECT subjectname,AVG(studentresult) AS 平均分,MAX(StudentResult) AS 最高分,MIN(StudentResult) AS 最低分</span><br><span class="line">FROM result AS r</span><br><span class="line">INNER JOIN &#96;subject&#96; AS s</span><br><span class="line">ON r.subjectno &#x3D; s.subjectno</span><br><span class="line">GROUP BY r.subjectno</span><br><span class="line">HAVING 平均分&gt;80;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">where写在group by前面.</span><br><span class="line">要是放在分组后面的筛选</span><br><span class="line">要使用HAVING..</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql数据管理</title>
    <url>/2019/02/12/Mysql/Mysql%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="Mysql：MySQL数据管理"><a href="#Mysql：MySQL数据管理" class="headerlink" title="Mysql：MySQL数据管理"></a>Mysql：MySQL数据管理</h1><h2 id="外键管理（一般不用）"><a href="#外键管理（一般不用）" class="headerlink" title="外键管理（一般不用）"></a>外键管理（一般不用）</h2><h3 id="外键的概念"><a href="#外键的概念" class="headerlink" title="外键的概念"></a>外键的概念</h3><p>​    如果公共关键字在一个关系中是主关键字，那么这个公共关键字被称为另一个关系的外键。</p>
<p>​    由此可见，外键表示了两个关系之间的相关联系。以另一个关系的外键作为主关键字的表被称为主表，具有此外键的表被陈伟主表的从表。</p>
<p>​    在实际操作中，将一个表的值放入第二个表中来表示关联，所使用的值是第一个表的主键值(在必要时可包括复合主键值)。此时，第二个表中保存这些值的属性称为外键(<strong>foreign key</strong>)。</p>
<a id="more"></a>

<blockquote>
</blockquote>
<h3 id="外键的作用"><a href="#外键的作用" class="headerlink" title="外键的作用"></a>外键的作用</h3><p>​    保持数据的<strong>一致性，完整性</strong> ，主要目的是控制存储在外键表中的数据<strong>约束</strong>，使两张表形成关联，外键只能引用外表中的列的值或者使用空值 。</p>
<h3 id="创建外键"><a href="#创建外键" class="headerlink" title="创建外键"></a>创建外键</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--方式一 : 创建子表同时创建外键</span></span><br><span class="line"><span class="comment">-- 年级表(id\年级名称) --主表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`grade`</span> (</span><br><span class="line">  <span class="string">`gradeid`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'年级ID'</span>,</span><br><span class="line">  <span class="string">`gradename`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'年级名称'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`gradeid`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 学生信息表 从表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`student`</span> (</span><br><span class="line">  <span class="string">`studentno`</span> <span class="built_in">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'学号'</span>,</span><br><span class="line">  <span class="string">`studentname`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'匿名'</span> <span class="keyword">COMMENT</span> <span class="string">'姓名'</span>,</span><br><span class="line">  <span class="string">`sex`</span> <span class="built_in">TINYINT</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="string">'1'</span> <span class="keyword">COMMENT</span> <span class="string">'性别'</span>,</span><br><span class="line">  <span class="string">`gradeid`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'年级'</span>,</span><br><span class="line">  <span class="string">`phoneNum`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'手机'</span>,</span><br><span class="line">  <span class="string">`address`</span> <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'地址'</span>,</span><br><span class="line">  <span class="string">`borndate`</span> DATETIME <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'生日'</span>,</span><br><span class="line">  <span class="string">`email`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'邮箱'</span>,</span><br><span class="line">  <span class="string">`idCard`</span> <span class="built_in">VARCHAR</span>(<span class="number">18</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'身份证号'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`studentno`</span>),</span><br><span class="line">   <span class="keyword">KEY</span> <span class="string">`FK_gradeid`</span>(<span class="string">`gradeid`</span>),</span><br><span class="line">   <span class="keyword">CONSTRAINT</span> <span class="string">`FK_gradeid`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`gradeid`</span>) <span class="keyword">REFERENCES</span> <span class="string">`grade`</span>(<span class="string">`gradeid`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br></pre></td></tr></table></figure>



<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--方式二:创建完字表后，修改子表添加外键</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> <span class="string">`FK_gradeid`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span>(<span class="string">`gradeid`</span>) <span class="keyword">REFERENCES</span> <span class="string">`grade`</span>(<span class="string">`gradeid`</span>);</span><br></pre></td></tr></table></figure>

<h3 id="删除外键"><a href="#删除外键" class="headerlink" title="删除外键"></a>删除外键</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#删除外键</span><br><span class="line">ALTER TABLE student DROP FOREIGN KEY  FK_gradeid;</span><br><span class="line"># 发现执行完上面的,索引还在,所以还要删除索引</span><br><span class="line"># 注:这个索引是建立外键的时候默认生成的</span><br><span class="line">ALTER TABLE student DROP INDEX FK_gradeid;</span><br></pre></td></tr></table></figure>



<h2 id="DML语言（重要-）"><a href="#DML语言（重要-）" class="headerlink" title="DML语言（重要~）"></a>DML语言（重要~）</h2><p>数据库的意思：数据存储 数据管理</p>
<p><strong>DML语言：数据库操作语言</strong></p>
<ul>
<li><p>Insert</p>
</li>
<li><p>update</p>
</li>
<li><p>delete</p>
</li>
</ul>
<h3 id="添加-Insert"><a href="#添加-Insert" class="headerlink" title="添加 Insert"></a>添加 Insert</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#语法： </span><br><span class="line">#单条插入</span><br><span class="line">insert into 表名&#123;[字段名1，字段名2，字段名3]&#125; values(&#39;值1&#39;,&#39;值2&#39;,&#39;值3&#39;)</span><br><span class="line">#多条插入</span><br><span class="line">insert into 表名&#123;[字段名1，字段名2，字段名3]&#125; </span><br><span class="line">values(&#39;值1&#39;,&#39;值2&#39;,&#39;值3&#39;),(&#39;值1&#39;,&#39;值2&#39;,&#39;值3&#39;),values(&#39;值1&#39;,&#39;值2&#39;,&#39;值3&#39;).....</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li><p>一般写插入语句，数据要和字段<strong>一一对应</strong></p>
</li>
<li><p>‘字段1,字段2…’该部分可省略 , 但添加的值务必与表结构,数据列,顺序相对应,且数量一致</p>
</li>
<li><p>可同时插入多条数据 , values 后用英文逗号隔开.</p>
</li>
</ul>
<h3 id="修改-update"><a href="#修改-update" class="headerlink" title="修改 update"></a>修改 update</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 语法 </span><br><span class="line">update &#96;表名&#96; set &#96;colnum_name&#96; &#x3D; value where [条件]</span><br><span class="line"></span><br><span class="line">#修改多个属性 逗号隔开</span><br><span class="line">update &#96;表名&#96; set &#96;colnum_name1&#96; &#x3D; value1,&#96;colnum_name2&#96; &#x3D; value2... where [条件]</span><br></pre></td></tr></table></figure>



<table>
<thead>
<tr>
<th>操作符</th>
<th>含义</th>
<th>范围</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>=</td>
<td>等于</td>
<td>5=6</td>
<td>false</td>
</tr>
<tr>
<td>&lt;&gt; 或者 !=</td>
<td>不等于</td>
<td>5=6</td>
<td>true</td>
</tr>
<tr>
<td>&gt;</td>
<td>大于</td>
<td></td>
<td></td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
<td></td>
<td></td>
</tr>
<tr>
<td>&gt;=</td>
<td>大于等于</td>
<td></td>
<td></td>
</tr>
<tr>
<td>&lt;=</td>
<td>小与等于</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Between …and…</td>
<td>闭合区间</td>
<td>[2,5]</td>
<td></td>
</tr>
<tr>
<td>AND</td>
<td>并列</td>
<td></td>
<td></td>
</tr>
<tr>
<td>OR</td>
<td>或者</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>注意：</p>
<ul>
<li><p>column_name 为要更改的数据列</p>
</li>
<li><p>value 为修改后的数据 , 可以为变量 , 具体指 , 表达式或者嵌套的SELECT结果</p>
</li>
<li><p>condition 为筛选条件 , 如不指定则修改该表的所有列数据</p>
</li>
</ul>
<h3 id="删除-Delete"><a href="#删除-Delete" class="headerlink" title="删除 Delete"></a>删除 Delete</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 语法</span><br><span class="line"># 删除指定数据</span><br><span class="line">DELETE From &#96;表名&#96; where 条件</span><br><span class="line"></span><br><span class="line"># TRUNCATE：完全清空一个数据库表，表的结构和索引约束不会变</span><br><span class="line">TRUNCATE TABLE &#96;表名&#96;</span><br></pre></td></tr></table></figure>

<h3 id="delete-和-Truncate-区别"><a href="#delete-和-Truncate-区别" class="headerlink" title="delete 和 Truncate 区别"></a>delete 和 Truncate 区别</h3><p>相同 : 都能删除数据 , 不删除表结构 , 但TRUNCATE速度更快</p>
<p>不同点：</p>
<ul>
<li>truncate :  重新设置自增列，计数器会归零</li>
<li>使用TRUNCATE TABLE不会对事务有影响</li>
</ul>
]]></content>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql 操作数据库</title>
    <url>/2019/02/11/Mysql/Mysql%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h1 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h1><h2 id="结构化语言分类"><a href="#结构化语言分类" class="headerlink" title="结构化语言分类"></a>结构化语言分类</h2><p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200210162433.png" alt=""></p>
<p>操作数据库&gt;操作表&gt;操作表中的字段</p>
<p><strong>几个基本的数据库操作命令</strong> ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">update user set password&#x3D;password(&#39;123456&#39;)where user&#x3D;&#39;root&#39;; 修改密码</span><br><span class="line">flush privileges;  刷新数据库</span><br><span class="line">show databases; 显示所有数据库</span><br><span class="line">use dbname； 打开某个数据库</span><br><span class="line">show tables; 显示数据库mysql中所有的表</span><br><span class="line">describe user; 显示表mysql数据库中user表的列信息</span><br><span class="line">create database name; 创建数据库</span><br><span class="line">use databasename; 选择数据库</span><br><span class="line"></span><br><span class="line">exit; 退出Mysql</span><br><span class="line">? 命令关键词 : 寻求帮助</span><br><span class="line"># 表示注释</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure>



<a id="more"></a>

<h2 id="DDL语言"><a href="#DDL语言" class="headerlink" title="DDL语言"></a>DDL语言</h2><h3 id="操作数据库-1"><a href="#操作数据库-1" class="headerlink" title="操作数据库"></a>操作数据库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">创建数据库 :  create database [if not exists] 数据库名; </span><br><span class="line"></span><br><span class="line">删除数据库 :  drop database [if exists] 数据库名; </span><br><span class="line"></span><br><span class="line">查看数据库 :  show databases; </span><br><span class="line"></span><br><span class="line">使用数据库 :  use 数据库名;</span><br></pre></td></tr></table></figure>



<h3 id="数据库的列类型"><a href="#数据库的列类型" class="headerlink" title="数据库的列类型"></a>数据库的列类型</h3><h4 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">整数</span><br><span class="line">tinyint   --十分小的数据        1个字节</span><br><span class="line">smallint  --较小的数据	       2个字节</span><br><span class="line">mediumint --中等大小的数据       3个字节</span><br><span class="line">int       --标准的整数          4个字节</span><br><span class="line">bigint    --较大的数据	       8个字节</span><br><span class="line"></span><br><span class="line">小数</span><br><span class="line">float     --浮点数              4个字节</span><br><span class="line">double    --浮点数  	         8个字节</span><br><span class="line">decimal   --字符串形式的浮点数    金融计算使用</span><br></pre></td></tr></table></figure>



<h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">char      --字符串       固定大小0-255</span><br><span class="line">varchar   --可变字符串    0-65535</span><br><span class="line">tinytext  --微型文本      2^8-1</span><br><span class="line">text      --文本串       2^16-1</span><br></pre></td></tr></table></figure>



<h4 id="时间日期"><a href="#时间日期" class="headerlink" title="时间日期"></a>时间日期</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">date       YYYY-MM-DD	        日期格式</span><br><span class="line">time       HH:MM:SS             时间格式</span><br><span class="line">datetime   YYYY-MM-DD HH:MM:SS  最常用的</span><br><span class="line">timestamp  时间戳  格林威治时间</span><br><span class="line">year       年份表示</span><br></pre></td></tr></table></figure>



<h4 id="null"><a href="#null" class="headerlink" title="null"></a>null</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">没有值   表示未知的值</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;注意：不要使用null进行数值运算</span><br></pre></td></tr></table></figure>



<h3 id="数据库的字段属性-（重要！！！）"><a href="#数据库的字段属性-（重要！！！）" class="headerlink" title="数据库的字段属性 （重要！！！）"></a>数据库的字段属性 （重要！！！）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Unsigned       无符号的整数   声明了该列不能是负数</span><br><span class="line">zerofill       0填充的       </span><br><span class="line">auto_increment  自增         通常设置是主键 通常可以设置主键的起始值和步长</span><br><span class="line">null		   默认设置</span><br><span class="line">not null	   非空		  如果使用，不填值的话会报错</span><br><span class="line">default 	   设置默认值	如果不指定值，则会有默认的值</span><br></pre></td></tr></table></figure>

<h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 目标 : 创建一个school数据库</span><br><span class="line"># 创建学生表(列,字段)</span><br><span class="line"># 学号int 登录密码varchar(20) 姓名,性别varchar(2),出生日期(datatime),家庭住址,email</span><br><span class="line"># 创建表之前 , 一定要先选择数据库</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS &#96;student&#96;</span><br><span class="line"></span><br><span class="line">CREATE TABLE IF NOT EXISTS &#96;student&#96;(</span><br><span class="line"> &#96;id&#96; INT(4) NOT NULL AUTO_INCREMENT COMMENT &#39;学号&#39;,</span><br><span class="line"> &#96;name&#96; VARCHAR(30) NOT NULL DEFAULT &#39;匿名&#39; COMMENT &#39;姓名&#39;,</span><br><span class="line"> &#96;pwd&#96; VARCHAR(20) NOT NULL DEFAULT &#39;123345&#39; COMMENT &#39;密码&#39;,</span><br><span class="line"> &#96;gender&#96; VARCHAR(2) NOT NULL DEFAULT &#39;女&#39; COMMENT &#39;性别&#39;,</span><br><span class="line"> &#96;birthday&#96; DATETIME DEFAULT NULL COMMENT &#39;生日&#39;,</span><br><span class="line"> &#96;address&#96; VARCHAR(100) DEFAULT NULL COMMENT &#39;地址&#39;,</span><br><span class="line"> &#96;email&#96; VARCHAR(50) DEFAULT NULL COMMENT &#39;邮箱&#39;,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;)</span><br><span class="line"> )ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8</span><br><span class="line"> </span><br><span class="line"> # 查看数据库的定义</span><br><span class="line">SHOW CREATE DATABASE school;</span><br><span class="line"># 查看数据表的定义</span><br><span class="line">SHOW CREATE TABLE student;</span><br><span class="line"># 显示表结构</span><br><span class="line">DESC student;</span><br><span class="line"># 设置严格检查模式(不能容错了)</span><br><span class="line">SET sql_mode&#x3D;&#39;STRICT_TRANS_TABLES&#39;;</span><br></pre></td></tr></table></figure>



<h3 id="修改删除表"><a href="#修改删除表" class="headerlink" title="修改删除表"></a>修改删除表</h3><h4 id="修改表（ALTER-TABLE）"><a href="#修改表（ALTER-TABLE）" class="headerlink" title="修改表（ALTER TABLE）"></a>修改表（ALTER TABLE）</h4><ul>
<li>修改表名：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 旧表名 <span class="keyword">RENAME</span> <span class="keyword">AS</span> 新表名</span><br></pre></td></tr></table></figure>

<ul>
<li>添加字段：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> 字段名 列属性[属性值]</span><br></pre></td></tr></table></figure>

<ul>
<li>修改字段:</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">MODIFY</span> 字段名 列属性[属性值]</span><br></pre></td></tr></table></figure>

<ul>
<li>删除字段:</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> 字段名</span><br></pre></td></tr></table></figure>



<h4 id="删除表（Drop-TABLE）"><a href="#删除表（Drop-TABLE）" class="headerlink" title="删除表（Drop TABLE）"></a>删除表（Drop TABLE）</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--语法：DROP TABLE [IF EXISTS] 表名</span></span><br><span class="line"><span class="comment">--IF EXISTS为可选 , 判断是否存在该数据表</span></span><br><span class="line"><span class="comment">--如删除不存在的数据表会抛出错误</span></span><br></pre></td></tr></table></figure>



<h2 id="关于数据引擎"><a href="#关于数据引擎" class="headerlink" title="关于数据引擎"></a>关于数据引擎</h2><p>MySQL的数据表的类型 : <strong>MyISAM</strong> , <strong>InnoDB</strong> , HEAP , BOB , CSV等…</p>
<p><strong>常见的 MyISAM 与 InnoDB 类型</strong></p>
<table>
<thead>
<tr>
<th align="left"></th>
<th align="left">MyISAM</th>
<th>InnoDB</th>
</tr>
</thead>
<tbody><tr>
<td align="left">事物支持</td>
<td align="left">不支持</td>
<td>支持</td>
</tr>
<tr>
<td align="left">数据行锁定</td>
<td align="left">不支持</td>
<td>支持</td>
</tr>
<tr>
<td align="left">外键约束</td>
<td align="left">不支持</td>
<td>支持</td>
</tr>
<tr>
<td align="left">全文索引</td>
<td align="left">支持</td>
<td>不支持</td>
</tr>
<tr>
<td align="left">表空间的大小</td>
<td align="left">较小</td>
<td>较大,约为MyISAM的两倍</td>
</tr>
</tbody></table>
<p>常规使用操作：</p>
<ol>
<li>MYISAM        节约空间，速度较快</li>
<li>INNODB       安全性高，支持事务的处理，多表多用户操作</li>
</ol>
<p><strong>Mysql引擎在物理空间的区别</strong></p>
<p>MySQL数据表以文件方式存放在磁盘中</p>
<ul>
<li><p>包括表文件 , 数据文件 , 以及数据库的选项文件</p>
</li>
<li><p>位置 : Mysql安装目录\data\下存放数据表 . 目录名对应数据库名 , 该目录下文件名对应数据表 .</p>
</li>
</ul>
<ul>
<li><strong>InnoDB</strong>类型数据表只有一个 *.frm文件 , 以及上一级目录的ibdata1文件</li>
<li><strong>MyISAM</strong>类型数据表对应三个文件 :<ul>
<li>* . frm  –   表结构定义文件</li>
<li>* . MYD –   数据文件(data)</li>
<li>* . MYI   –   索引文件(index)</li>
</ul>
</li>
</ul>
<h2 id="设置数据库表的字符集编码"><a href="#设置数据库表的字符集编码" class="headerlink" title="设置数据库表的字符集编码"></a>设置数据库表的字符集编码</h2><blockquote>
<p>charset = utf8</p>
</blockquote>
<p>可为数据库,数据表,数据列设定不同的字符集</p>
<p>设定方法 :</p>
<ul>
<li>创建时通过命令来设置 , 如 :CREATE TABLE 表名()CHARSET = utf8; </li>
<li>如无设定 , 则根据MySQL数据库配置文件<strong>my.ini</strong>中的参数设定</li>
</ul>
]]></content>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql 安装与配置</title>
    <url>/2019/02/10/Mysql/Mysql%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="Mysql-安装与配置"><a href="#Mysql-安装与配置" class="headerlink" title="Mysql 安装与配置"></a>Mysql 安装与配置</h1><h2 id="MySQL5-7免安装版配置详细教程"><a href="#MySQL5-7免安装版配置详细教程" class="headerlink" title="MySQL5.7免安装版配置详细教程"></a>MySQL5.7免安装版配置详细教程</h2><h3 id="1-软件下载"><a href="#1-软件下载" class="headerlink" title="1.软件下载"></a>1.软件下载</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">Mysql是一个比较流行且很好用的一款数据库软件，如下记录了我学习总结的mysql免安装版的配置经验，要安装的朋友可以当做参考哦</span><br></pre></td></tr></table></figure>

<p><a href="https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.19-winx64.zip" target="_blank" rel="noopener">mysql下载地址</a></p>
<a id="more"></a>

<h3 id="2-操作步骤"><a href="#2-操作步骤" class="headerlink" title="2.操作步骤"></a>2.操作步骤</h3><p> 1.下载后得到zip压缩包.</p>
<p> 2.解压到自己想要安装到的目录</p>
<p> 3.添加环境变量</p>
<p> 4.编辑 my.ini 文件 ,注意替换路径位置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 [mysqld]</span><br><span class="line">2 basedir&#x3D;D:\Program Files\mysql-5.7\</span><br><span class="line">3 datadir&#x3D;D:\Program Files\mysql-5.7\data\</span><br><span class="line">4 port&#x3D;3306</span><br><span class="line">5 skip-grant-tables</span><br></pre></td></tr></table></figure>

<ol start="5">
<li><p>启动管理员模式下的CMD，并将路径切换至mysql下的bin目录，然后输入mysqld –install (安装mysql)</p>
</li>
<li><p>再输入 mysqld –initialize-insecure –user=mysql 初始化数据文件</p>
</li>
<li><p>然后再次启动mysql 然后用命令 mysql –u root –p 进入mysql管理界面（密码可为空）</p>
</li>
<li><p>进入界面后更改root密码</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update mysql.user set authentication_string&#x3D;password(&#39;123456&#39;) where user&#x3D;&#39;root&#39; and Host &#x3D; &#39;localhost&#39;;</span><br></pre></td></tr></table></figure>

<ol start="9">
<li><p>(最后输入flush privileges; 刷新权限)</p>
</li>
<li><p>修改 my.ini文件删除最后一句skip-grant-tables</p>
</li>
<li><p>重启mysql即可正常使用<br>net stop mysql<br>net start mysql</p>
</li>
<li><p>连接上测试出现以下结果就安装好了</p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200210155952.png" alt=""></p>
</li>
</ol>
<h2 id="MySql介绍"><a href="#MySql介绍" class="headerlink" title="MySql介绍"></a>MySql介绍</h2><h3 id="1-什么是数据库"><a href="#1-什么是数据库" class="headerlink" title="1.什么是数据库?"></a>1.什么是数据库?</h3><p>数据库(<strong>DataBase</strong>,简称<strong>DB</strong>)</p>
<p><strong>概念</strong> : 长期存放在计算机内,有组织,可共享的大量数据的集合,是一个数据”仓库”</p>
<p><strong>作用</strong> : 保存,并能安全管理数据(如:增删改查等),减少冗余…</p>
<p> <strong>数据库总览 :</strong></p>
<ul>
<li><p>关系型数据库</p>
<p>(SQL)</p>
<ul>
<li>MySQL , Oracle , SQL Server , SQLite , DB2 , …</li>
<li>关系型数据库通过外键关联来建立表与表之间的关系</li>
</ul>
</li>
<li><p>非关系型数据库</p>
<p>(NOSQL)</p>
<ul>
<li>Redis , MongoDB , …</li>
<li>非关系型数据库通常指数据以对象的形式存储在数据库中，而对象之间的关系通过每个对象自身的属性来决定</li>
</ul>
</li>
</ul>
<h3 id="2-什么是DBMS"><a href="#2-什么是DBMS" class="headerlink" title="2.什么是DBMS?"></a>2.什么是DBMS?</h3><p>数据库管理系统 ( <strong>D</strong>ata<strong>B</strong>ase <strong>M</strong>anagement <strong>S</strong>ystem )</p>
<p>　　数据库管理软件 , 科学组织和存储数据 , 高效地获取和维护数据</p>
<h3 id="3-MySQL简介"><a href="#3-MySQL简介" class="headerlink" title="3.MySQL简介"></a>3.MySQL简介</h3><p><strong>概念 :</strong> 是现在<strong>流行</strong>的<strong>开源</strong>的,<strong>免费</strong>的 <strong>关系型</strong>数据库</p>
<p><strong>历史 :</strong> 由瑞典MySQL AB 公司开发，目前属于 Oracle 旗下产品。</p>
<p><strong>特点 :</strong> </p>
<ul>
<li>免费 , 开源数据库</li>
<li>小巧 , 功能齐全</li>
<li>使用便捷</li>
<li>可运行于Windows或Linux操作系统</li>
<li>可适用于中小型甚至大型网站应用</li>
</ul>
<p><strong>官网 :</strong> <strong><a href="https://www.mysql.com/" target="_blank" rel="noopener">https://www.mysql.com/</a></strong></p>
<h3 id="4-可视化工具SQLyog"><a href="#4-可视化工具SQLyog" class="headerlink" title="4.可视化工具SQLyog"></a>4.可视化工具SQLyog</h3><p>可手动操作,管理MySQL数据库的软件工具</p>
<p>特点 : 简洁 , 易用 , 图形化</p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200210160104.png" alt=""></p>
<p><img src="https://zhuuu-bucket.oss-cn-beijing.aliyuncs.com/img/20200210160123.png" alt=""></p>
]]></content>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>抽象类-Abstract</title>
    <url>/2019/01/18/JavaInterview/%E6%8A%BD%E8%B1%A1%E7%B1%BBabstract/</url>
    <content><![CDATA[<h1 id="抽象类-Abstract"><a href="#抽象类-Abstract" class="headerlink" title="抽象类-Abstract"></a>抽象类-Abstract</h1><h2 id="1-抽象类的定义"><a href="#1-抽象类的定义" class="headerlink" title="1.抽象类的定义"></a>1.抽象类的定义</h2><p>抽象就是从多个事物中将共性的，本质的内容抽取出来。</p>
<a id="more"></a>

<h2 id="2-抽象方法的由来"><a href="#2-抽象方法的由来" class="headerlink" title="2.抽象方法的由来"></a>2.抽象方法的由来</h2><ul>
<li><p>多个对象都具备相同的功能，但是功能具体内容有所不同，那么在抽取过程中，只抽取了功能定义，并未抽取功能主体，那么只有功能声明，没有功能主体的 方法称为抽象方法。</p>
</li>
<li><p>举例:</p>
<ul>
<li>狼和狗都有吼叫的方法，可是吼叫内容是不一样的。所以抽象出来的犬科虽然有吼叫功能，但是并不明确吼叫的细节。</li>
</ul>
</li>
</ul>
<h2 id="3-抽象类的特点"><a href="#3-抽象类的特点" class="headerlink" title="3.抽象类的特点"></a>3.抽象类的特点</h2><p>3.1：抽象方法只能定义在抽象类中，抽象的方法和抽象的类必须由关键字abstract修饰。</p>
<p>3.2：抽象类值只定义方法声明，不定义功能主题（即方法的实现）。</p>
<p>3.3：抽象类不可以被创建对象。</p>
<p>3.4;抽象类只有子类继承了父类中的方法，并且对其中的所有抽象方法进行了重写。该子类才不是抽象类，只要不是重写当中的所有抽象方法，那么这个子类还是抽象类</p>
<h2 id="4-注意点"><a href="#4-注意点" class="headerlink" title="4.注意点"></a>4.注意点</h2><p>4.1：抽象类中是否有构造函数？有，用于给子类对象进行初始化。</p>
<p>4.2：抽象类中是否可以定义非抽象方法？可以</p>
<p>4.3:抽象关键字abstract和哪些不可以共存？final , private , static </p>
<p>4.4:：抽象类中可不可以不定义抽象方法？可以。抽象方法目的仅仅为了不让该类创建对象。</p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>基础</tag>
      </tags>
  </entry>
</search>
